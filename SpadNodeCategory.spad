)abbrev category SPNODEC SpadNodeCategory
SpadNodeCategory() : Category == ParsableCategory with
  construct : SpadApply(%) -> %
  construct : SpadAssign(%) -> %
  construct : SpadConditional(%) -> %
  construct : SpadFunction(%) -> %
  construct : SpadFunctor(%) -> %
  construct : SpadImport(%) -> %
  construct : SpadLambda(%) -> %
  construct : SpadLoop(%) -> %
  construct : SpadMacro(%) -> %
  construct : SpadMappingType(%) -> %
  construct : SpadNamedType(%) -> %
  construct : SpadRecordType(%) -> %
  construct : SpadSegment(%) -> %
  construct : SpadSequence(%) -> %
  construct : SpadSumType(%) -> %
  construct : SpadTypeExpr(%) -> %
  construct : SpadUnionType(%) -> %
  construct : DoubleFloat -> %
  construct : Integer -> %
  construct : String -> %
  construct : Symbol -> %

  emptyNode : () -> %

  apply? : % -> Boolean
  assign? : % -> Boolean
  conditional? : % -> Boolean
  emptyNode? : % -> Boolean
  float? : % -> Boolean
  function? : % -> Boolean
  functor? : % -> Boolean
  import? : % -> Boolean
  integer? : % -> Boolean
  lambda? : % -> Boolean
  loop? : % -> Boolean
  macro? : % -> Boolean
  mappingType? : % -> Boolean
  namedType? : % -> Boolean
  recordType? : % -> Boolean
  segment? : % -> Boolean
  sequence? : % -> Boolean
  string? : % -> Boolean
  sumType? : % -> Boolean
  symbol? : % -> Boolean
  typeExpr? : % -> Boolean
  unionType? : % -> Boolean

  coerce : % -> DoubleFloat
  coerce : % -> Integer
  coerce : % -> SpadApply(%)
  coerce : % -> SpadAssign(%)
  coerce : % -> SpadConditional(%)
  coerce : % -> SpadFunction(%)
  coerce : % -> SpadFunctor(%)
  coerce : % -> SpadImport(%)
  coerce : % -> SpadLambda(%)
  coerce : % -> SpadLoop(%)
  coerce : % -> SpadMacro(%)
  coerce : % -> SpadMappingType(%)
  coerce : % -> SpadNamedType(%)
  coerce : % -> SpadRecordType(%)
  coerce : % -> SpadSegment(%)
  coerce : % -> SpadSequence(%)
  coerce : % -> SpadSumType(%)
  coerce : % -> SpadTypeExpr(%)
  coerce : % -> SpadUnionType(%)
  coerce : % -> String
  coerce : % -> Symbol

  value? : % -> Boolean
  constructor? : Symbol -> Boolean

  parseNonNull : SExpression -> %

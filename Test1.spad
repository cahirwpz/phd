)abbrev domain TEST1 Test1
Test1() : Exports == Implementation where
  I ==> Integer
  F ==> Float
  S ==> String

  Exports ==> with
    foo : I -> I
    foo : F -> F
    bar : (I, I) -> I

  Implementation ==> add
    import Float
    import PositiveInteger
    import NonNegativeInteger

    -- foo : I -> F

    foo (a : I) ==
      a2 := a * a
      ma := - a
      if a >= 0
        then ma * 2
        else a2 + 2

    -- [BUG] Type checker should remember that {foo : I -> I} has been already
    -- defined.
    -- foo a == a + 1

    foo (a : F) == a + 1.0

    baz : (I, I) -> I

    bar (x, y) ==
      -- [BUG] Cannot remove next line, because branch environment merging
      -- doesn't work.
      nx : Integer
      if x > 0 then
        y := -10
        nx := baz(x, y)
      else
        nx := -x 
      nx + y

    baz (x, y) ==
      x * y

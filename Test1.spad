)abbrev domain TEST1 Test1
Test1() : Exports == Implementation where
  NNI ==> NonNegativeInteger
  PI ==> PositiveInteger
  I ==> Integer
  F ==> Float
  S ==> String

  Exports ==> with
    foo : I -> I
    foo : F -> F
    bar : (I, I) -> I
    fib : NNI -> NNI

  Implementation ==> add
    import F
    import PI
    import NNI
    import I

    foo (a : I) ==
      a2 := a * a
      ma := - a
      r :=
        if a >= 0
          then ma * 2
          else a2 + 2
      r + 3

    -- [BUG] Type checker should remember that {foo : I -> I} has been already
    -- defined.
    -- foo a == a + 1
    foo (a : F) == a + 1.0

    baz : (I, I) -> I

    bar (x, y) ==
      if x > 0 then
        y := -10
        nx := baz(x, y)
      else
        nx := -x 
      nx + y

    -- a global value :)
    magic := 2

    baz (x, y) ==
      bar := x * y   -- bar already defined earlier as a function
      bar - magic

    fib n ==
      n = 0 => 0
      n = 1 => 1
      fib((n - 1) :: NNI) + fib((n - 2) :: NNI)

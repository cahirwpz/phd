)abbrev package STCLEAN SpadTreeCleanUp
SpadTreeCleanUp() : SpadTreeWalkerCategory == Implementation where
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  TD ==> SpadTypeDecl(N)
  FN ==> SpadFunction(N)

  Implementation ==> add
    rewrite (a : APP) : N ==
      fn := rewrite a.function
      args := [rewrite arg for arg in a.args]
      fn = ['exit] =>
        -- replace "exit(1, node)" with "node"
        args.1 = [1] => args.2
        -- otherwise it's return statement
        nodeApp(['return], args)
      nodeApp(fn, args)
    rewrite (a : ASS) : N ==
      -- replace "a : T := b" with "a : T; a := b"
      lv := rewrite a.lval
      rv := rewrite a.rval
      typeDecl? lv =>
        td : TD := coerce(lv)
        nodeSeq("Sequence", [lv, nodeAssign(td.expr, rv)])
      nodeAssign(lv, rv)

)abbrev package SMEXP SpadMacroExpander
SpadMacroExpander() : Exports == Implementation where
  N ==> SpadNode
  M ==> SpadMacro(N)
  AL ==> Table(Symbol, M)
  PF ==> PrintableForm

  Exports ==> SpadTreeWalkerCategory with 
    init : () -> Void

  Implementation ==> add
    import Logger('Macro)

    env : Stack AL := stack [table()]
    lastCtx : AL := table()

    newCtx : () -> Void
    newCtx () == push!(table(), env)

    addCtx : AL -> Void
    addCtx ctx == push!(ctx, env)

    discardCtx : () -> AL
    discardCtx () == pop! env

    addMacro : M -> Void
    addMacro m ==
      ctx := top env
      ctx(m.name) := m

    findMacro : Symbol -> Union(M, "failed")
    findMacro name ==
      for ctx in parts env repeat
        if key?(name, ctx) then
          return ctx(name)
      "failed"

    init () ==
      env := stack [table()]
      lastCtx := table()

    rewrite (seq : SpadSequence(N)) : N ==
      seq.kind = "Sequence" or seq.kind = "Capsule" =>
        newCtx()
        nodes := [rewrite ex for ex in seq.list]
        lastCtx := discardCtx()

        -- eliminate leftovers after consumed macros
        nodes := [node for node in nodes | not emptyNode? node]
        empty? nodes => emptyNode()
        nodeSeq(seq.kind, nodes)

      nodeSeq(seq.kind, [rewrite ex for ex in seq.list])

    rewrite (app : SpadApply(N)) : N ==
      if symbol? app.function then
        m := findMacro (app.function :: Symbol)
        m case M and #m.args > 0 =>
          #app.args ~= #m.args =>
            fail (["Wrong number of arguments" :: PF, number(#app.args) :: PF,
                   "passed to macro" :: PF, string (m.name :: PF),
                   number(#m.args) :: PF])
            error ""
          newCtx()
          for m_arg in m.args for arg in app.args repeat
            -- skip argument rewriting if it doesn't require renaming
            if not(symbol? arg and (arg :: Symbol) = m_arg) then
              addMacro(nodeMacro(m_arg, [], arg) :: M)
          app' := rewrite m.body
          discardCtx()
          return app'
      nodeApp(rewrite app.function, [rewrite arg for arg in app.args])

    rewrite (m : SpadMacro(N)) : N ==
      addMacro m
      emptyNode()

    rewrite (w : SpadWhere(N)) : N ==
      wenv := rewrite w.env
      -- because w.env is always (?) a sequence it produces a valid lastCtx environment
      addCtx lastCtx
      wbody := rewrite w.body
      discardCtx()
      -- reduce where statement if environment contained only macros
      emptyNode? wenv => wbody
      nodeWhere(wbody, wenv)

    rewrite (sym : Symbol) : N ==
      m := findMacro sym
      m case "failed" => [sym]
      #m.args ~= 0 =>
        fail (["Attempted to apply arguments to parameterless macro:" :: PF,
               string(m.name :: PF)])
        error ""
      rewrite m.body

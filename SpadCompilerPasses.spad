)abbrev package STCLEAN SpadTreeCleanUp
SpadTreeCleanUp() : SNR == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    walk (a : APP) : N ==
      fn := walk a.function
      args := map(walk, a.args)
      fn = ['exit] =>
        -- replace "exit(1, node)" with "node"
        args.1 = [1] => args.2
        -- otherwise it's return statement
        nodeApp(['return], args)
      nodeApp(fn, args)

    walk (a : ASS) : N ==
      -- replace "a : T := b" with "a : T; a := b"
      lv := walk a.lval
      rv := walk a.rval
      typeDecl? lv =>
        td : TD := coerce(lv)
        nodeSeq("Sequence", [lv, nodeAssign(td.expr, rv)])
      nodeAssign(lv, rv)

    walk (to : TO) ==
      to := [walk to.expr, walk to.type]$TO
      -- replace "fn(a, b, ...) $ T" with "(fn $ T)(a, b, ...)"
      apply? to.expr =>
        a : APP := coerce to.expr
        nodeApp(nodeTypeOrigin(a.function, to.type), a.args)
      nodeTypeOrigin(to.expr, to.type)

    walk (ts : TS) ==
      ts := [walk ts.expr, walk ts.type]$TS
      -- replace "fn(a, b, ...) @ T" with "(fn @ T)(a, b, ...)"
      apply? ts.expr =>
        a : APP := coerce ts.expr
        nodeApp(nodeTypeSelect(a.function, ts.type), a.args)
      nodeTypeOrigin(ts.expr, ts.type)

)abbrev package SMEXP SpadMacroExpander
SpadMacroExpander() : Exports == Implementation where
)include SpadTypeDefs.inc

  AL ==> Table(Symbol, SM)

  Exports ==> SNR with 
    init : () -> Void

  Implementation ==> add
    import Logger('Macro)

    env : Stack AL := stack [table()]
    lastCtx : AL := table()

    newCtx : () -> Void
    newCtx () == push!(table(), env)

    addCtx : AL -> Void
    addCtx ctx == push!(ctx, env)

    discardCtx : () -> AL
    discardCtx () == pop! env

    addMacro : SM -> Void
    addMacro m ==
      ctx := top env
      ctx(m.name) := m

    findMacro : Symbol -> Union(SM, "failed")
    findMacro name ==
      for ctx in parts env repeat
        if key?(name, ctx) then
          return ctx(name)
      "failed"

    init () ==
      env := stack [table()]
      lastCtx := table()

    walk (seq : SEQ) : N ==
      nodes := map(walk, seq.list)

      if seq.kind = "Sequence" or seq.kind = "Capsule" then
        newCtx()
        lastCtx := discardCtx()

        -- eliminate leftovers after consumed macros
        nodes := remove(emptyNode?, nodes)
        empty? nodes => return emptyNode()

      nodeSeq(seq.kind, nodes)

    walk (app : APP) : N ==
      if symbol? app.function then
        m := findMacro (app.function :: Symbol)
        m case SM and #m.args > 0 =>
          #app.args ~= #m.args =>
            fail (["Wrong number of arguments" :: PF, number(#app.args) :: PF,
                   "passed to macro" :: PF, string (m.name :: PF),
                   number(#m.args) :: PF])
            error ""
          newCtx()
          for m_arg in m.args for arg in app.args repeat
            -- skip argument rewriting if it doesn't require renaming
            if not(symbol? arg and (arg :: Symbol) = m_arg) then
              addMacro(nodeMacro(m_arg, [], arg) :: SM)
          app' := walk m.body
          discardCtx()
          return app'
      nodeApp(walk app.function, map(walk, app.args))

    walk (m : SM) : N ==
      addMacro m
      emptyNode()

    walk (w : SW) : N ==
      wenv := walk w.env
      -- because w.env is always (?) a sequence it produces a valid lastCtx environment
      addCtx lastCtx
      wbody := walk w.body
      discardCtx()
      -- reduce where statement if environment contained only macros
      emptyNode? wenv => wbody
      nodeWhere(wbody, wenv)

    walk (sym : Symbol) : N ==
      m := findMacro sym
      m case "failed" => [sym]
      #m.args ~= 0 =>
        fail (["Attempted to apply arguments to parameterless macro:" :: PF,
               string(m.name :: PF)])
        error ""
      walk m.body

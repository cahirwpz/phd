)abbrev package FLATDBT FlattenDatabaseType
FlattenDatabaseType() : SNR == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory

    walk (app : APP) : N ==
      app.function = ['ATTRIBUTE] => walk(first app.args)
      nodeApp(walk app.function, map(walk, app.args))

    addTypeGuard(n : N, cond : N) : N ==
      typeGuard? n =>
        tg : TG := coerce(n)
        nodeTypeGuard(tg.expr, nodeApp(['and], [cond, tg.type]))
      nodeTypeGuard(n, cond)

    listOf(n : N) : List(N) ==
      null? n => []
      aggregate? n =>
        s : AGG := coerce(n)
        s.list
      [n]

    walk (cn : CE) : N ==
      c := walk cn.cond
      nc := nodeApp(['not], [c])

      tl := [addTypeGuard(n, c) for n in listOf(walk cn.truebr)]
      fl := [addTypeGuard(n, nc) for n in listOf(walk cn.falsebr)]

      nodeList concat(tl, fl)

    walk (s : AGG) : N ==
      l : List(N) := []
      for n in s.list repeat
        n := walk n
        null? n => "iterate"
        aggregate? n =>
          s : AGG := coerce(n)
          l := concat(l, s.list)
        l := concat!(l, n)
      #l = 1 and s.kind = "List" => first l
      nodeAgg(s.kind, l)

)abbrev domain STDB SpadTypeDatabase
SpadTypeDatabase() : Exports == Implementation where
)include SpadTypeDefs.inc

  CACHE ==> HashTable(Symbol, MT, "UEQUAL")

  Exports ==> CoercibleTo(PF) with
    typeCacheInit : () -> Void
    typeCacheList : () -> List(Symbol)
    invalidateType : Symbol -> Void

    inDatabase? : Symbol -> Boolean

    fetchType : Symbol -> MT
    makeType : FT -> MT

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory
    import SpadNodeTools
    import SpadTypeUnifier
    import DaaseDatabase
    import DaaseCtorModeMap
    import Logger('TypeDB)
    import Printer

    cache : CACHE := [[]]

    mkvar(s1 : String, s2 : String) : Symbol ==
      concat(s1, s2)$String :: Symbol

    typeCacheInit () ==
      cache := [[]]

    typeCacheList() == keys cache

    invalidateType(name : Symbol) ==
      eq? (r : Record(key : Symbol, entry : MT)) : Boolean == r.key = name
      remove!(eq?, cache)

    fromDatabase (t : Symbol) : Union(MT, "failed") ==
      debug ["fromDatabase:" :: PF, bold(t :: PF)]

      cmm! := safeGetCtorModeMap t
      cmm! case "failed" => "failed"
      cmm := cmm! :: DaaseCtorModeMap

      cat? := (cmm.type = nodeApp(['Category], []))

      -- Some symbols will be rewritten to type variables.
      ctx := [[]]$Table(Symbol, N)
      -- "%" => "%0"
      ctx("%" :: Symbol) := typeVar()
      -- "#1" => "%1", "#2" => "%2", ...
      for i in 1..#cmm.args repeat
        s := mkvar("#", string i)
        v := typeVar(i :: PI)
        ctx(s) := v
      -- "t#1" => "%1", "t#2" => "%2", ...
      for arg in cmm.args for i in 1.. repeat
        s := mkvar("t", string(arg.expr :: Symbol))
        v := typeVar(i :: PI)
        ctx(s) := v

      types := [substitute(arg.type, ctx) for arg in cmm.args] 
      args := [nodeTypeDecl(typeVar(i :: PI), typ)
               for typ in types for i in 1..]

      body := (cat? => getCtorCategory t; cmm.type)
      body := nodeAgg((cat? => "Join"; "Domain"),
                      (aggregate? body => (body :: AGG).list; [body]))
      body := substitute(body, ctx)
      body := walk(body)$FlattenDatabaseType

      [args, nodeTypeInfo(body :: AGG, [], [], getSuperDomain t)]$MT

    fromFunctor (ft : FT) : Union(MT, "failed") ==
      debug ["fromFunctor:" :: PF, bold(ft :: PF)]

      -- Some symbols will be rewritten to type variables.
      ctx := [[]]$Table(Symbol, N)
      for arg in ft.args for i in 1.. repeat
        s := (arg :: TD).expr :: Symbol
        v := typeVar(i :: PI)
        ctx(s) := v

      types := [substitute(arg.type, ctx) for arg in ft.args] 
      args := [nodeTypeDecl(typeVar(i :: PI), t) for t in types for i in 1..]

      body := 
        ft.type = categoryType() => ft.extends
        nodeDomain (ft.type :: AGG).list
      body := substitute(body, ctx)
      body := walk(body)$FlattenDatabaseType

      [args, nodeTypeInfo(body :: AGG, [], [], null)]$MT

    fetchType(name : Symbol) : MT ==
      t? := search(name, cache)
      t? case MT => t? :: MT
      cache(name) := fromDatabase(name) :: MT

    makeType(ft : FT) : MT ==
      t := fromFunctor(ft) :: MT
      cache(ft.name) := t

    inDatabase?(name : Symbol) : Boolean ==
      inDatabase?(name) $ DaaseDatabase

)abbrev package STDBT SpadTypeDatabaseTest
SpadTypeDatabaseTest() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> with
    test1 : () -> Void
    test2 : () -> Void

  Implementation ==> add
    import Printer
    import SpadNodeFactory
    import SpadTypeDatabase
    import MainLogger

    initTest : () -> Void
    initTest ==
      loggerDefaultLevel "info"
      loggerLevel('Parser, "notice")
      resetTime()
      typeCacheInit()

    dumpTypeCache : () -> Void
    dumpTypeCache ==
      println([bold("Types in cache:" :: PF),
               bracket [app :: PF for app in typeCacheList()]])

    test1 ==
      initTest()

      symbols : List(Symbol) := 
        (['unitsKnown, 'SetCategory, 'DictionaryOperations,
          'UnivariatePuiseuxSeries, 'Integer, 'List, 'Fraction,
          'Expression, 'TwoDimensionalArrayCategory])

      -- simple DAASE lookup
      for s in symbols repeat
        println(pile [bold blue(s :: PF), fetchType(s) :: PF])

      dumpTypeCache()

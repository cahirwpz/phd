)abbrev domain SPMM SpadModeMap
SpadModeMap() : SetCategory == add
    rep(x) ==> (x pretend SExpression)
    N ==> SpadNode
    OF ==> OutputForm

    import SpadNode
    import OutputForm
    import SExpression

    coerce x ==
      sex : SExpression := rep(x)
      sig := sex.1
      cond := sex.2.1
      tmpl := sex.2.2
      impl := parse car sig
      tl := [parse t for t in destruct cdr sig]
      mt : SpadMappingType(N) :=
        if #tl = 1 then
          [[], tl.1]
        else
          [rest tl, first tl]
      tl2 := [parse t for t in destruct tmpl.3]
      st : SpadMappingType(N) := [rest tl2, first tl2]
      of1 := pile([hconcat [impl :: OF, " implements :"],
                   hconcat [hspace 4, mt :: OF]])
      of2 := pile([hconcat [hspace 2, "when :"],
                   hconcat [hspace 4, (parse cond) :: OF]])
      of3 := pile(["Original signature: ",
                   hconcat [hspace 4, st :: OF],
                   hconcat [hspace 2, "with % = ", (parse tmpl.2) :: OF]])
      symbol? cond and symbol cond = 'T =>
        pile [of1, of3]
      pile [of1, of2, of3]

)abbrev domain SPENV SpadEnvironment
SpadEnvironment() : Exports == Implementation where
  OF ==> OutputForm
  SEX ==> SExpression
  ENV ==> List Record(name : Symbol,
                      properties : List Record(kind : Symbol, value : SEX))
  rep(x) ==> (x pretend %)

  Exports ==> SetCategory with
    new : () -> %
    addDomain : (SEX, %) -> %
    getModemap : (Symbol, %) -> List(SpadModeMap)

    test : () -> Void

  Implementation ==> add
    import SExpression
    import OutputForm

    saveMode : () -> Boolean
    saveMode() ==
      -- how to recover old value of $InteractiveMode?
      _$InteractiveMode := false
      true

    restoreMode : Boolean -> Void
    restoreMode m ==
      _$InteractiveMode := m

    -- create empty environment
    new () == rep(convert [])

    addDomain(dom, env) ==
      m := saveMode()
      res : % := addDomain(dom, env)$Lisp
      restoreMode(m)
      res

    getModemap(op, env) ==
      m := saveMode()
      res : List(SpadModeMap) := get(op, 'modemap, env)$Lisp
      restoreMode(m)
      res

    coerce env ==
      sex := car car (env pretend SEX)
      env : ENV := sex pretend ENV
      entries : List(OF) := []
      for entry in env repeat
        props : List(OF) := []
        for prop in entry.properties repeat
          val :=
            prop.kind = 'modemap =>
              mml := prop.value pretend List(SpadModeMap)
              pile [mm :: OF for mm in mml]
            prop.value :: OF
          of := hconcat [prop.kind :: OF, " => ", val]
          props := [of, :props]
        of := hconcat [string entry.name :: OF, " : ", pile reverse props]
        entries := [of, "", :entries]
      pile reverse entries

    test () ==
      _$forceAdd := true
      _$compErrorMessageStack := convert []

      env := new()
      dom1 : SEX := convert [convert 'Polynomial, convert [convert 'Integer]]
      dom2 : SEX := convert [convert 'Integer]
      env := addDomain(dom1, env)
      env := addDomain(dom2, env)
      modemaps := getModemap('*, env)
      for modemap in modemaps repeat
        print (modemap :: OF)
        print ""
      -- print (env :: OF)

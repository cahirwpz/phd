)abbrev domain SPMM SpadModeMap
SpadModeMap() : Exports == Implementation where
  N ==> SpadNode
  OF ==> OutputForm
  MT ==> SpadMappingType(N)
  SEX ==> SExpression

  Exports ==> SetCategory with
    elt : (%, "origin") -> N
    elt : (%, "type") -> MT
    elt : (%, "constraint") -> N
    elt : (%, "template") -> Record(type : MT, arg : N)

  Implementation ==> add
    Rep := List List SEX

    import SpadNode
    import OutputForm
    import SExpression

    elt(x, "origin") ==
      parse x.1.1

    elt(x, "type") ==
      tl := [parse t for t in rest x.1]
      if #tl = 1 then [[], tl.1] else [rest tl, first tl]

    elt(x, "constraint") ==
      parse x.2.1
      
    elt(x, "template") ==
      tmplpart := destruct x.2.2
      tl := [parse t for t in destruct tmplpart.3]
      tmpl := if #tl = 1 then [[], tl.1] else [rest tl, first tl]
      targ := parse tmplpart.2
      [tmpl, targ]

    coerce x ==
      of1 := pile([hconcat [x.origin :: OF, " implements :"],
                   hconcat [hspace 4, x.type :: OF]])
      of2 := pile([hconcat [hspace 2, "when :"],
                   hconcat [hspace 4, x.constraint :: OF]])
      of3 := "?" :: OF
      --of3 := pile(["Original signature: ",
      --             hconcat [hspace 4, x.template.type :: OF],
      --             hconcat [hspace 2, "with % = ", x.template.arg :: OF]])
      (symbol? x.constraint) and (x.constraint :: Symbol) = 'T =>
        pile [of1, of3]
      pile [of1, of2, of3]

)abbrev domain SPENV SpadEnvironment
SpadEnvironment() : Exports == Implementation where
  N ==> SpadNode
  APP ==> SpadApply(N)
  OF ==> OutputForm
  SEX ==> SExpression
  PROP ==> Record(kind : Symbol, value : SEX)

  Exports ==> SetCategory with
    new : () -> %

    addDomain : (APP, %) -> %
    addModemapsFromCategory : (N, N, %) -> %

    addModemap : (Symbol, APP, List(N), %) -> %
    getModemap : (Symbol, %) -> List(SpadModeMap)

    addMode : (Symbol, N, %) -> %
    getMode : (Symbol, %) -> N

    putValue : (Symbol, N, %) -> %
    getValue : (Symbol, %) -> N

    definedSymbols : % -> List(Symbol)

    test : () -> Void

  Implementation ==> add
    Rep := Stack List Record(name : Symbol, properties : List PROP)

    import SExpression
    import OutputForm
    import SpadNode

    saveMode : () -> Boolean
    saveMode() ==
      m : Boolean := _$InteractiveMode $ Lisp
      SETF(_$InteractiveMode $ Lisp, false) $ Lisp
      m

    restoreMode : Boolean -> Void
    restoreMode m ==
      SETF(_$InteractiveMode $ Lisp, m) $ Lisp

    -- create empty environment
    new() ==
      _$compiler_InteractiveFrame $ Lisp

    addModemapsFromCategory(dom, cat, env) ==
      print hconcat ["EnvAddModemapsFromCategory", paren [dom :: OF, cat :: OF]]
      sdom := convert dom
      scat := convert cat
      m := saveMode()
      -- augModemapsFromCategory(domainName, domainView, functorForm, categoryForm, e)
      res : % := augModemapsFromCategory(sdom, sdom, sdom, scat, env)$Lisp
      restoreMode(m)
      res

    addDomain(dom, env) ==
      print hconcat ["EnvAddDomain", paren [dom :: OF]]
      sdom := convert dom
      m := saveMode()
      res : % := addDomain(sdom, env)$Lisp
      restoreMode(m)
      res

    addModemap(op, dom, args, env) ==
      print hconcat ["EnvAddModeMap", paren [op :: OF, dom :: OF, args :: OF]]
      sdom := convert dom
      sargs := [convert arg for arg in args]
      m := saveMode()
      res : % := addModemap(op, sdom, sargs, 'T, op, env)$Lisp
      restoreMode(m)
      res

    getModemap(op, env) ==
      m := saveMode()
      res : List(SpadModeMap) := get(op, 'modemap, env)$Lisp
      restoreMode(m)
      res

    addMode(name, type, env) ==
      print hconcat ["EnvAddMode", paren [name :: OF, type :: OF]]
      m := saveMode()
      res : % := put(name, 'mode, convert type, env)$Lisp
      restoreMode(m)
      res

    getMode(name, env) ==
      m := saveMode()
      res : SExpression := get(name, 'mode, env)$Lisp
      restoreMode(m)
      parse res

    putValue(name, value, env) ==
      print hconcat ["EnvPutValue", paren [name :: OF, value :: OF]]
      m := saveMode()
      res : % := put(name, 'value, convert value, env)$Lisp
      restoreMode(m)
      res

    getValue(name, env) ==
      m := saveMode()
      res : SExpression := get(name, 'value, env)$Lisp
      restoreMode(m)
      parse res

    definedSymbols(env) ==
      empty? env => []
      removeDuplicates [entry.name for entry in top env]

    coerce env ==
      entries : List(OF) := []
      empty? env => "()"
      for entry in top env repeat
        props : List(OF) := []
        for prop in entry.properties repeat
          val :=
            prop.kind = 'modemap =>
              mml := prop.value pretend List(SpadModeMap)
              pile [mm :: OF for mm in mml]
            prop.kind = 'value =>
              v := parse prop.value
              v :: OF
            prop.kind = 'mode =>
              t := parse prop.value
              t :: OF
            prop.value :: OF
          of := hconcat [prop.kind :: OF, " => ", val]
          props := [of, :props]
        of := hconcat [string entry.name :: OF, " : ", pile reverse props]
        entries := [of, "", :entries]
      pile reverse entries

    test () ==
      _$forceAdd := true
      _$compErrorMessageStack := convert []

      env := new()
      dom1 := [['Polynomial], [['Integer]]] $ APP
      dom2 := [['Integer], []] $ APP
      env := addDomain(dom1, env)
      env := addDomain(dom2, env)
      modemaps := getModemap('*, env)
      for modemap in modemaps repeat
        print (modemap :: OF)
        print ""
      --print (env :: OF)

)abbrev package TEST10 Test10
Test10 : Exports == Implementation where
  Exports ==> with
    blah : String -> Union(String, Integer)
    blah : Integer -> Union(String, Integer)
    blah : NonNegativeInteger -> Integer
    blah : Union(String, Integer) -> Union(String, Integer, Float)
    blah : Record(a : NonNegativeInteger, b : String) -> Record(a : Integer, b : String)

    baz : NonNegativeInteger -> Integer
    foo : PositiveInteger -> Float
    bar : Integer -> Float

    triplet : (Integer, Integer, Integer) -> List(Integer)

  Implementation ==> add
    ++ various subtyping cases
    blah (x : String) == x
    blah (x : Integer) == x
    blah (x : NonNegativeInteger) == x

    baz x ==
      y : Integer := x ++ subtyping at assign time
      y - 1

    foo x ==
      bar x ++ subtyping at function application time

    triplet (x, y, z) ==
      [x, y, z] ++ arbitrary list construction, not a call to construct(...) !

    ++ these are not supported by original compiler
    --blah (x : Union(String, Integer)) == x
    --blah (x : Record(a : NonNegativeInteger, b : String)) == x

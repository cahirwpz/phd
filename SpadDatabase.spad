)abbrev domain SPCMM SpadCtorModeMap
SpadCtorModeMap() : Exports == Implementation where
  N ==> SpadNode
  TD ==> SpadTypeDecl(N)
  PF ==> PrintableForm
  SEX ==> SExpression

  Exports ==> Join(CoercibleTo(N), CoercibleTo(PF)) with
    convert : SEX -> %

    elt : (%, "name") -> Symbol
    elt : (%, "type") -> N
    elt : (%, "args") -> List(TD)

  Implementation ==> add
    Rep := Record(ctor : List(SEX), unused : SEX)

    import SpadNode
    import Printer

    convert x ==
      x pretend %

    elt (x, "name") ==
      symbol car x.ctor.1 
    elt (x, "type") ==
      parse x.ctor.2
    elt (x, "args") ==
      ts := [parse t for t in rest(x.ctor, 2)]
      as := [[symbol a] for a in destruct cdr x.ctor.1]
      [[a, t]$TD for a in as for t in ts]

    coerce x ==
      ftor := bold hconcat [x.name :: PF, paren [arg :: PF for arg in x.args]]
      pile [spaces [ftor, ":" :: PF], x.type :: PF]

)abbrev domain SPOP SpadOperation
SpadOperation() : Exports == Implementation where
  N ==> SpadNode
  PF ==> PrintableForm
  MT ==> SpadMappingType(N)
  TD ==> SpadTypeDecl(N)
  SEX ==> SExpression

  Exports ==> CoercibleTo(PF) with
    convert : SEX -> %

    elt : (%, "name") -> Symbol
    elt : (%, "type") -> MT
    elt : (%, "signature") -> TD
    elt : (%, "condition") -> N

    coerce : % -> N

  Implementation ==> add
    import SpadNode
    import Printer

    Rep := Record(op_name : Symbol, op_info : List(List(SEX)))

    convert x == x pretend %

    elt (x, "name") ==
      x.op_name

    elt (x, "type") ==
      sig := x.op_info.1
      tl := [parse t for t in destruct sig.1]
      if #sig >= 4 and symbol sig.4 = 'CONST then
        tl := concat(tl, ['constant])
      [rest tl, first tl]$MT

    elt (x, "signature") ==
      [[x.name], [x.type]]$TD

    elt (x, "condition") ==
      sig := x.op_info.1
      #sig < 3 or (symbol? sig.3 and symbol sig.3 = 'T) => emptyNode()
      parse sig.3

    coerce (x : %) : N ==
      c := x.condition
      t := nodeTypeDecl([x.name], [x.type])
      emptyNode? c => t
      nodeCondExpr(c, t, emptyNode())

    coerce (x : %) : PF ==
      cond := x.condition
      emptyNode? cond => x.signature :: PF 
      pile [x.signature :: PF, spaces [bold("when" :: PF), cond :: PF]]

)abbrev domain SPDB SpadDatabase
SpadDatabase() : with
    getOperationList : Symbol -> List SpadOperation
    getCtorArgs : Symbol -> List Symbol
      ++ returns constructor argument names
    getCtorArgsKind : Symbol -> List Boolean
      ++ returns constructor argument kind: true when a type, false when a value
    getCtorCategory : Symbol -> SpadNode
    getCtorKind : Symbol -> Union("domain", "category", "package")
      ++ returns constructor kind
    inDatabase? : Symbol -> Boolean
    getCtorModeMap : Symbol -> SpadCtorModeMap
    safeGetCtorModeMap : Symbol -> Union(SpadCtorModeMap, "failed")
    getAbbrev : Symbol -> Symbol
    getSourceFile : Symbol -> String
    getSuperDomain : Symbol -> SpadNode
    isSubDomain? : (Symbol, Symbol) -> Boolean
  == add
    import SExpression
    import SpadNode
    import Logger('Daase)

    getOperationList t ==
      -- Integer
      sex : SExpression := GETDATABASE(t, 'OPERATIONALIST)$Lisp
      null? sex => error "Unknown constructor!"
      opList := sex pretend List(SExpression)
      [convert op for op in reverse opList |
       not(list? op and symbol? op.1 and (symbol op.1) = '_$unique)]

    getCtorArgsKind t ==
      sex : SExpression := GETDATABASE(t,'COSIG)$Lisp
      null? sex => error "Unknown constructor!"
      (cdr sex) pretend List(Boolean)

    getCtorCategory t ==
      sex : SExpression := GETDATABASE(t, 'CONSTRUCTORCATEGORY)$Lisp
      null? sex => error "Unknown constructor!"
      parse(sex)

    inDatabase? t ==
      sex : SExpression := GETDATABASE(t, 'CONSTRUCTORMODEMAP)$Lisp
      not null? sex

    safeGetCtorModeMap t ==
      sex : SExpression := GETDATABASE(t, 'CONSTRUCTORMODEMAP)$Lisp
      null? sex => "failed"
      convert(sex)

    getCtorModeMap t ==
      cmm := safeGetCtorModeMap t
      cmm case "failed" =>
        fail ["Unknown constructor:" :: PrintableForm, bold(t :: PrintableForm)]
        error ""
      cmm

    getCtorArgs t ==
      sex : SExpression := GETDATABASE(t, 'CONSTRUCTORARGS)$Lisp
      sex pretend List(Symbol)

    getCtorKind t ==
      sex : SExpression := GETDATABASE(t, 'CONSTRUCTORKIND)$Lisp
      null? sex => error "Unknown constructor!"
      kind := symbol sex
      kind = 'domain => "domain"
      kind = 'category => "category"
      kind = 'package => "package"
      error "Unknown constructor kind!"

    getAbbrev t ==
      sex : SExpression := GETDATABASE(t, 'ABBREVIATION)$Lisp
      null? sex => error "Unknown constructor!"
      sex pretend Symbol

    getSourceFile t ==
      sex : SExpression := GETDATABASE(t, 'SOURCEFILE)$Lisp
      null? sex => error "Unknown constructor!"
      sex pretend String

    getSuperDomain t == 
      sex : SExpression := GETDATABASE(t, 'SUPERDOMAIN)$Lisp
      null? sex => emptyNode()
      parse car sex

    APP ==> SpadApply(SpadNode)

    isSubDomain?(s, t) ==
      s = t => true
      type := getSuperDomain(s)
      while not emptyNode? type repeat
        s := (type :: APP).function :: Symbol
        s = t => return true
        type := getSuperDomain(s)
      false

)abbrev domain SPDBT SpadDatabaseTest
SpadDatabaseTest() : Exports == Implementation where
  PF ==> PrintableForm

  Exports ==> with
    test1 : () -> Void
    test2 : () -> Void
    test3 : () -> Void
    test4 : () -> Void

  Implementation ==> add
    import Printer
    import SpadDatabase

    test1 () ==
      printOps (s : Symbol) : Void ==
        println pile([bold hconcat[s :: PF, ":" :: PF],
                      :[op :: PF for op in getOperationList(s)]])

      printOps 'AbelianMonoid
      printOps 'List
      printOps 'BasicType

    test2 () ==
      println (getCtorModeMap('AbelianSemiGroup) :: PF)
      println (getCtorModeMap('AbelianSemiGroup_&) :: PF)
      println (getCtorModeMap('BasicType) :: PF)
      println (getCtorModeMap('BasicType_&) :: PF)
      println (getCtorModeMap('List) :: PF)
      println (getCtorModeMap('PositiveInteger) :: PF)

    test3() ==
      -- TwoDimensionalArrayCategory(#1 : Type(),
      --                             #2 : FiniteLinearAggregate(t#1),
      --                             #3 : FiniteLinearAggregate(t#1))
      println (getCtorModeMap('TwoDimensionalArrayCategory) :: PF)

    test4() ==
      println (isSubDomain?('Integer, 'Integer) :: PF)
      println (isSubDomain?('NonNegativeInteger, 'Integer) :: PF)
      println (isSubDomain?('PositiveInteger, 'NonNegativeInteger) :: PF)
      println (isSubDomain?('PositiveInteger, 'Integer) :: PF)



)abbrev package FLATDBT FlattenDatabaseType
FlattenDatabaseType() : SNR == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory

    walk (app : APP) : N ==
      app.function = ['ATTRIBUTE] => walk(first app.args)
      nodeApp(walk app.function, map(walk, app.args))

    addTypeGuard(n : N, cond : N) : N ==
      typeGuard? n =>
        tg : TG := coerce(n)
        nodeTypeGuard(tg.expr, nodeApp(['and], [cond, tg.type]))
      nodeTypeGuard(n, cond)

    listOf(n : N) : List(N) ==
      emptyNode? n => []
      sequence? n =>
        s : SEQ := coerce(n)
        s.list
      [n]

    walk (cn : CE) : N ==
      c := walk cn.cond
      nc := nodeApp(['not], [c])

      tl := [addTypeGuard(n, c) for n in listOf(walk cn.truebr)]
      fl := [addTypeGuard(n, nc) for n in listOf(walk cn.falsebr)]

      nodeSeq("Body", concat(tl, fl))

    walk (seq : SEQ) : N ==
      l : List(N) := []
      for n in seq.list repeat
        n := walk n
        emptyNode? n => "iterate"
        sequence? n =>
          s : SEQ := coerce(n)
          l := concat(l, s.list)
        l := concat!(l, n)
      #l = 1 and seq.kind = "Body" => first l
      nodeSeq(seq.kind, l)

)abbrev domain STEVAL SpadTypeEvaluator
SpadTypeEvaluator() : Exports == Implementation where
)include SpadTypeDefs.inc

  CACHE ==> Table(APP, TI)
  DAASE ==> Table(Symbol, TI)

  Exports ==> CoercibleTo(PF) with
    typeInfoCacheInit : () -> Void
    typeInfoCacheList : () -> List(APP)

    invalidateTypeInfo : Symbol -> Void

    getTypeInfo : Symbol -> TI
    getTypeInfo : APP -> TI
    getTypeInfo : FT -> TI

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory
    import SpadNodeTools
    import SpadDatabase
    import SpadCtorModeMap
    import Logger('TypeInfo)
    import SpadTypeUnifier
    import Printer

    fromDatabase : Symbol -> Union(TI, "failed")
    fromFunctor : FT -> Union(TI, "failed")
    apply : (TI, List(N)) -> TI
    flatten : TI -> TI
    evalTypeGuards : TI -> TI
    eraseConstraints : (TI, Boolean) -> TI

    cache : CACHE := [[]]
    daase : DAASE := [[]]

    typeInfoCacheInit () ==
      cache := [[]]
      daase := [[]]

    typeInfoCacheList() == keys(cache)

    invalidateTypeInfo(sym : Symbol) ==
      -- TODO: track dependencies and remove them as well
      sameName (r : Record(key : APP, entry : TI)) : Boolean ==
        r.key.function = [sym]
      cache := remove(sameName, cache)

    getTypeInfo(sym : Symbol) : TI ==
      ti? := search(sym, daase)
      ti? case TI => ti? :: TI
      daase(sym) := fromDatabase(sym) :: TI

    getTypeInfo(app : APP) : TI ==
      ti? := search(app, cache)
      ti? case TI => ti? :: TI

      info ["getTypeInfo :" :: PF, bold(app :: PF)]

      validate? := true
      ti! := 
        if app.args = [emptyNode()] then
          validate? := false
          ti := getTypeInfo(app.function :: Symbol)
          flatten(ti)
        else
          ti := getTypeInfo([app.function, [emptyNode()]])
          apply(ti, app.args)

      ti! := evalTypeGuards(ti!)

      empty? freeVars [app] =>
        cache(app) := ti!
        ti! := eraseConstraints(ti!, validate?)
        debug ["addTypeInfo :" :: PF, bold(app :: PF)]
        cache(app) := ti!

      ti!

    getTypeInfo(ft : FT) : TI ==
      ti := fromFunctor(ft) :: TI
      ti := flatten(ti)
      ti := evalTypeGuards(ti)
      ti := eraseConstraints(ti, false)
      cache([[ft.name], [emptyNode()]]) := ti
      ti

    mkvar(s1 : String, s2 : String) : Symbol ==
      concat(s1, s2)$String :: Symbol

    fromDatabase (t : Symbol) : Union(TI, "failed") ==
      debug ["fromDatabase :" :: PF, bold(t :: PF)]

      cmm! := safeGetCtorModeMap(t)
      cmm! case "failed" => "failed"
      cmm := cmm! :: SpadCtorModeMap

      cat? := (cmm.type = nodeApp(['Category], []))

      -- Some symbols will be rewritten to type variables.
      ctx := [[]]$Table(Symbol, N)
      -- "%" => "%0"
      ctx("%" :: Symbol) := typeVar()
      -- "#1" => "%1", "#2" => "%2", ...
      for i in 1..#cmm.args repeat
        s := mkvar("#", string i)
        v := typeVar(i :: PI)
        ctx(s) := v
      -- "t#1" => "%1", "t#2" => "%2", ...
      for arg in cmm.args for i in 1.. repeat
        s := mkvar("t", string(arg.expr :: Symbol))
        v := typeVar(i :: PI)
        ctx(s) := v

      types := [substitute(arg.type, ctx) for arg in cmm.args] 
      args := [[typeVar(i :: PI), typ]$TD for typ in types for i in 1..]
      body := (cat? => getCtorCategory(t); cmm.type)

      body := nodeSeq((cat? => "Join"; "Domain"),
                      (sequence? body => (body :: SEQ).list; [body]))
      body := substitute(body, ctx)
      body := walk(body)$FlattenDatabaseType

      [cmm.name, args, [], [], getSuperDomain(t), body :: SEQ]

    fromFunctor (ft : FT) : Union(TI, "failed") ==
      debug ["fromFunctor:" :: PF, bold(ft :: PF)]

      -- Some symbols will be rewritten to type variables.
      ctx := [[]]$Table(Symbol, N)
      for arg in ft.args for i in 1.. repeat
        s := (arg :: TD).expr :: Symbol
        v := typeVar(i :: PI)
        ctx(s) := v

      types := [substitute(arg.type, ctx) for arg in ft.args] 
      args := [[typeVar(i :: PI), t]$TD for t in types for i in 1..]

      body := 
        ft.type = categoryType() => ft.extends
        nodeSeq("Domain", (ft.type :: SEQ).list)
      body := substitute(body, ctx)
      body := walk(body)$FlattenDatabaseType

      [ft.name, args, [], [], getSuperDomain(ft.name), body :: SEQ]

    -- DelVer := SpadNodeTypeVarSetMajor(0)
    -- AddVer := SpadNodeTypeVarSetMajor(1)

    apply(ti : TI, values : List(N)) : TI ==
      before := bold hconcat [ti.name :: PF, paren [arg :: PF for arg in ti.args]]
      after := bold hconcat [ti.name :: PF, paren [val :: PF for val in values]]

      #values ~= #ti.args =>
        info(ti :: PF)
        fail(["Wrong number of arguments:" :: PF, bold paren [val :: PF for val in values],
              "passed to:" :: PF, before, "functor!" :: PF])
        error ""
      empty? values => ti

      -- debug ["Unifies:" :: PF, before, "~" :: PF, after, "?" :: PF]

      n1 := nodeApp([ti.name], [arg.expr for arg in ti.args])
      n2 := nodeApp([ti.name], values)

      res := unifyType(n1, setMajor(n2, 1))
      res case "failed" =>
        fail ("unification failed" :: PF)
        error ""

      -- solution for functor argument application problem
      subst := res :: SUBS

      args' := [substitute([arg], subst) :: TD for arg in ti.args]
      body' := substitute([ti.body], subst)
      hasList' := [substitute(hasItem, subst) for hasItem in ti.hasList]
      constraints' :=
        concat(nodeApp([ti.name], [[arg] for arg in args']),
               [substitute(c, subst) for c in ti.constraints])

      n := nodeTypeInfo(ti.name, args', hasList', constraints',
                        ti.superType, body' :: SEQ)

      setMajor(n, 0) :: TI

    flatten(ti : TI) : TI ==
      info ["Flatten" :: PF, bold(ti.self :: PF)]

      origBody := ti.body.list
      flatBody : List(N) := []
      hasLst : AssociationList(APP, N) := [[]]
      constraints := ti.constraints

      while not empty? origBody repeat
        (n, origBody) := (first origBody, rest origBody)

        cond := ['true]
        if typeGuard? n then 
          tg := n :: TG
          if apply? tg.expr then
            -- encountered a functor with constraints
            (n, cond) := (tg.expr, tg.type)

        -- merge functor
        apply? n =>
          app := n :: APP

          -- check if we have already merged a functor
          key?(app, hasLst) => 
            debug ["Skipping:" :: PF, bold(app :: PF), "with" :: PF, bold(hasLst(app) :: PF)]
            -- if true then erase previously remembered constraints
            true? cond =>
              hasLst(app) := cond
            -- if remembered constraints are true then ignore new constraints
            true? hasLst(app) => "iterate"
            hasLstVal := hasLst(app)
            -- BUG: hasLstVal may be a complex logic expression, checks below
            --      assume it's a flat list of statements
            condLst : List(N) :=
              apply? hasLstVal =>
                (hasLstVal :: APP).args
              [hasLstVal]
            member?(cond, condLst) => "iterate"
            hasLst(app) := nodeApp(['or], concat(cond, condLst))

          debug(["Merge" :: PF, bold(true? cond => n :: PF; nodeTypeGuard(n, cond) :: PF),
                 "with" :: PF, ti.self :: PF])

          hasLst(app) := cond
          ti' := getTypeInfo(app.function :: Symbol) :: TI
          ti' := apply(ti', app.args)
          -- TODO: does it make sense?
          constraints := concat(ti'.constraints, constraints)
          -- warn [f :: PF for f in constraints]

          -- extend original functor's body with included constructor type
          snippet : List(N) := []

          -- TODO: merge both branches
          if true? cond then
            -- case 1: merged functor has no constraints
            for e in ti'.body.list repeat
              e' :=
                cond' := ['true]
                if typeGuard? e then
                  tg := e :: TG
                  (e, cond') := (tg.expr, tg.type)
                apply? e => -- add constraint to merged functor
                  true? cond' => e
                  nodeTypeGuard(e, cond')
                typeDecl? e => -- add origin to function signature
                  e := nodeTypeOrigin(e, n)
                  true? cond' => e
                  nodeTypeGuard(e, cond')
                error "Not handled!"
              snippet := [e', :snippet]
          else
            -- case 2: merged functor has some constraints

            -- INFO: When we merge functor A with %, we know that all what is
            -- within A belongs to % only when "% has A". Hence for each
            -- component of A we remember simple constraint "% has A".
            -- More complex constraints are remembered in hasList.
            --
            -- This allows to add extra options to condition "% has A" in case
            -- we encounter some other (less restrictive) constraints later.

            for e in ti'.body.list repeat
              e' :=
                cond' := nodeTypeHas(typeVar(), [app])
                if typeGuard? e then
                  tg := e :: TG
                  -- add extra constraint to merged functor
                  (e, cond') := (tg.expr, nodeApp(['and], [cond', tg.type]))
                apply? e => -- add constraint to merged functor
                  nodeTypeGuard(e, cond')
                typeDecl? e => -- add origin to function signature
                  e := nodeTypeOrigin(e, n)
                  nodeTypeGuard(e, cond')
                error "Not handled!"
              snippet := [e', :snippet]

          origBody := concat(reverse snippet, origBody)

        -- merge everything else
        typeDecl? n or typeGuard? n or typeOrigin? n =>
          debug ["Copy" :: PF, bold(n :: PF), "to" :: PF, ti.self :: PF]
          flatBody := [n, :flatBody]

        sequence? n =>
          origBody := concat((n :: SEQ).list, origBody)

        fail ["Flatten" :: PF, bold(n :: PF)]
        error "Not handled!"

      hasLst' : List(N) := []
      for he in entries hasLst repeat
        h := 
          true? he.entry => [he.key]
          nodeTypeGuard([he.key], he.entry)
        hasLst' := [h, :hasLst']

      [ti.name, ti.args, hasLst', removeDuplicates constraints,
       ti.superType, [ti.body.kind, reverse flatBody]]

    has?(t0 : N, t1 : N, ti : TI) : Boolean ==
      -- debug [t0 :: PF, "has" :: PF, t1 :: PF, "?" :: PF]

      t1 = nodeApp(['Type], []) => true

      if symbol? t0 then t0 := symbolType()
      if integer? t0 then t0 := integerType()
      if t0 = ti.type then t0 := typeVar()

      t0 = t1 => true

      ti := 
        apply? t0 =>
          unify?(t0, ti.type) => ti
          getTypeInfo(t0 :: APP)
        t0 = typeVar() => ti
        typeVar? t0 => return false
        fail [t0 :: PF, "has" :: PF, t1 :: PF]
        error "Not handled!"

      -- case "A has B"
      apply? t1 =>
        member?(t1, ti.hasList)

      -- case "A has Join(..)"
      sequence? t1 =>
        seq := t1 :: SEQ
        "and"/[has?(t0, typ, ti) for typ in seq.list]

      -- case "A has { fn : (..) -> .. }"
      typeDecl? t1 and not(unbound? t0 or unbound? t1) =>
        seq := ti.body :: SEQ
        for n in seq.list repeat
          if typeOrigin? n then
            n := (n :: TO).expr
          not typeDecl? n => "iterate"
          n := substitute(n, typeVar() :: TV, t0)
          if n = t1 then
            return true
        false

      fail [t0 :: PF, "has" :: PF, t1 :: PF]
      error "Not handled!"

    evalGuard(n : N, ti : TI) : N ==
      -- debug ["evalGuard" :: PF, bold(n :: PF)]
      typeHas? n =>
        te := n :: TEH
        has?(te.expr, te.type, ti) => ['true]
        n
      apply? n =>
        app := n :: APP
        lst := [evalGuard(arg, ti) for arg in app.args]
        app.function = ['and] =>
          any?(false?, lst) => ['false]
          lst := remove(true?, lst)
          #lst = 0 => ['true]
          #lst = 1 => first lst
          nodeApp(['and], lst)
        app.function = ['or] =>
          any?(true?, lst) => ['true]
          lst := remove(false?, lst)
          #lst = 0 => ['false]
          #lst = 1 => first lst
          nodeApp(['or], lst)
        app.function = ['not] and #app.args = 1 =>
          n' := evalGuard(first app.args, ti)
          true? n' => ['false]
          n
        fail ["evalGuard" :: PF, bold(n :: PF)]
        error "Not handled!"
      n

    eraseConstraints(ti : TI, validate : Boolean) : TI ==
      info ["Check type constraints" :: PF, bold(ti.self :: PF)]

      appliesCleanly(n : N) : Boolean ==
        app := n :: APP
        "and"/[has?((m :: TD).expr, (m :: TD).type, ti) for m in app.args]

      constraints' := remove(appliesCleanly, ti.constraints)

      validate and not empty? constraints' =>
        fmtarg(n : N) : PF ==
          te := n :: TD
          has?(te.expr, te.type, ti) => te.expr :: PF
          bold(red(te.expr :: PF))

        fmterr(n : N) : PF ==
          td := n :: TD
          spaces [bold(td.expr :: PF), "has no" :: PF, bold(td.type :: PF)]

        fail ["Could not construct type" :: PF, bold(ti.type :: PF), ":" :: PF]

        for c in constraints' for i in 1.. repeat
          app := c :: APP
          typ := hconcat [app.function :: PF, paren [fmtarg arg for arg in app.args]]
          err := [fmterr arg for arg in app.args | not has?((arg :: TD).expr, (arg :: TD).type, ti)]
          fail [paren(i :: PF), typ, ":" :: PF, sepBy(", " :: PF, err)]

        error ""

      [ti.name, ti.args, ti.hasList, constraints', ti.superType, ti.body]

    evalTypeGuards(ti : TI) : TI ==
      info ["Evaluate type guards for:" :: PF, bold(ti.self :: PF)]

      continue? := true

      while continue? repeat
        newHasList : List(N) := []
        continue? := false

        for n in ti.hasList repeat
          n' := 
            not typeGuard? n => n
            tg := n :: TG
            type' := evalGuard(tg.type, ti)
            true? type' => (continue? := true; tg.expr)
            nodeTypeGuard(tg.expr, type')
          newHasList := [n', :newHasList]

        ti := [ti.name, ti.args, reverse newHasList, ti.constraints,
               ti.superType, ti.body]

      eval(n : N) : N ==
        not typeGuard? n => n
        tg := n :: TG
        type' := evalGuard(tg.type, ti)
        true? type' => tg.expr
        nodeTypeGuard(tg.expr, type')

      body := map(eval, ti.body.list)

      [ti.name, ti.args, ti.hasList, ti.constraints, ti.superType,
       [ti.body.kind, body]]

)abbrev package TEVALT SpadTypeEvaluatorTest
SpadTypeEvaluatorTest() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> with
    test1 : () -> Void
    test2 : () -> Void
    test3 : () -> Void
    test4 : () -> Void
    test5 : () -> Void
    test6 : () -> Void

    fail1 : () -> Void
    fail2 : () -> Void

  Implementation ==> add
    import Printer
    import SpadNodeFactory
    import SpadTypeEvaluator
    import MainLogger

    initTest : () -> Void
    initTest ==
      loggerDefaultLevel "info"
      loggerLevel('Parser, "notice")
      resetTime()
      typeInfoCacheInit()

    printTypeInfoCache : () -> Void
    printTypeInfoCache ==
      println([bold("Types in cache:" :: PF),
               bracket [app :: PF for app in typeInfoCacheList()]])

    test1 ==
      initTest()

      -- simple DAASE lookup
      println (getTypeInfo('unitsKnown) :: PF)
      println (getTypeInfo('SetCategory) :: PF)
      println (getTypeInfo('DictionaryOperations) :: PF)
      println (getTypeInfo('UnivariatePuiseuxSeries) :: PF)

      println (getTypeInfo('Integer) :: PF)
      println (getTypeInfo('List) :: PF)
      println (getTypeInfo('Fraction) :: PF)
      println (getTypeInfo('Expression) :: PF)
      println (getTypeInfo('TwoDimensionalArrayCategory) :: PF)

      printTypeInfoCache()

    test2 ==
      initTest()

      -- emptyNode() passed as a list of parameters to a functor prevents
      -- constrains evaluation

      -- type flattening, type constrains are left unevaluated
      println (getTypeInfo([['Integer], [emptyNode()]]) :: PF)
      println (getTypeInfo([['List], [emptyNode()]]) :: PF)
      println (getTypeInfo([['Fraction], [emptyNode()]]) :: PF)
      println (getTypeInfo([['Expression], [emptyNode()]]) :: PF)
      println (getTypeInfo([['UnivariateTaylorSeries], [emptyNode()]]) :: PF)
      println (getTypeInfo([['Matrix], [emptyNode()]]) :: PF)

      printTypeInfoCache()

    test3 ==
      initTest()

      -- type flattening, type contrains evaluation
      println (getTypeInfo([['NonNegativeInteger], []]) :: PF)
      println (getTypeInfo([['Integer], []]) :: PF)
      println (getTypeInfo([['Symbol], []]) :: PF)
      println (getTypeInfo([['Float], []]) :: PF)
      println (getTypeInfo([['List], [nodeApp(['Integer], [])]]) :: PF)
      println (getTypeInfo([['Fraction], [nodeApp(['Integer], [])]]) :: PF)
      println (getTypeInfo([['Matrix], [integerType()]]) :: PF)
      println (getTypeInfo([['Expression], [nodeApp(['Integer], [])]]) :: PF)

      printTypeInfoCache()

    test4 ==
      initTest()

      -- check if values as accepted as functor arguments (instead of types)
      println (getTypeInfo([['UnivariateTaylorSeries], [emptyNode()]]) :: PF)
      println (getTypeInfo([['UnivariateTaylorSeries], [integerType(), ['x]$N, [2]$N]]) :: PF)

      printTypeInfoCache()

    test5 ==
      initTest()

      -- TODO: some extremely slow cases to be improved
      println (getTypeInfo([['UnivariateLaurentSeries], [emptyNode()]]) :: PF)
      --println (getTypeInfo([['UnivariatePuiseuxSeries], [emptyNode()]]) :: PF)
      --println (getTypeInfo([['ExponentialExpansion], [emptyNode()]]) :: PF)

      printTypeInfoCache()

    -- Should I consider following case:
    -- undefinedType() "%undef" passed as a parameter to a functor prevents
    -- contraint evaluation that involves the parameter

    test6 ==
      initTest()

      LI := nodeApp(['List], [['Integer]$N])$N

      println (getTypeInfo([['List], [LI]]) :: PF)

    fail1 ==
      initTest()

      -- wrong number of arguments => should fail!
      println (getTypeInfo([['List], []]) :: PF)

    fail2 ==
      initTest()

      -- wrong type parameter => should fail!
      println (getTypeInfo([['List], [nodeApp(['BasicType], [])]]) :: PF)

)abbrev domain TEST2 Test2
Test2(A : Type) : Exports == Implementation where
  I ==> Integer
  NNI ==> NonNegativeInteger

  Exports ==> with
    index : (A -> Boolean, List(A)) -> NonNegativeInteger
    sumPositive : List(I) -> I
    sumRange : (List(I), Integer, Integer) -> Integer
    countPositive : List(I) -> I

  Implementation ==> add
    sumPositive l ==
      s := 0
      for i in reverse l | i > 0 repeat
        s := s + i
        "bogus" :: String
      s

    sumRange (l, i, j) ==
      s := 0
      for k in i..(j - 1) repeat
        s := s + l(k)
        10
      s

    index(pred, l) ==
      i := 1 :: NNI
      while not empty? l repeat
        h := first l
        pred h =>
          return i
        i := i + 1
        l := rest l
        'bogus
      0

    countPositive l ==
      i := 0
      for k in l repeat
        if k > 0 then
          i := i + 1
        1.0
      i

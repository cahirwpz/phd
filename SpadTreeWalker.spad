)abbrev category STWALKC SpadTreeWalkerCategory
SpadTreeWalkerCategory() : Category == Definition where
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  FN ==> SpadFunction(N)
  FT ==> SpadFunctor(N)
  IM ==> SpadImport(N)
  IT ==> SpadIterator(N)
  LAM ==> SpadLambda(N)
  LP ==> SpadLoop(N)
  M ==> SpadMacro(N)
  MR ==> SpadMarker(N)
  MT ==> SpadMappingType(N)
  NT ==> SpadNamedType(N)
  RT ==> SpadRecordType(N)
  SEG ==> SpadSegment(N)
  SEQ ==> SpadSequence(N)
  TE ==> SpadTypeExpr(N)
  UT ==> SpadUnionType(N)
  W ==> SpadWhere(N)

  Definition ==> with
      gensym : () -> Symbol

      rewrite : APP -> N
      rewrite : ASS -> N
      rewrite : CE -> N
      rewrite : FN -> N
      rewrite : FT -> N
      rewrite : IM -> N
      rewrite : IT -> N
      rewrite : LAM -> N
      rewrite : LP -> N
      rewrite : M -> N
      rewrite : MR -> N
      rewrite : MT -> N
      rewrite : NT -> N
      rewrite : RT -> N
      rewrite : SEG -> N
      rewrite : SEQ -> N
      rewrite : String -> N
      rewrite : Symbol -> N
      rewrite : TE -> N
      rewrite : UT -> N
      rewrite : W -> N
      rewrite : N -> N 
    add
      gensym() ==
        GENSYM()$Lisp

      rewrite (a : APP) : N ==
        nodeApp(rewrite a.function, [rewrite arg for arg in a.args])

      rewrite (a : ASS) : N ==
        nodeAssign(rewrite a.lval, rewrite a.rval)

      rewrite (cn : CE) : N ==
        nodeCondExpr(rewrite cn.cond, rewrite cn.truebr, rewrite cn.falsebr)

      rewrite (fn : FN) : N ==
        args' := [rewrite arg for arg in fn.args]
        nodeFun(fn.name, args', rewrite fn.type, rewrite fn.body)

      rewrite (ft : FT) : N ==
        args' := [rewrite(arg) :: NT for arg in ft.args]
        nodeFtor(ft.name, args', rewrite ft.type, rewrite ft.extends, rewrite ft.capsule)

      rewrite (im : IM) : N ==
        nodeImport(rewrite im.type)

      rewrite (it : IT) : N ==
        nodeIterator(it.var, rewrite it.seq)

      rewrite (l : LAM) : N ==
        nargs := [[arg.name, rewrite arg.type]$NT for arg in l.args]
        nodeLambda(nargs, rewrite l.type, rewrite l.body)

      rewrite (lp : LP) : N ==
        -- BUG: parser cannot accept a multi-line list constructor
        nitors := [rewrite itor for itor in lp.itors]
        nguards := [rewrite guard for guard in lp.guards]
        nodeLoop(lp.kind, nitors, nguards, rewrite lp.body)

      rewrite (m : M) : N ==
        nodeMacro(m.name, m.args, rewrite m.body)

      rewrite (mr : MR) : N == [mr]

      rewrite (mt : MT) : N ==
        nodeMappingType([rewrite arg for arg in mt.args], rewrite mt.result)

      rewrite (nt : NT) : N ==
        nodeNamedType(nt.name, rewrite nt.type)

      rewrite (rt : RT) : N ==
        nodeRecordType([[f.name, rewrite f.type] for f in rt.fields])

      rewrite (seg : SEG) : N ==
        nodeSeg(rewrite seg.start, rewrite seg.end, rewrite seg.step)

      rewrite (s : SEQ) : N ==
        nodeSeq(s.kind, [rewrite e for e in s.list])

      rewrite (s : String) : N == [s]

      rewrite (s : Symbol) : N == [s]

      rewrite (te : TE) : N ==
        nodeTypeExpr(te.kind, rewrite te.expr, rewrite te.type)

      rewrite (ut : UT) : N ==
        nodeUnionType([rewrite v for v in ut.variants])

      rewrite (w : W) : N ==
        nodeWhere(rewrite w.body, rewrite w.env)

      rewrite (n : N) : N ==
        apply? n => rewrite (n :: APP)
        assign? n => rewrite (n :: ASS)
        condExpr? n => rewrite (n :: CE)
        function? n => rewrite (n :: FN)
        functor? n => rewrite (n :: FT)
        import? n => rewrite (n :: IM)
        iterator? n => rewrite (n :: IT)
        lambda? n => rewrite (n :: LAM)
        loop? n => rewrite (n :: LP)
        macro? n => rewrite (n :: M)
        mappingType? n => rewrite (n :: MT)
        marker? n => rewrite(n :: MR)
        namedType? n => rewrite (n :: NT)
        recordType? n => rewrite (n :: RT)
        segment? n => rewrite (n :: SEG)
        sequence? n => rewrite (n :: SEQ)
        string? n => rewrite (n :: String)
        symbol? n => rewrite (n :: Symbol)
        typeExpr? n => rewrite (n :: TE)
        unionType? n => rewrite (n :: UT)
        where? n => rewrite (n :: W)
        -- skip integer, float and empty node
        integer? n or float? n or emptyNode? n => n
        error "rewrite: variant not handled"

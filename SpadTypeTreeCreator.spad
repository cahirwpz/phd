)abbrev package STRFAC SpadTypeRuleFactory
SpadTypeRuleFactory() : Exports == Implementation where
  N ==> SpadNode
  FT ==> SpadFunctor(N)
  TR ==> SpadTypeRule
  TN ==> SpadTypeNode
  OTN ==> Union(TN, "none")

  Exports ==> with
    ruleAssign : (TN, TN) -> TR
    ruleApply : (TN, List(TN)) -> TR
    ruleApply : (TN, List(TN), List(TN)) -> TR
    ruleCondExpr : (TN, TN, TN) -> TR
    ruleFtor : (FT, TN) -> TR
    ruleLoopIter : (TN, TN, TN) -> TR
    ruleLoop :
      (Union("loop", "collect", "repeat"), List(TN), List(TN), TN) -> TR
    ruleSeg : (TN, OTN, OTN) -> TR
    ruleSeq :
      (Union("Domain", "Package", "Join", "Capsule", "Sequence", "Tuple", "Body"), TN, List(TN)) -> TR
    ruleTypeOrigin : (TN, N) -> TR
    ruleSubType : (TN, TN) -> TR
    ruleSuperType : (TN, TN) -> TR

  Implementation ==> add
    ruleAssign (left, right) ==
      (leftRef, rightRef) := (nodeRef(left), nodeRef(right))
      [[leftRef, rightRef, nodeAssign(leftRef, rightRef)],
       nodeAssign(leftRef, rightRef)]

    ruleApply (fun, args) ==
      (funRef, argRefs) := (nodeRef(fun), [nodeRef(arg) for arg in args])
      [[funRef, :argRefs, nodeApp(funRef, argRefs)],
       nodeApp(funRef, argRefs)]

    ruleApply (fun, args, extras) ==
      (funRef, argRefs) := (nodeRef(fun), [nodeRef(arg) for arg in args])
      extraRefs := [nodeRef(extra) for extra in extras]
      [[:extraRefs, funRef, :argRefs, nodeApp(funRef, argRefs)],
       nodeApp(funRef, argRefs)]

    ruleCondExpr (cond, truebr, falsebr) ==
      (condRef, trueRef, falseRef) := (nodeRef(cond), nodeRef(truebr), nodeRef(falsebr))
      [[condRef, trueRef, falseRef, nodeCondExpr(condRef, trueRef, falseRef)],
       nodeCondExpr(condRef, trueRef, falseRef)]

    ruleLoopIter (var, seq, iter) == 
      (varRef, seqRef, iterRef) := (nodeRef(var), nodeRef(seq), nodeRef(iter))
      [[varRef, seqRef, nodeSubType(seqRef, iterRef)],
       nodeIterator(var.node :: Symbol, seqRef)]

    ruleLoop (kind, itors, guards, body) ==
      itorRefs := [nodeRef(itor) for itor in itors]
      guardRefs := [nodeRef(guard) for guard in guards]
      bodyRef := nodeRef(body)
      [[:itorRefs, :guardRefs, bodyRef],
       nodeLoop(kind, itorRefs, guardRefs, bodyRef)]

    ruleFtor (ft, body) ==
      extendType := (emptyNode? ft.extends => ['Type]; ft.extends)
      bodyRef := nodeRef(body)
      [[bodyRef], nodeFtor(ft.name, ft.args, ft.type, extendType, bodyRef)]

    ruleSeg (start, end, step) ==
      startRef := nodeRef(start)
      formulas := [startRef]$List(N)
      if end case TN then
        endRef := nodeRef(end)
        concat!(formulas, endRef)
      else
        endRef := emptyNode()
      if step case TN then
        stepRef := nodeRef(step)
        concat!(formulas, stepRef)
      else
        stepRef := emptyNode()
      [formulas, nodeSeg(startRef, endRef, stepRef)]

    ruleSeq (kind, seq, exprs) ==
      (seqRef, exprRefs) := (nodeRef(seq), [nodeRef(expr) for expr in exprs])
      formula := 
        kind case "Capsule" => nodeSeq(kind, exprRefs)
        nodeSubType(last exprRefs, seqRef)
      [[:exprRefs, formula], nodeSeq(kind, exprRefs)]

    ruleTypeOrigin (expr, origin) ==
      exprRef := nodeRef(expr)
      [[exprRef, nodeTypeExpr('_$, exprRef, origin)],
       nodeTypeExpr('_$, exprRef, origin)]

    ruleSubType (subType, type) ==
      (subTypeRef, typeRef) := (nodeRef(subType), nodeRef(type))
      [[subTypeRef, nodeSubType(subTypeRef, typeRef)], subTypeRef]

    ruleSuperType (superType, type) ==
      (superTypeRef, typeRef) := (nodeRef(superType), nodeRef(type))
      [[typeRef, nodeSubType(superTypeRef, typeRef)], nodeRef(type)]

)abbrev package STTCREAT SpadTypeTreeCreator
SpadTypeTreeCreator() : Exports == Implementation where
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  FN ==> SpadFunction(N)
  FT ==> SpadFunctor(N)
  IM ==> SpadImport(N)
  LAM ==> SpadLambda(N)
  IT ==> SpadIterator(N)
  LP ==> SpadLoop(N)
  M ==> SpadMacro(N)
  MT ==> SpadMappingType(N)
  NT ==> SpadNamedType(N)
  RT ==> SpadRecordType(N)
  SEG ==> SpadSegment(N)
  SEQ ==> SpadSequence(N)
  TE ==> SpadTypeExpr(N)
  UT ==> SpadUnionType(N)
  W ==> SpadWhere(N)
  MR ==> SpadMarker(N)

  ENV ==> SpadEnvironment
  TN ==> SpadTypeNode
  TR ==> SpadTypeRule
  CTX ==> SpadTypeNodeArray
  SUBST ==> AssociationList(MR, List(N))
  PF ==> PrintableForm

  Exports ==> with
    walk : (N, CTX, ENV) -> TN

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory
    import SpadDatabase
    import SpadEnvironment
    import SpadTypeInfo
    import SpadTypeRuleFactory
    import SpadTypeNodeArray
    import TypeUnifier
    import Printer
    import Logger('AST)

    envAddType (t : N, env : ENV) : ENV ==
      notice ["Adding type" :: PF, bold(t :: PF), "to the environment." :: PF]
      if apply? t then
        app := t :: APP
        env := addDomain(env, app)
        for k in app.args repeat
          env := envAddType(k, env)
      if mappingType? t then
        mt := t :: MT
        for k in [mt.result, :mt.args] repeat
          env := envAddType(k, env)
      if recordType? t then
        r := t :: RT
        for f in r.fields repeat
          env := envAddType(f.type, env)
        for f in makeRecordFunList t repeat
          env(f.name) := nodeTypeExpr('_$, f.type, t)
      if unionType? t then
        ut := t :: UT
        for v in ut.variants repeat
          env := envAddType(v, env)
        for f in makeUnionFunList t repeat
          env(f.name) := nodeTypeExpr('_$, f.type, t)
      env

    walkApp (a : APP, ctx : CTX, env : ENV) : TN ==
      -- rewrite QUOTE(symbol) to value 'symbol
      a.function = ['QUOTE] and #a.args = 1 =>
        this := addNode!(ctx, first a.args, env)
        this.type := symbolType
        this

      debug ["Processing function application." :: PF]

      this := addNode!(ctx, [a], env)
      this.type := addTypeVar!(ctx)

      -- First case: just a function call.
      funExpr := walk(a.function, ctx, env)
      argExprList := [walk(arg, ctx, env) for arg in a.args]

      -- Second case: element indexing or record field access.
      eltFunList : List(N) := []
      if not unify?(a.function, ['elt]) then
        for n in env('elt) repeat
          eltFun := (n :: TE).expr :: MT
          if #eltFun.args = #a.args + 1 then
            eltFunList := [n, :eltFunList]

      if not empty? eltFunList then
        argExprList' := [funExpr, :argExprList]
        eltFunExpr := addNode!(ctx, ['elt], env)
        eltFunExpr.type := addTypeVar!(ctx, eltFunList)
        eltFunExpr.node := nodeTypeExpr('_$, eltFunExpr.node, typeRef(eltFunExpr))
        this.rules := [ruleApply(eltFunExpr, argExprList'), :this.rules]

      -- Add origin to function expression.
      if not(funExpr.node = ['return] or funExpr.node = ['error]) then
        funExpr.node := nodeTypeExpr('_$, funExpr.node, typeRef(funExpr))

      -- First case with a twist: arbitrary list construction.
      if unify?(a.function, ['construct]) then
        var := addTypeVar!(ctx, [argExpr.type for argExpr in argExprList])
        item := addNode!(ctx, var, env)
        item.type := var
        constructSig :=
          nodeMappingType([var for i in 1..#a.args], nodeApp(['List], [var]))
        addType!(ctx, funExpr.type :: MR, constructSig)
        this.rules := [ruleApply(funExpr, argExprList, [item]), :this.rules]
      else
        this.rules := [ruleApply(funExpr, argExprList), :this.rules]
      this

    walkAssign (a : ASS, ctx : CTX, env : ENV) : TN ==
      apply? a.lval =>
        app := a.lval :: APP
        this := walk(nodeApp(['setelt!], [app.function, :app.args, a.rval]), ctx, env)
        this.node := [a]
        this

      this := addNode!(ctx, [a])
      this.type := addTypeVar!(ctx)

      newVar := emptyNode()
      if symbol? a.lval then
        s := a.lval :: Symbol
        if empty? env(s) then
          debug ["Processing fresh assignment" :: PF, string(s :: PF)]
          newVar := addTypeVar!(ctx)
          env(s) := newVar

      left := walk(a.lval, ctx, env)
      -- we know the type of left-value while checking right-value (!?)
      right := walk(a.rval, ctx, env)

      if not emptyNode? newVar then
        left.node := nodeTypeExpr('_:, left.node, typeRef(left))

      -- Only left-value environment is propagated!
      this.env := left.env
      this.rules := [ruleAssign(left, right)]
      this

    walkCondExpr (ce : CE, ctx : CTX, env : ENV) : TN ==
      debug ["Processing conditional expression." :: PF]
      this := addNode!(ctx, [ce])

      cond := walk(ce.cond, ctx, env)
      truebr := walk(ce.truebr, ctx, cond.env)
      falsebr := walk(ce.falsebr, ctx, (caseExpr? ce.cond => env; cond.env))

      this.type := addTypeVar!(ctx,
        [truebr.type, falsebr.type,
         nodeUnionType [truebr.type, falsebr.type],
         nodeUnionType [falsebr.type, truebr.type]])

      -- TODO: "truebr.env" and "falsebr.env" should be merged and passed
      -- forward instead of just "env". Merging means that if the same variable
      -- was introduced in both branches then it should be present in the final
      -- environment.
      --
      -- Q: What if a variable "x : T" is defined only in one branch?
      -- A: In merged envrionment introduce "x" with type Union(T, "undefined"),
      --    and emit a warning when subtyping rule is applied.
      this.env := env
      this.rules := [ruleCondExpr(cond, truebr, falsebr)]
      this

    walkFun (fn : FN, ctx : CTX, env : ENV) : TN ==
      debug ["Processing function" :: PF, string(fn.name :: PF)]

      fnType : MT := signature fn

)if 0
      -- Take the type of function and replace those components, that were not
      -- specified, with type variables.
      typeList : List(N) :=
        ([(emptyNode?(t) => typeVar(i, 1); t)
          for i in 1.. for t in [fnType.result, :fnType.args]])

      fnType' := nodeMappingType(rest typeList, first typeList)
)endif

      debug(["Signature associated with function definition :" :: PF,
             fnType :: PF])

      -- Fetch signatures from the environment, including those defined by
      -- the domain / package / function. Filter out those that don't match
      -- the type calculated above.
      candidateList : List(MT) := []
      for n in env(fn.name) repeat
        candidate := emptyNode()

        if typeOrigin? n then
          te := n :: TE
          if te.type = ["$" :: Symbol] and mappingType? te.expr then
            candidate := te.expr
        if mappingType? n then
          candidate := n

        if not emptyNode? candidate then
          --ures := unifyType(fnType', candidate)
          --failed? ures => "iterate"
          --candidate := substitute(fnType', ures :: SUBST)
          candidateList := [candidate :: MT, :candidateList]

      -- TODO: Filter out function which have been already defined.

      if not empty? candidateList then
        info(["Environment contains" :: PF, string bold(fn.name :: PF),
              "from" :: PF, bold("$" :: PF), "with signatures:" :: PF,
              bold bracket [c :: PF for c in candidateList]])
      else
        info(["Considering" :: PF, string bold(fn.name :: PF),
              "of type" :: PF, bold(fnType :: PF),
              "to be a local function!" :: PF])
        candidateList := [fnType]

      --debug(["Will perform type check for" :: PF, string bold(fn.name :: PF),
      --       "function with following candidate signatures:" :: PF,
      --       brace [c :: PF for c in candidateList]])

      fnNode := addNode!(ctx, [fn], env)
      fnNode.type := addTypeVar!(ctx, [[c] for c in candidateList])
      return fnNode

)if 0
      -- Perform a type check for each candidate signature.
      for candidate in candidateList repeat
        info ["Assume" :: PF, fn.name :: PF, "has type :" :: PF, candidate :: PF]

        ctx' : TNA := []
        env' := env

        this := addNode!(ctx', [fn], env)

        -- It's vitally important that result type is represented by "%1" type
        -- variable (e.g. 'return' refers to "%1").
        resType :=
          emptyNode? candidate.result => addTypeVar!(ctx')
          addTypeVar!(ctx', [candidate.result])

        -- For each undefined argument type, add a node with type variable.
        deps : List(N) := []
        argList : List(N) := []
        argTypeList : List(N) := []

        for n in fn.args for t in candidate.args repeat
          if not emptyNode? t then
            env' := envAddType(t, env')
          -- Augment the environment if argument type is known upfront.
          argName := (n :: NT).name
          argType :=
            arg := addNode!(ctx', n, env)
            arg.type :=
              not emptyNode? t =>
                addTypeVar!(ctx', [t])
              addTypeVar!(ctx')
            arg.node := [argName]
            deps := [nodeRef(arg), :deps]
            typeRef(arg)
          argList := [nodeNamedType(argName, argType), :argList]
          argTypeList := [t, :argTypeList]
          -- Make the argument visible inside function body.
          debug(["Function argument" :: PF, string bold(argName :: PF),
                 "has type" :: PF, bold(t :: PF)])
          env'(argName) := t

        -- Add a node that represents the type of function body, always.
        fnRes := addNode!(ctx', fn.result, env)
        fnRes.type := resType
        fnRes.node := typeRef(fnRes)

        -- Augment the environment if result type is known upfront.
        if not emptyNode? candidate.result then
          env' := envAddType(candidate.result, env')
        deps := [nodeRef(fnRes), :deps]

        fnBody := walk(fn.body, ctx', env')

        fnRes.rules := [ruleSubType(fnBody, fnRes)]

        this.type := nodeMappingType(reverse argTypeList, fnRes.type)
        solution := nodeFun(fn.name, reverse argList, typeRef(fnRes), nodeRef(fnBody))
        this.rules := [[reverse deps, solution]]

        if check ctx' then
          this' := addNode!(ctx, [fn], env)
          this'.type := this.type
          this'.node := this.node
          return this'

      fail (["No matching type for function" :: PF, string bold(fn.name :: PF),
             "found!" :: PF, pile(["Candidates were:" :: PF,
                                   :[c :: PF for c in candidateList]])])
      error ""
)endif

    walkFtor (ft : FT, ctx : CTX, env : ENV) : TN ==
      sig := signature ft
      -- sig is unchecked and may contain invalid types
      ftorApp := nodeApp([ft.name], [[nt] for nt in ft.args])

      debug pile([spaces ["Processing functor" :: PF, bold(ftorApp :: PF), "with:" :: PF],
                 ft.type :: PF])

      this := addNode!(ctx, [ft.name], env)

      argSub := [[]]$AssociationList(Symbol, N)
      argLst : List(N) := []
      ftDeps : List(N) := []

      -- process functor's arguments
      for arg in ft.args repeat
        argType := addTypeVar!(ctx, [arg.type])
        argNode := addNode!(ctx, [arg.name], env)
        argNode.type := argType
        ftDeps := [nodeRef(argNode), :ftDeps]
        env(arg.name :: Symbol) := argType
        argSub(arg.name) := argType
        argLst := [argType, :argLst]

      argLst := reverse argLst
      ftorResNode := addNode!(ctx, ft.type, env)
      ftorResNode.type := addTypeVar!(ctx, [ft.type])
      ftDeps := [nodeRef(ftorResNode), :ftDeps]

      this.type := addTypeVar!(ctx, [nodeMappingType(argLst, ftorResNode.type)])

      env("$" :: Symbol) := nodeApp([ft.name], argLst)

      -- process functor's body
      for n in (ft.type :: SEQ).list | namedType? n repeat
        nt := n :: NT
        env(nt.name :: Symbol) := nodeTypeExpr('_$, nt.type, ["$" :: Symbol])

      ftorBody := walk(ft.capsule, ctx, env)
      extendType := if emptyNode? ft.extends then ['Type] else ft.extends

      formulas := reverse [nodeSubType(nodeRef(ftorBody), nodeRef(ftorResNode)), nodeRef(ftorBody), :ftDeps]
      solution := nodeFtor(ft.name, ft.args, ft.type, extendType, nodeRef(ftorBody))
      this.rules := [[formulas, solution]]
      this

    walkImport (im : IM, ctx : CTX, env : ENV) : TN ==
      debug ["Importing" :: PF, im.type :: PF]
      env := envAddType(im.type, env)
      done! addNode!(ctx, [im], env)

    walkLambda (lam : LAM, ctx : CTX, env : ENV) : TN ==
      this := addNode!(ctx, [lam], env)
      deps : List(N) := []

      -- Replace unknown types with type variables and add arguments to the
      -- environment. Rewrite those lambda arguments that miss the type.
      argList : List(NT) := []
      argTypeList : List(N) := []

      for arg in lam.args repeat
        if emptyNode? arg.type then
          argType := addTypeVar! ctx

          lamArg := addNode!(ctx, [arg], env)
          lamArg.type := argType
          lamArg.node := [arg.name]
          deps := [nodeRef(lamArg), :deps]

          arg := [arg.name, typeRef(lamArg)]$NT
        else
          argType := arg.type
        argList := [arg, :argList]
        argTypeList := [argType, :argTypeList]
        env(arg.name) := argType

      argList := reverse argList
      argTypeList := reverse argTypeList

      retType := (emptyNode? lam.type => addTypeVar! ctx; lam.type)
      lamType := [argTypeList, retType]$MT

      debug ["Lambda expression of type" :: PF, bold(lamType :: PF)]

      -- generate a node with result type
      lamBodyType := addNode!(ctx, lam.type, env)
      lamBody := walk(lam.body, ctx, env)
      lamBodyType.type := retType
      lamBodyType.rules := [ruleSubType(lamBody, lamBodyType)]

      deps := concat(reverse deps, nodeRef(lamBodyType))

      -- add a node with type of the lambda expression just for dependants
      this.type := [lamType]
      this.rules := [[deps, nodeLambda(argList, typeRef(lamBodyType), nodeRef(lamBody))]]
      this

    walkLoop (lp : LP, ctx : CTX, env : ENV) : TN ==
      debug ["Loop statement." :: PF]
      this := addNode!(ctx, [lp], env)
      deps : List(N) := []
      env' := env
      type : N

      if lp.kind case "collect" then
        type := addTypeVar!(ctx)
        this.type := nodeApp(['List], [type])
      else
        this.type := voidType

      debug ["Processing" :: PF, #(lp.itors) :: PF, "iterator(s)." :: PF]
      itorList : List(TN) := []
      for n in lp.itors repeat
        itor := n :: IT

        varType := addTypeVar!(ctx)

        -- Iterator variable is added to loop's body environment,
        -- but is also known to guards.
        env'(itor.var) := varType

        itorExpr := addNode!(ctx, n, env)
        itorExpr.type :=
          addTypeVar!(ctx,
            [nodeApp(['List], [varType]),
             nodeApp(['UniversalSegment], [varType])])
        varExpr := walk([itor.var], ctx, env')
        seqExpr := walk(itor.seq, ctx, env)
        itorExpr.rules := [ruleLoopIter(varExpr, seqExpr, itorExpr)]
        itorList := [itorExpr, :itorList]

      debug ["Processing" :: PF, #(lp.guards) :: PF, "guard(s)." :: PF]
      guardList : List(TN) := []
      for guard in lp.guards repeat
        guardType := addNode!(ctx, guard, env')
        guardType.type := booleanType
        guardExpr := walk(guard, ctx, env')
        guardType.rules := [ruleSubType(guardExpr, guardType)]
        guardList := [guardType, :guardList]

      debug ["Processing loop body." :: PF]
      body :=
        lp.kind case "collect" =>
          bodyType := addNode!(ctx, lp.body, env')
          bodyType.type := type
          bodyExpr := walk(lp.body, ctx, env')
          bodyType.rules := [ruleSubType(bodyExpr, bodyType)]
          bodyType
        walk(lp.body, ctx, env')

      this.rules := [ruleLoop(lp.kind, itorList, guardList, body)]
      this

    walkSeg (seg : SEG, ctx : CTX, env : ENV) : TN ==
      debug ["Processing segment:" :: PF, string(seg :: PF)]
      segType := addTypeVar! ctx

      this := addNode!(ctx, [seg], env)

      startType := addNode!(ctx, seg.start, env)
      startExpr := walk(seg.start, ctx, env)
      startType.type := segType
      startType.rules := [ruleSubType(startExpr, startType)]

      endType' : Union(TN, "none") :=
        not emptyNode? seg.end =>
          endType := addNode!(ctx, seg.end, env)
          endExpr := walk(seg.end, ctx, env)
          endType.type := segType
          endType.rules := [ruleSubType(endExpr, endType)]
          endType
        "none"

      stepType' : Union(TN, "none") :=
        not emptyNode? seg.step =>
          stepType := addNode!(ctx, seg.step, env)
          stepExpr := walk(seg.step, ctx, env)
          stepType.type := integerType
          stepType.rules := [ruleSubType(stepExpr, stepType)]
          stepType
        "none"

      this.type := nodeApp(['UniversalSegment], [segType])
      this.rules := [ruleSeg(startType, endType', stepType')]
      this

    walkSeq (s : SEQ, ctx : CTX, env : ENV) : TN ==
      import List(TN)

      debug ["Found sequence of" :: PF, #(s.list) :: PF, "expressions." :: PF]
      this := addNode!(ctx, [s])
      this.type := addTypeVar!(ctx)

      exprList : List(TN) := [(n := walk(e, ctx, env); env := n.env; n) for e in s.list]

      this.rules := [ruleSeq(s.kind, this, exprList)]
      this.env := (last exprList).env
      this

    walkSym (s : Symbol, ctx : CTX, env : ENV) : TN ==
      debug ["Symbol lookup for" :: PF, string(s :: PF)]

      this := addNode!(ctx, [s], env)

      types := env(s)
      -- BUG: parseTran uses true and false as "Boolean" and not as "() -> Boolean"
      -- workaround for Boolean constants
      if s = 'true or s = 'false then
        types := [booleanType, :types]
      if s = '_$NoValue then
        types := [voidType, :types]
      if s = 'leave then
        leaveType := nodeMappingType([integerType, voidType], typeAny) 
        types := [leaveType, :types]
      if s = 'error then
        errorType := nodeMappingType([stringType], typeAny)
        types := [errorType, :types]
      if s = 'return then
        returnType := nodeMappingType([integerType, node(ctx, 1).type], typeAny)
        types := [returnType, :types]

      -- handle a symbol which is a type constructor
      if inDatabase? s then
        ti := getTypeInfo([[s], [emptyNode()]]$APP)

        ftorArgList : List(N) := []
        ftorArgNodeList : List(TN) := []
        ftorArgRenames : SUBST := empty()

        for arg in ti.args repeat
          ftorArg := arg.expr
          ftorArgType := arg.type

          if typeVar? ftorArg then
            origFtorArg := ftorArg
            ftorArgType := substitute(ftorArgType, ftorArgRenames)

            ftorArgTypeNode := addNode!(ctx, ftorArgType, env)
            ftorArgTypeNode.type := addTypeVar!(ctx, [ftorArgType])

            ftorArg := addTypeVar!(ctx)
            ftorArgRenames(origFtorArg :: MR) := [ftorArg]

            ftorArgNode := addNode!(ctx, ftorArg, env)
            ftorArgNode.type := ftorArg
            ftorArgNodeList := [ftorArgNode, :ftorArgNodeList]
            ftorArgNode.rules := [ruleSuperType(ftorArgNode, ftorArgTypeNode)]

          ftorArgList := [ftorArg, :ftorArgList]

        ftorResType := nodeApp(['Type], [])
        ftorType := nodeMappingType(reverse ftorArgList, ftorResType)
        env(s) := ftorType
        types := [ftorType, :types]

        if not empty? ftorArgNodeList then
          this.rules := [[[nodeRef(n) for n in ftorArgNodeList], [s]]]

      empty? types =>
        fail ["Undefined symbol:" :: PF, bold red string (s :: PF), "!" :: PF]
        error ""
      
      info(["Found" :: PF, string bold(s :: PF), "with type :" :: PF,
            bold bracket [t :: PF for t in types]])
      this.type :=
        #types = 1 and typeVar? types.1 => types.1
        addTypeVar!(ctx, types)
      this 

    walkTypeExpr (te : TE, ctx : CTX, env : ENV) : TN ==
      te.kind = '_: => 
        debug(["Expression" :: PF, te.expr :: PF, "has type" :: PF, te.type :: PF])

        not symbol? te.expr =>
          fail ["Type annotation works only for symbols!" :: PF]
          error ""

        -- Type definition for a symbol:
        -- add it to the environment or crash if already defined
        s := te.expr :: Symbol
        ts := env(s)

        (not empty? ts) and (first ts ~= te.type) =>
          fail([bold red ("Error!" :: PF), "Symbol" :: PF, string(s :: PF),
                "already defined as" :: PF, spaces[t :: PF for t in ts], "!" :: PF])
          error ""

        env(s) := te.type
        done! addNode!(ctx, [te], env)

      te.kind = '_@ =>
        debug(["Expression" :: PF, te.expr :: PF,
               "has to return type" :: PF, te.type :: PF])

        not apply? te.expr =>
          fail ["Type cut operator works only for function application!" :: PF]
          error ""

        env := envAddType(te.type, env)
        this := addNode!(ctx, [te], env)
        expr := walk(te.expr, ctx, env)

        this.type := te.type
        this.rules := [ruleSubType(expr, this)]
        this

      te.kind = '_:_: =>
        debug ["Expression" :: PF, te.expr :: PF, "have to coerce to" :: PF, te.type :: PF]
        env := envAddType(te.type, env)

        this := addNode!(ctx, [te], env)
        this.type := addTypeVar!(ctx, [te.type])

        expr := walk(te.expr, ctx, env)
        coerceFun := walk(['coerce], ctx, env)
        this.rules := [ruleSubType(expr, this), ruleApply(coerceFun, [expr])]
        this
    
      te.kind = '_$ =>
        not symbol? te.expr =>
          fail ("Type origin selector works only for symbols!" :: PF)
          error ""

        debug(["Symbol" :: PF, string(te.expr :: PF),
               "must originate from" :: PF, bold(te.type :: PF),
               "type!" :: PF])

        env := envAddType(te.type, env)
        this := addNode!(ctx, [te], env)
        this.type := addTypeVar!(ctx)

        expr := walk(te.expr, ctx, env)

        this.rules := [ruleTypeOrigin(expr, te.type)]
        this

      te.kind = 'case =>
        env := envAddType(te.type, env)

        this := addNode!(ctx, [te], env)
        this.type := addTypeVar!(ctx, [booleanType])

        if symbol? te.expr then
          this.env := (env(te.expr :: Symbol) := te.type)

        exprType := addNode!(ctx, te.type, env)
        exprType.type := te.type

        expr := walk(te.expr, ctx, env)
        exprType.rules := [ruleSuperType(exprType, expr)]

        this.rules := [[[nodeRef(exprType)], [te]]]
        this

      fail ["Type expression" :: PF, bold red paren(te :: PF), "not handled yet!" :: PF]
      error ""

    walkInt (i : Integer, ctx : CTX, env : ENV) : TN ==
      debug [i :: PF, "is" :: PF, integerType :: PF, ":)" :: PF]
      this := addNode!(ctx, [i], env)
      this.type := integerType
      this

    walkFlt (f : DoubleFloat, ctx : CTX, env : ENV) : TN ==
      debug [f :: PF, "is" :: PF, floatType :: PF, ":)" :: PF]
      this := addNode!(ctx, [f], env)
      this.type := floatType
      this

    walkStr (s : String, ctx : CTX, env : ENV) : TN ==
      debug [string(s :: PF), "is" :: PF, stringType :: PF, ":)" :: PF]
      this := addNode!(ctx, [s], env)
      this.type := addTypeVar!(ctx, [[string(s :: Symbol)], stringType])
      this

    walkEmpty (e : N, ctx : CTX, env : ENV) : TN ==
      this := addNode!(ctx, e, env)
      this.type := typeUndef
      this

    walk (n, ctx, env) ==
      apply? n => walkApp(n :: APP, ctx, env)
      assign? n => walkAssign(n :: ASS, ctx, env)
      condExpr? n => walkCondExpr(n :: CE, ctx, env)
      float? n => walkFlt(n :: DoubleFloat, ctx, env)
      functor? n => walkFtor(n :: FT, ctx, env)
      import? n => walkImport(n :: IM, ctx, env)
      integer? n => walkInt(n :: Integer, ctx, env)
      lambda? n => walkLambda(n :: LAM, ctx, env)
      loop? n => walkLoop(n :: LP, ctx, env)
      segment? n => walkSeg(n :: SEG, ctx, env)
      sequence? n => walkSeq(n :: SEQ, ctx, env)
      string? n => walkStr(n :: String, ctx, env)
      symbol? n => walkSym(n :: Symbol, ctx, env)
      typeExpr? n => walkTypeExpr(n :: TE, ctx, env)
      function? n => walkFun(n :: FN, ctx, env)
      emptyNode? n => walkEmpty(n, ctx, env)
      -- namedType, mappingType, recordType, sumType, unionType, macro, where
      fail ["Expression" :: PF, bold red paren(n :: PF), "not handled yet!" :: PF]
      error ""

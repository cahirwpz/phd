)boot $LINELENGTH := 180
)compile ParserTools.spad
)compile SpadCategories.spad

)abbrev package OUTFHELP OutputFormHelper
++ Helper function for output form printing
OutputFormHelper() : with
    separateBy : (List OutputForm, OutputForm) -> OutputForm
    spaces : List OutputForm -> OutputForm
  == add
    import OutputForm
    import Integer

    separateBy (l, sep) ==
      empty? l => ""
      max_width := "max"/[width i for i in l]
      if max_width >= _$LINELENGTH$Lisp
        then
          j := 0
          nl := #l - 1
          res := []
          for i in l repeat
            res :=
              if j < nl
                then [hconcat [i, sep], :res]
                else [i, :res]
            j := j + 1
          pile (reverse res)
        else
          res := [first l]
          for i in rest l repeat
            res := [i, sep, :res]
          hconcat (reverse res)

    spaces l ==
      separateBy(l, " ")

)abbrev domain SPIMP SpadImport
++ SPAD domain / category / package import declaration
SpadImport(T : ParsableCategory) : ParsableCategory == add
  import OutputForm

  parse ex ==
    (parse ex.2)$T pretend %

  coerce ex ==
    hconcat ["import ", (ex pretend T) :: OutputForm]

)abbrev domain SPDCL SpadSymbolDecl
++ SPAD variable declaration representation
SpadSymbolDecl(T : SpadTypeCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "type") -> T
    construct : (Symbol, T) -> %
      ++ construct(name,type)
    construct : Symbol -> %
      ++ construct(name)
  == add
    Rep := Record(s_name : Symbol, s_type : T)

    import OutputForm
    import OutputFormHelper
    import ParserTools

    elt(x, "name") == x.s_name
    elt(x, "type") == x.s_type

    construct(aname, atype) == [aname, atype]$Rep
    construct(aname) == [aname, unknownType]$Rep

    parse ex ==
      --print (hconcat ["variable: ", ex :: OutputForm])

      var? ex =>
        construct(symbol ex.2, parse ex.3)
      symbol? ex =>
        construct(symbol ex)

      print (ex :: OutputForm)
      error "parse $ SpadSymbolDecl: not a variable definition!"

    coerce var ==
      aname := var.s_name :: OutputForm
      atype : OutputForm :=
        if unknownType? var.s_type then "?" else coerce var.s_type
      spaces [aname, ":", atype]

)abbrev domain SPASS SpadAssign
SpadAssign(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "lvalue") -> E
    elt : (%, "rvalue") -> E
    construct : (E, E) -> %
  == add
    Rep := Record(lv : E, rv : E)

    elt(x, "lvalue") == x.lv
    elt(x, "rvalue") == x.rv

    construct (lval, rval) == [lval, rval]$Rep pretend %

    parse ex ==
      -- (LET expr value)
      construct(parse ex.2, parse ex.3)

    coerce assign ==
      hconcat [assign.lv :: OutputForm, " := ", assign.rv :: OutputForm]

)abbrev domain SPAPP SpadApply
SpadApply(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "function") -> E
    elt : (%, "args") -> List E
    construct : (E, List E) -> %
  == add
    Rep := Record(a_fn : E, a_args : List E)

    import OutputFormHelper

    elt(x, "function") == x.a_fn
    elt(x, "args") == x.a_args

    construct (fn, lst) == [fn, lst]$Rep pretend %

    coerce apply ==
      fun := apply.function
      argl := [ a :: OutputForm for a in apply.args ]
      funsym := getSymbol fun

      funsym case "failed" =>
        #argl = 0 => fun :: OutputForm
        hconcat [fun :: OutputForm, paren argl]

      funsym = 'QUOTE =>
        hconcat ["'", :argl]
      funsym = 'elt =>
        hconcat [first argl, ".", last argl]
      funsym = 'exit =>
        hconcat ["exit{", first argl, "}", "(", last argl, ")"]
      funsym = 'return =>
        hconcat ["return{", first argl, "}", "(", last argl, ")"]
      #argl = 0 and funsym = 'Zero => "0"
      #argl = 0 and funsym = 'One => "1"
      #argl = 2 and member?(funsym, ['_-, '_+, '_*, '_/, '_^, '_=, '_~_=, '_<, '_>, '_<_=, '_>_=]) =>
        paren spaces([argl.1 :: OutputForm,
                      funsym :: OutputForm,
                      argl.2 :: OutputForm ])

      -- finally, every other function call
      hconcat [funsym :: OutputForm, paren argl]

)abbrev domain SPSEG SpadSegment
SpadSegment(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "start") -> E
    elt : (%, "end") -> Union(E, "infinity")
    elt : (%, "step") -> E
    construct : (E, E) -> %
    construct : (E, E, E) -> %
  == add
    Rep := Record(r_start : E, r_end : Union(E, "infinity"), r_step : E)

    import OutputFormHelper

    elt(x, "start") == x.r_start
    elt(x, "end") == x.r_end
    elt(x, "step") == x.r_step

    construct(f,l,s) == [f,l,s]$Rep pretend %
    construct(f,s) == [f,"infinity",s]$Rep pretend %

    parse ex ==
      -- (SEGMENT first last)
      construct(parse ex.2, parse ex.3)

    coerce range ==
      (rstart, rend, rstep) := (range.start :: OutputForm,
                                range.end :: OutputForm,
                                range.step :: OutputForm)
      ofs : List OutputForm := [ rstart, ".." ]
      if not(range.end case "infinity") then
        ofs := concat(ofs, [rend])
      i := getInteger range.step
      if i case Integer and i ~= 1 then
        ofs := concat(ofs, ["by", rstep])
      spaces ofs

)abbrev package SPITR SpadIterator
SpadIterator(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "var") -> Symbol
    elt : (%, "seq") -> E
    construct : (Symbol, E) -> %
  == add
    Rep := Record(i_var : Symbol, i_seq : E)

    elt(x, "var") == x.i_var
    elt(x, "seq") == x.i_seq

    construct(v,s) == [v,s]$Rep pretend %

    coerce itor ==
      hconcat ["for ", itor.var :: OutputForm, " in ", itor.seq :: OutputForm]

)abbrev domain SPTEX SpadTypeExpression
SpadTypeExpression(T : SpadTypeCategory, E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Symbol
    elt : (%, "expr") -> E
    elt : (%, "type") -> T
    construct : (Symbol, E, T) -> %
  == add
    Rep := Record(t_kind : Symbol, t_expr : E, t_type : T)

    import SExpression

    elt(x,"kind") == x.t_kind
    elt(x,"expr") == x.t_expr
    elt(x,"type") == x.t_type

    construct(k,e,t) ==
      operators : List Symbol :=
        ['case, 'has, 'is, 'pretend, ':, '::, '@]
      not member?(k, operators) =>
        error "Not a type expression operator!"
      [k,e,t]$Rep pretend %

    parse ex ==
      construct(symbol ex.1, parse ex.2, parse ex.3)

    coerce ex ==
      hconcat([ex.expr :: OutputForm, " ",
               ex.kind :: OutputForm, " ",
               ex.type :: OutputForm])

)abbrev domain SPLOOP SpadLoop
SpadLoop(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Union("loop", "collect")
    elt : (%, "itors") -> List SpadIterator(E)
    elt : (%, "guards") -> List E
    elt : (%, "body") -> E
    construct : (Union("loop", "collect"), List SpadIterator(E), List E, E) -> %
  == add
    Rep := 
      Record(lp_kind : Union("loop", "collect"),
             lp_itors : List SpadIterator(E),
             lp_guards : List E,
             lp_body : E)

    import ParserTools
    import OutputForm
    import OutputFormHelper

    elt(x,"kind") == x.lp_kind
    elt(x,"itors") == x.lp_itors
    elt(x,"guards") == x.lp_guards
    elt(x,"body") == x.lp_body

    construct(k,il,gl,b) == [k,il,gl,b]$Rep pretend %

    parse ex ==
      lst := destruct cdr ex
      l_body := parse(last lst) $ E
      lst := reverse(rest(reverse(lst)))

      -- print hconcat [(car ex) :: OutputForm, paren [e :: OutputForm for e in lst]]

      range : SpadSegment(E)
      l_itors : List SpadIterator(E) := []
      l_guards : List E := []

      for e in lst repeat
        -- upewnić się ze strażnikami, w collect też może być while
        itor? e =>
          -- (IN item sequence)
          l_itors := cons([symbol e.2, parse e.3], l_itors)
        step? e =>
          -- (STEP i m k n) -> i := m..n by k
          -- (STEP i m k) -> i := m.. by k
          range : SpadSegment(E) := if #e = 4
            then [parse e.3, parse e.4]
            else [parse e.3, parse e.5, parse e.4]
          l_itors := cons([symbol e.2, construct range], l_itors)
        guard? e or while? e =>
          -- should they be mixed together ?
          -- ('| cond)
          -- (WHILE cond)
          l_guards := cons(parse e.2, l_guards)
        print "------"
        print (e :: OutputForm)
        error "unrecognized loop construct"

      reverse!(l_itors)
      reverse!(l_guards)

      #l_guards > 1 => error "loop: more than one guard!"

      if collect? ex
        then construct("collect", l_itors, l_guards, l_body)
        else construct("loop", l_itors, l_guards, l_body)

    coerce ex ==
      il := [ i :: OutputForm for i in ex.itors ]
      gl := [ spaces ["if", g :: OutputForm] for g in ex.guards ]
      b := ex.body :: OutputForm
      ex.kind case "loop" =>
        if empty? il
          then
            loop_cond := separateBy([g :: OutputForm for g in ex.guards ], " and ")
            pile([hconcat ["while ", loop_cond],
                  hconcat [hspace 1, "repeat ", b]])
          else
            pile([hconcat [spaces concat(il, gl)],
                  hconcat [hspace 1, "repeat ", b]])
      ex.kind case "collect" =>
        spaces ["[", b, spaces concat(il, gl), "]"]

)abbrev domain SPLAM SpadLambda
SpadLambda(T : SpadTypeCategory, E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "args") -> List Symbol
    elt : (%, "type") -> T
    elt : (%, "body") -> E
    construct : (List Symbol, T, E) -> %
  == add
    Rep := Record(f_args : List Symbol, f_type : T, f_body : E)

    import ParserTools
    import OutputForm

    elt(x,"args") == x.f_args
    elt(x,"type") == x.f_type
    elt(x,"body") == x.f_body

    construct(al,t,b) == [al,t,b]$Rep pretend %

    nameOf : SExpression -> Symbol
    nameOf s == if list? s then symbol s.2 else symbol s

    typeOf : SExpression -> SExpression
    typeOf s == if list? s then s.3 else convert []

    parse ex ==
      -- (+-> arg body)
      not list? ex.2 =>
        sig := convert [convert '_:, convert [], convert []]
        [[symbol ex.2], parse sig, parse ex.3]

      -- (+-> (: (: arg Type) RetType) body) 
      -- (+-> (: (@Tuple (: arg1 Type1) (: arg2 Type2)) RetType) body)
      (ltype, rtype) := destruct(cdr ex.2)

      largs := if tuple? ltype then destruct cdr(ltype) else [ltype]
      lsym := [nameOf arg for arg in largs]
      ltypes := [typeOf arg for arg in largs]

      sig := convert cons(convert '_:, concat(ltypes, [rtype]))

      construct(lsym, parse sig, parse ex.3)

    coerce ex ==
      hconcat(["function ", paren [e :: OutputForm for e in ex.args],
               " : ", ex.type :: OutputForm, " == ", ex.body :: OutputForm])

)abbrev package SPSEQ SpadSequence
SpadSequence(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Union("prog", "list", "tuple")
    elt : (%, "list") -> List E
    construct : (Union("prog", "list", "tuple"), List(E)) -> %
  == add
    Rep := Record(s_kind : Union("prog", "list", "tuple"), s_list : List E)

    import OutputForm
    import ParserTools

    elt(x, "kind") == x.s_kind
    elt(x, "list") == x.s_list

    construct(k,l) == [k,l]$Rep

    parse ex ==
      content : List E := []

      for e in destruct ex repeat
        var? e =>
          if listof? e.2
            then
              -- (: (LISTOF x y z ...) Type)
              varlst := destruct(cdr e.2)
              for var in varlst repeat
                sexp : E := parse (convert [convert '_:, var, e.3])
                content := [sexp, :content]
            else
              content := [(parse e) $ E, :content]

        content := [(parse e) $ E, :content]

      ["prog", reverse content]

    coerce ex ==
      lst := [ e :: OutputForm for e in ex.list ]
      ex.kind case "prog" => hconcat [hspace 2, pile lst]
      ex.kind case "list" => bracket lst
      ex.kind case "tuple" => paren lst

)abbrev package SPCOND SpadIfElse
SpadIfElse(E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "cond") -> E
    elt : (%, "truebr") -> E
    elt : (%, "falsebr") -> Union(E, "empty")
    construct : (E, E, Union(E, "empty")) -> %
  == add
    Rep := Record(c_cond : E, c_true : E, c_false : Union(E, "empty"))

    import OutputForm

    elt(x, "cond") == x.c_cond
    elt(x, "truebr") == x.c_true
    elt(x, "falsebr") == x.c_false

    construct(c, tb, fb) == [c, tb, fb]$Rep pretend %

    coerce c ==
      c.falsebr case "empty" =>
        pile([hconcat ["if ", c.cond :: OutputForm],
              hconcat [hspace 1, "then ", c.truebr :: OutputForm]])
      pile([hconcat ["if ", c.cond :: OutputForm],
            hconcat [hspace 1, "then ", c.truebr :: OutputForm],
            hconcat [hspace 1, "else ", c.falsebr :: OutputForm]])

)abbrev package SPFN SpadFunction
++ SPAD function
SpadFunction(T : SpadTypeCategory, E : SpadNodeCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List Union(String, SpadSymbolDecl(T))
    elt : (%, "type") -> T 
    elt : (%, "body") -> E
    construct : (Symbol, List Union(String, SpadSymbolDecl(T)), T, E) -> %
      ++ construct(name,varlist,type,exp)
  == add
    Rep := Record(fn_name : Symbol,
                  fn_args : List Union(String, SpadSymbolDecl(T)),
                  fn_type : T,
                  fn_body : E)

    import OutputForm
    import ParserTools
    import SpadSymbolDecl(T)

    elt(x, "name") == x.fn_name
    elt(x, "args") == x.fn_args
    elt(x, "type") == x.fn_type
    elt(x, "body") == x.fn_body

    construct(fname, fargs, ftype, fbody) == 
      [fname, fargs, ftype, fbody] $ Rep

    parse_arg : (SExpression, SExpression) -> Union(String, SpadSymbolDecl(T))
    parse_arg(s, t) ==
      string? s =>
        string s
      construct(symbol s, parse t)

    parse ex ==
      -- print (hconcat ["function: ", ex :: OutputForm])

      function? ex =>
        fname := symbol car(ex.2)
        arg_names := destruct cdr(ex.2)
        arg_types := destruct cdr(ex.3)
        fargs := [ parse_arg(s, t) for s in arg_names for t in arg_types ]
        ftype := car ex.3
        fbody := convert [ex.5]
        construct(fname, fargs, parse ftype, parse fbody)

      print "------"
      print (ex :: OutputForm)
      error "not a function"

    coerce fn ==
      fargs := [ arg :: OutputForm for arg in fn.fn_args ]
      fbody := [ fn.fn_body :: OutputForm ]
      retType := if unknownType? fn.fn_type
        then "" :: OutputForm
        else hconcat([" : ", fn.fn_type :: OutputForm])
      hconcat([fn.fn_name :: OutputForm,
               paren fargs, retType,
               " == ", pile fbody, ""])

)abbrev package SPMACRO SpadMacro
++ SPAD macro representation
SpadMacro() : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List Symbol
    elt : (%, "body") -> SExpression
    construct : (Symbol, List Symbol, SExpression) -> %
      ++ construct(name,args,exp)
  == add
    Rep := Record(md_name : Symbol,
                  md_args : List Symbol,
                  md_body : SExpression)

    import OutputForm
    import ParserTools

    elt(x, "name") == x.md_name
    elt(x, "args") == x.md_args
    elt(x, "body") == x.md_body

    construct(mname, margs, mbody) ==
      [mname, margs, mbody]$Rep

    parse ex ==
      --print (hconcat ["macro: ", ex :: OutputForm])

      macro? ex =>
        mname := symbol car(ex.2)
        margs := [ symbol s for s in destruct(cdr(ex.2)) ]
        mbody := ex.5
        construct(mname, margs, mbody)

      print "------"
      print (ex :: OutputForm)
      error "not a macro definition"

    coerce m ==
      margs := 
        if null m.md_args
          then "" :: OutputForm
          else paren [ arg :: OutputForm for arg in m.md_args ]
      hconcat([m.md_name :: OutputForm,
               margs, " ==> ", pile [m.md_body :: OutputForm]])

)abbrev package SPNODE SpadNode
++ SPAD generic expression
SpadNode(T : SpadTypeCategory) : SpadNodeCategory == add
    LAMBDA ==> SpadLambda(T, %)
    APPLY ==> SpadApply(%)
    ASSIGN ==> SpadAssign(%)
    LOOP ==> SpadLoop(%)
    IFELSE ==> SpadIfElse(%)
    IMPORT ==> SpadImport(T)
    SEQUENCE ==> SpadSequence(%)
    TYPEEXPR ==> SpadTypeExpression(T, %)
    SEGMENT ==> SpadSegment(%)
    FUNC ==> SpadFunction(T, %)
    MACRO ==> SpadMacro

    Rep := Union(seq : SEQUENCE,
                 lambda : LAMBDA,
                 apply : APPLY,
                 assign : ASSIGN,
                 loop : LOOP,
                 ifelse : IFELSE,
                 sfunction : FUNC,
                 smacro : MACRO,
                 type : T,
                 typeimp : IMPORT,
                 typeexpr : TYPEEXPR,
                 range : SEGMENT,
                 dfloat : DoubleFloat,
                 integer : Integer,
                 symbol : Symbol,
                 string : String)

    import OutputForm
    import OutputFormHelper
    import SExpression
    import ParserTools

    getSymbol ex ==
      if ex case symbol then ex.symbol else "failed"
    getInteger ex ==
      if ex case integer then ex.integer else "failed"

    construct (seq : SEQUENCE) : % == [seq]$Rep

    parse ex ==
      -- print (hconcat ["expression: ", ex :: OutputForm])

      import? ex =>
        [(parse ex) $ IMPORT]

      seq? ex =>
        -- {sequence of expressions}
        -- (SEQ expr1 expr2 ...)
        [parse(cdr ex) $ SEQUENCE]

      tuple? ex =>
        -- {tuple constructor}
        -- (@Tuple expr1 expr2 ...)
        exl : List % := [parse e for e in destruct cdr ex]
        [construct("tuple", exl) $ SEQUENCE]

      lambda? ex =>
        [(parse ex) $ LAMBDA]

      function? ex =>
        [(parse ex) $ FUNC]

      macro? ex =>
        [(parse ex) $ MACRO]

      var? ex or case? ex or has? ex or is? ex or pretend? ex or coerce? ex or typesel? ex => 
        -- {expression with type annotation}
        -- (: expr Type) 
        -- {expression with "case" operator}
        -- (case expr Type)
        -- {expression with "has" operator}
        -- (has expr Type)
        -- {expression with "is" operator}
        -- (is expr Type)
        -- {expression with "pretend" operator}
        -- (pretend expr Type)
        -- {expression with "::" coerce operator}
        -- (:: expr Type)
        -- {expression with "@" type selector operator}
        -- (@ expr Type)
        [(parse ex) $ TYPEEXPR]

      let? ex =>
        [(parse ex) $ ASSIGN]

      ifelse? ex =>
        -- {if-then-else expression of if-then statement}
        -- (IF condition expr1 expr2)
        -- (IF condition expr 'noBranch)
        -- (IF condition 'noBranch expr)
        (c, l, r) := (ex.2, ex.3, ex.4)
        sc : IFELSE :=
          nobranch? l =>
            pc := parse (convert [convert '_not, c])
            [pc, parse r, "empty"]
          nobranch? r =>
            [parse c, parse l, "empty"]
          [parse c, parse l, parse r]
        [sc]

      collect? ex or loop? ex =>
        [(parse ex) $ LOOP]

      record? ex or union? ex =>
        [(parse ex) $ T]

      list? ex and #ex > 0 =>
        lst := [parse e for e in destruct ex]
        symbol? ex.1 and symbol ex.1 = 'construct =>
          construct(["list", rest lst])
        construct([first lst, rest lst])

      string? ex =>
        construct(string ex)

      symbol? ex =>
        construct(symbol ex)

      integer? ex =>
        construct(integer ex)

      float? ex =>
        construct(float ex)

      null? ex =>
        construct(["list", []] $ SEQUENCE)

      print "parse $ SpadNode:"
      print (ex :: OutputForm)
      error "SExpression not handled!"

    coerce ex ==
      ex case range => ex.range :: OutputForm
      ex case lambda => ex.lambda :: OutputForm
      ex case seq => ex.seq :: OutputForm
      ex case apply => ex.apply :: OutputForm
      ex case loop => ex.loop :: OutputForm
      ex case ifelse => ex.ifelse :: OutputForm
      ex case sfunction => ex.sfunction :: OutputForm
      ex case smacro => ex.smacro :: OutputForm
      ex case typeimp => ex.typeimp :: OutputForm
      ex case typeexpr => ex.typeexpr :: OutputForm
      ex case assign => ex.assign :: OutputForm
      ex case type => ex.type :: OutputForm
      ex case string => ex.string :: OutputForm
      ex case symbol => ex.symbol :: OutputForm
      ex case dfloat => ex.dfloat :: OutputForm
      ex case integer => ex.integer :: OutputForm

      error "coerce $ SpadNode: variant not handled!"

)abbrev package SPTFTOR SpadFunctorType
SpadFunctorType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List(T)
    construct : (Symbol, List(T)) -> %
  == add
    -- functor's parameter can be arbitrary value (not only type)
    Rep := Record(ft_name : Symbol, ft_args : List(T))

    elt(x, "args") == x.ft_args
    elt(x, "name") == x.ft_name

    construct(n, al) == [n, al]$Rep pretend %

    parse ex ==
      fargs : List(T) := [ parse e for e in destruct cdr(ex) ]
      [ symbol car ex, fargs ]

    coerce ftor ==
      fname := ftor.name :: OutputForm
      fargs := [ t :: OutputForm for t in ftor.args ]
      empty? fargs => fname
      hconcat [ fname, paren fargs ]

)abbrev package SPTMAP SpadMappingType
SpadMappingType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "args") -> List(T)
    elt : (%, "type") -> T
    construct : (List(T), T) -> %
  == add
    Rep := Record(m_args : List(T), m_type : T)

    import ParserTools

    elt(x, "args") == x.m_args
    elt(x, "type") == x.m_type

    construct(al, t) == [al, t]$Rep pretend %

    parseFunType : SExpression -> T
    parseFunType s ==
      if firstSymbol? (s, ':) then parse s.3 else parse s
        
    parse ex ==
      sig : List(T) := reverse [ parseFunType e for e in destruct cdr ex ]
      [ reverse(rest sig), first sig ]

    coerce mapping ==
      ts := [t :: OutputForm for t in mapping.args]
      src := if #ts > 1 then paren ts else first ts
      hconcat [src, " -> ", mapping.type :: OutputForm]

)abbrev package SPTSUM SpadSumType
SpadSumType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "types") -> List(T)
    elt : (%, "kind") -> Union("join", "domain", "package", "list")
    construct : (Union("join", "domain", "package", "list"), List(T)) -> %
  == add
    Rep :=
      Record(s_kind : Union("join", "domain", "package", "list"), s_types : List(T))

    import ParserTools

    elt(x, "kind") == x.s_kind
    elt(x, "types") == x.s_types

    construct(k, tl) == [k, tl]$Rep pretend %

    parse ex ==
      lst :=
        domain? ex or package? ex =>
          -- (CATEGORY domain ...)
          -- (CATEGORY package ...)
          destruct cdr(cdr(ex))
        join? ex or progn? ex =>
          -- (Join ...)
          -- (PROGN ...)
          destruct cdr(ex)

      args : List(T) := [ parse e for e in lst ]

      domain? ex => ["domain", args]
      package? ex => ["package", args]
      join? ex => ["join", args]
      progn? ex => ["list", args]

    coerce(sum : %) : OutputForm ==
      ts := [ t :: OutputForm for t in sum.types ]
      sum.kind case "join" => hconcat ["Join(", pile ts, ")"]
      pile [hconcat["{", pile ts], "}"]

)abbrev package SPTSIG SpadSignatureType
SpadSignatureType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "type") -> SpadMappingType(T)
    construct : (Symbol, SpadMappingType T) -> %
  == add
    Rep := Record(s_name : Symbol, s_type : SpadMappingType(T))

    elt(x, "name") == x.s_name
    elt(x, "type") == x.s_type

    construct(n, t) == [n, t]$Rep pretend %

    parse ex ==
      -- (SIGNATURE name (RetType Arg1Type Arg2Type ...))
      -- (SIGNATURE name Type constant)
      res : T := parse(car ex.3)
      targs : List(T) := if #ex = 3
        then [ parse e for e in destruct(cdr ex.3) ]
        else [ parse ex.4 ]
      [ symbol ex.2, construct(targs, res) ]

    coerce(sig : %) : OutputForm ==
      hconcat [sig.name :: OutputForm, " : ", sig.type :: OutputForm]

)abbrev package SPTNAMED SpadNamedType
SpadNamedType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "type") -> T
    construct : (Symbol, T) -> %
  == add
    Rep := Record(n_name : Symbol, n_type : T)

    import SExpression

    elt(x, "name") == x.n_name
    elt(x, "type") == x.n_type

    construct(n, t) == [n, t]$Rep pretend %

    parse ex ==
      -- (: field Type)
      [ symbol ex.2, (parse ex.3) $ T ]

    coerce(field : %) : OutputForm ==
      hconcat [field.name :: OutputForm, " : ", field.type :: OutputForm]

)abbrev package SPTREC SpadRecordType
SpadRecordType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "fields") -> List SpadNamedType(T)
    construct : List SpadNamedType(T) -> %
  == add
    Rep := List SpadNamedType(T)

    elt(x, "fields") == x pretend List SpadNamedType(T)

    construct fl == fl pretend %

    parse ex ==
      -- (Record (: field1 Type1) (: field2 Type2) ...)
      construct [parse e for e in destruct cdr ex]

    coerce(record : %) : OutputForm ==
      hconcat ["Record", paren [f :: OutputForm for f in record]]

)abbrev package SPTUNION SpadUnionType
SpadUnionType(T : ParsableCategory) : ParsableCategory with
    elt : (%, "variants") -> List Union(T, SpadNamedType(T))
    construct : List Union(T, SpadNamedType(T)) -> %
  == add
    Rep := List Union(T, SpadNamedType(T))

    import ParserTools

    elt(x, "variants") == x pretend List Union(T, SpadNamedType(T))

    construct fl == fl pretend %

    parseUnionField : SExpression -> Union(T, SpadNamedType(T))
    parseUnionField s ==
      var? s => construct(symbol s.2, parse s.3) $ SpadNamedType(T)
      (parse s) $ T

    parse ex ==
      -- (Union (: field1 Type1) (: field2 Type2) ...)
      -- (Union Type1 Type2 ...)
      construct [parseUnionField e for e in destruct cdr ex]

    coerce_field : Union(T, SpadNamedType(T)) -> OutputForm
    coerce_field f ==
      f case T => (f :: T) :: OutputForm
      (f :: SpadNamedType(T)) :: OutputForm

    coerce(union : %) : OutputForm ==
      hconcat ["Union", paren [coerce_field v for v in union.variants]]

)abbrev domain SPTYPE SpadType
++ SPAD type representation
SpadType() : SpadTypeCategory == add
    Rep := Union(sum : SpadSumType(%),
                 record : SpadRecordType(%),
                 union : SpadUnionType(%),
                 functor : SpadFunctorType(%),
                 mapping : SpadMappingType(%),
                 signature : SpadSignatureType(%),
                 singleton : String,
                 expression : SpadNode(%),
                 unknown : "unknown")

    import ParserTools
    import OutputForm
    import OutputFormHelper

    unknownType == ["unknown"]

    unknownType? t == t case unknown
    functorType? t == t case functor
    sumType? t == t case sum
    recordType? t == t case record
    unionType? t == t case union
    mappingType? t == t case mapping
    signatureType? t == t case signature

    parse ex ==
      -- print (hconcat ["type: ", ex :: OutputForm])

      null? ex => ["unknown"]
      string? ex => [string ex]
      symbol? ex =>
        [construct(symbol ex, []) $ SpadFunctorType(%)]
      signature? ex =>
        [(parse ex) $ SpadSignatureType(%)]
      record? ex =>
        [(parse ex) $ SpadRecordType(%)]
      union? ex => 
        [(parse ex) $ SpadUnionType(%)]
      var? ex or mapping? ex => 
        [(parse ex) $ SpadMappingType(%)]
      domain? ex or package? ex or join? ex or progn? ex =>
        [(parse ex) $ SpadSumType(%)]
      [(parse ex) $ SpadFunctorType(%)]

    coerce ex ==
      ex case record => ex.record :: OutputForm
      ex case union => ex.union :: OutputForm
      ex case singleton => ex.singleton :: OutputForm
      ex case signature => ex.signature :: OutputForm
      ex case sum => ex.sum :: OutputForm
      ex case functor => ex.functor :: OutputForm
      ex case mapping => ex.mapping :: OutputForm
      ex case unknown => ""

      error "coerce $ SpadType: Variant not handled!"

)abbrev package SPFTOR SpadFunctor
++ SPAD functor representation
SpadFunctor() : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List SpadSymbolDecl(SpadType)
    elt : (%, "type") -> SpadType
    elt : (%, "extends") -> SpadType
    elt : (%, "capsule") -> SpadNode(SpadType)
  == add
    Rep := Record(f_name : Symbol,
                  f_args : List SpadSymbolDecl(SpadType),
                  f_type : SpadType,
                  f_extends : SpadType,
                  f_capsule : SpadNode(SpadType))

    import OutputForm
    import ParserTools
    import SpadNode(SpadType)

    elt(x,"name") == x.f_name
    elt(x,"args") == x.f_args
    elt(x,"type") == x.f_type
    elt(x,"extends") == x.f_extends
    elt(x,"capsule") == x.f_capsule

    parse ex ==
      print (hconcat ["functor: ", ex :: OutputForm])

      functor? ex =>
        arg_names := destruct cdr(ex.2)
        arg_types := destruct cdr(ex.3)
        fname := symbol car(ex.2)
        ftype := car ex.3
        fbody := ex.5
        fargs : List SpadSymbolDecl(SpadType) :=
          [ [symbol s, parse t] for s in arg_names for t in arg_types ]
        fcapsule := if symbol(car fbody) = 'add then fbody.3 else fbody
        fextends := if symbol(car fbody) = 'add then fbody.2 else convert []
        fcapsule := convert cons(convert 'SEQ, destruct cdr fcapsule)
        construct(fname, fargs, parse ftype, parse fextends, parse fcapsule)

      print "------"
      print (ex :: OutputForm)
      error "not a functor"

    coerce f ==
      blankSeparate(
        [f.f_name :: OutputForm,
         paren [arg :: OutputForm for arg in f.f_args], ":", 
         hconcat [hspace 2, f.f_type :: OutputForm],
         "==", f.f_extends :: OutputForm, "add",
         f.f_capsule :: OutputForm])

)abbrev package STMEXP SpadTreeMacroExpander
SpadTreeMacroExpander() : with
    walk : SpadFunctor -> SpadFunctor
    walk : SpadType -> SpadType
    walk : SpadNode(SpadType) -> SpadNode(SpadType)
  == add
    env : List SpadMacro

    expand (st : SpadType) : SpadType == st
      --st case sum =>
      --  construct(st.sum.kind, [expand t for t in st.sum.types]) $ ?
      --st case record =>
      --  construct(...) $ RecordType
      --st case union =>
      --  construct(...) $ UnionType
      --st case deptype =>
      --  dt := st.deptype
      --  construct(pred dt, expand ptrue dt, expand pfalse dt) $ DependentType
      --st case functor =>
      --  ft := st.functor
      --  construct(ft.ft_name, [expand e for e ft.ft_args])$ FunctorType
      --st case mapping =>
      --  mt := st.mapping
      --  construct([expand e for e in mt.m_args], expand mt.m_type) $ MappingType
      --st case signature =>
      --  sig := st.signature
      --  construct(sig.sig_name, expand sig.sig_type) $ SignatureType
      --
      --st

    expand (ex : SpadNode(SpadType)) : SpadNode(SpadType) == ex
      --ex case seq =>
      --  construct(ex.s_type, [expand e for e in ex.s_sexpr]) $ SSeq
      --ex case lambda =>
      --  construct(ex.f_args, expand ex.f_type, expand ex.f_body) $ SLambda
      --ex case apply =>
      --  construct(expand ex.a_fun, [expand e for e in a_args]) $ SApply
      --  -- handle case where ex.a_fun is Symbol
      --ex case assign =>
      --  construct(expand ex.lval, expand ex.rval) $ SAssign
      --ex case coerce =>
      --  construct(expand ex.exp, ex.kind, expand ex.type) $ SCoerce
      --ex case loop =>
      --  construct(ex.l_type,
      --            [expand e for e in ex.l_itor],
      --            [expand e for e in ex.l_guard],
      --            expand ex.l_body) $ SLoop
      --ex case ifelse =>
      --  construct(expand pred ex, expand ptrue ex, expand pfalse ex) $ SIfElse
      --ex case type =>
      --  expand ex
      --ex case typeof =>
      --  construct(ex.t_kind, expand ex.t_expr, expand ex.t_type) $ STypeOf
      --ex case range =>
      --  ex.end case "infinity" =>
      --    construct(expand ex.start, "infinity", expand ex.step)$SRange
      --  construct(expand ex.start, expand ex.end, expand ex.step)$SRange
      --ex case symbol =>
      --  sex := find(ex, env)
      --  if sex case "failed" then
      --    ex
      --  else
      --    parse ex
      --
      --ex

    expand (f : SpadFunctor) : SpadFunctor == f
      -- old_env := copy env
      --
      --caps := f.capsule
      --
      --for e in caps repeat
      --  if e case SpadMacro then
      --    env := cons(e,env)
      --  else
      --    expand e
      --
      --env := old_env

)abbrev package SPTYPCHK SpadTypeChecker
++ Author: Krystian Baclawski
++ Date Created: December 2013
++ Date Last Updated: January 2014
++ Description:
++ Experimental type checker with bottom-up approach.
SpadTypeChecker() : with
    check : SExpression -> Void 
      ++ check(sex) runs type checker for parse tree
  == add
    import SpadFunctor
    import OutputForm

    check e ==
      -- print (e :: OutputForm)

      -- na poziomie funkcji to nie działa:
      -- SF ==> SpadFunctor
      -- id (x : SExpression) : SExpression == x

      ftor : SpadFunctor := parse e
      print (ftor :: OutputForm)

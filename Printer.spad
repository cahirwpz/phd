)abbrev domain PRTFORM PrintableForm
PrintableForm() : Exports == Implementation where
  NNI ==> NonNegativeInteger
  CMDCODE ==> Union(font : Union("bold", "underline", "inverse",
                              "black", "red", "green", "yellow", "blue",
                              "magenta", "cyan", "white"),
                 justify : Record(fn : Union("indent", "left", "right", "center"), width : NNI))
  CMD ==> Record(code : CMDCODE, form : %)
  LSTCODE ==> Union("hconcat", "vconcat", %)
  LST ==> Record(code : LSTCODE, forms : List(%))

  Exports ==> with
    coerce : Integer -> %
    coerce : DoubleFloat -> %
    coerce : Float -> %
    coerce : String -> %
    coerce : Symbol -> %
    coerce : List(%) -> %

    command? : % -> Boolean
    float? : % -> Boolean
    integer? : % -> Boolean
    string? : % -> Boolean
    symbol? : % -> Boolean
    list? : % -> Boolean

    commandOf : % -> CMD
    floatOf : % -> Float
    integerOf : % -> Integer
    stringOf : % -> String
    symbolOf : % -> Symbol
    listOf : % -> LST

    convert : SExpression -> %

    hconcat : List(%) -> %
    vconcat : List(%) -> %
    pile : List(%) -> %
    sepBy : (%, List(%)) -> %

    string : % -> %
    symbol : % -> %
    spaces : List(%) -> %
    hspace : NNI -> %
    paren : % -> %
    paren : List(%) -> %
    brace : % -> %
    brace : List(%) -> %
    bracket : % -> %
    bracket : List(%) -> %
    box : % -> %

    black : % -> %
    blue : % -> %
    cyan : % -> %
    green : % -> %
    magenta : % -> %
    red : % -> %
    white : % -> %
    yellow : % -> %

    right : (NNI, %) -> %
    left : (NNI, %) -> %
    center : (NNI, %) -> %
    indent : (NNI, %) -> %

    bold : % -> %
    inverse : % -> %
    underline : % -> %

    number : Integer -> Symbol
    funsig : (Symbol, Integer) -> Symbol

  Implementation ==> add
    Rep := Union(fnum : Float, inum : Integer, str : String, sym : Symbol,
                 cmd : CMD, list : LST)

    coerce (df : DoubleFloat) : % == [convert(df)]$Rep
    coerce (f : Float) : % == [f]$Rep
    coerce (i : Integer) : % == [i]$Rep
    coerce (s : String) : % == [s]$Rep
    coerce (s : Symbol) : % == [s]$Rep
    coerce (l : List(%)) : % == brace sepBy("," :: %, l)

    command? f == f case cmd
    float? f == f case fnum
    integer? f == f case inum
    string? f == f case str
    symbol? f == f case sym
    list? f == f case list

    commandOf (f : %) : CMD ==
      command? f => f.cmd
      error "Cannot coerce to PrintableForm command!"

    floatOf (f : %) : Float ==
      float? f => f.fnum
      error "Cannot coerce to Float!"

    integerOf (f : %) : Integer ==
      integer? f => f.inum
      error "Cannot coerce to Integer!"

    stringOf (f : %) : String ==
      string? f => f.str
      error "Cannot coerce to String!"

    symbolOf (f : %) : Symbol ==
      symbol? f => f.sym
      error "Cannot coerce to Symbol!"

    listOf (f : %) : LST ==
      list? f => f.list
      error "Cannot coerce to List(PrintableForm)!"

    convert(sex : SExpression) ==
      float? sex => [convert(float sex)]
      integer? sex => [integer sex]
      string? sex => [string sex]
      symbol? sex => [symbol sex]
      list? sex => paren spaces [convert e for e in destruct sex]

    mkCmd : (CMDCODE, %) -> %
    mkCmd (code, form) == [[code, form]]$Rep

    mkLst : (LSTCODE, List(%)) -> %
    mkLst (code, forms) == [[code, forms]]$Rep

    hconcat l == mkLst ("hconcat", l)
    vconcat l == mkLst ("vconcat", l)
    sepBy(s, l) == mkLst (s, l)
    pile l ==
      #l = 1 => first l
      vconcat [first l, indent(2, vconcat rest l)]

    string f == hconcat ["_"" :: %, f, "_"" :: %]
    symbol f == hconcat ["'|" :: %, f, "|" :: %]
    paren (f : %) == paren [f]
    brace (f : %) == brace [f]
    bracket (f : %) == bracket [f]
    paren (l : List(%)) == hconcat ["(" :: %, sepBy(", " :: %, l), ")" :: %]
    brace (l : List(%)) == hconcat ["{" :: %, sepBy(", " :: %, l), "}" :: %]
    bracket (l : List(%)) == hconcat ["[" :: %, sepBy(", " :: %, l), "]" :: %]
    spaces l == sepBy(" " :: %, l)
    hspace n == new(n, char " ") :: %

    black f == mkCmd (["black"], f)
    blue f == mkCmd (["blue"], f)
    cyan f == mkCmd (["cyan"], f)
    green f == mkCmd (["green"], f)
    magenta f == mkCmd (["magenta"], f)
    red f == mkCmd (["red"], f)
    white f == mkCmd (["white"], f)
    yellow f == mkCmd (["yellow"], f)

    bold f == mkCmd (["bold"], f)
    inverse f == mkCmd (["inverse"], f)
    underline f == mkCmd (["underline"], f)

    indent(n, f) == mkCmd ([["indent", n]], f)
    right(n, f) == mkCmd ([["right", n]], f)
    left(n, f) == mkCmd ([["left", n]], f)
    center(n, f) == mkCmd ([["center", n]], f)

    number i == coerce concat ["#", string i]

    funsig (name, args) ==
      coerce concat [string name, "/", string args]

)abbrev package PRT Printer
Printer() : Exports == Implementation where
  PF ==> PrintableForm
  NNI ==> NonNegativeInteger
  STATE == Record(stream : SExpression,
                  column : Integer,
                  tabwidth : Integer,
                  preindent : Integer,
                  tags : Stack(String))

  Exports ==> with
    print : String -> Void
    print : PF -> Void
    print : List(PF) -> Void

    println : String -> Void
    println : PF -> Void
    println : List(PF) -> Void

  Implementation ==> add
    import Character
    import String

    csi : String -> String
    csi s == concat [char 27 :: String, "[", s]

    p := [_$fricasOutput$Lisp,0,2,0,stack [csi "0m"]]$STATE

    putraw : String -> Void
    putraw s ==
      PRINTEXP(s, p.stream)$Lisp

    putblank : NNI -> Void
    putblank n ==
      print new(n, char " ")

    newline : () -> Void
    newline() ==
      p.column := 0
      putraw(char 10 :: String)

    wrapEsc : (String, PF) -> Void
    wrapEsc (esc, form) ==
      putraw push!(csi esc, p.tags)
      print form
      pop! p.tags
      for esc in reverse members p.tags repeat putraw esc

    width : PF -> NNI
    width f ==
      command? f =>
        cmd := commandOf f
        width cmd.form
      float? f =>
        df := (floatOf f) :: DoubleFloat
        s : String := WRITE_-TO_-STRING(df)$Lisp
        #s
      integer? f =>
        #(string (integerOf f))
      string? f =>
        #(stringOf f)
      symbol? f =>
        #(string (symbolOf f))
      list? f =>
        l := listOf f
        n := #(l.forms)
        n = 0 => 0
        l.code case "vconcat" =>
          "max"/[width f for f in l.forms]
        lw := "+"/[width f for f in l.forms]
        l.code case "hconcat" => lw
        l.code case PF =>
          sw := width (l.code :: PF)
          sw * (n - 1) :: NNI + lw

    print(s : String) ==
      if p.column = 0 and p.preindent > 0 then
        p.column := p.column + p.preindent
        putraw new(p.preindent :: NNI, char " ")
      p.column := p.column + #s
      putraw s

    print (l : List(PF)) ==
      for f in l repeat
        print f 

    print (f : PF) ==
      command? f =>
        cmd := commandOf f

        cmd.code case font =>
          fc := cmd.code.font
          fc case "bold" => wrapEsc("1m", cmd.form)
          fc case "underline" => wrapEsc("4m", cmd.form)
          fc case "inverse" => wrapEsc("7m", cmd.form)
          fc case "black" => wrapEsc("30m", cmd.form)
          fc case "red" => wrapEsc("31m", cmd.form)
          fc case "green" => wrapEsc("32m", cmd.form)
          fc case "yellow" => wrapEsc("33m", cmd.form)
          fc case "blue" => wrapEsc("34m", cmd.form)
          fc case "magenta" => wrapEsc("35m", cmd.form)
          fc case "cyan" => wrapEsc("36m", cmd.form)
          fc case "white" => wrapEsc("37m", cmd.form)

        cmd.code case justify =>
          jc := cmd.code.justify.fn
          n := cmd.code.justify.width
          jc case "indent" =>
            old := p.preindent 
            p.preindent := p.preindent + n
            print cmd.form
            p.preindent := old
          d := n - width cmd.form
          jc case "left" =>
            print cmd.form
            if d > 0 then
              putblank (d :: NNI)
          jc case "right" =>
            if d > 0 then
              putblank (d :: NNI)
            print cmd.form
          jc case "center" =>
            ld := d quo 2
            rd := d - ld
            if ld > 0 then
              putblank (ld :: NNI)
            print cmd.form
            if rd > 0 then
              putblank (rd :: NNI)

      float? f =>
        df := (floatOf f) :: DoubleFloat
        s : String := WRITE_-TO_-STRING(df)$Lisp
        print s

      integer? f =>
        print string (integerOf f)

      string? f =>
        print (stringOf f)

      symbol? f =>
        print string (symbolOf f)

      list? f =>
        l := listOf f
        l.code case "vconcat" =>
          for f in l.forms repeat println f
        l.code case "hconcat" =>
          for f in l.forms repeat print f
        l.code case PF =>
          s := l.code :: PF
          empty? l.forms => "easter egg!!"
          print first l.forms
          for f in rest l.forms repeat
            print s
            print f

    println (s : String) ==
      print s
      newline()

    println (l : List(PF)) ==
      println spaces l

    println (f : PF) ==
      print f
      if p.column > 0 then newline()

)abbrev package PRTTEST PrinterTest
PrinterTest() : Exports == Implementation where
  PF ==> PrintableForm

  Exports ==> with
    test : () -> Void

  Implementation ==> add
    import Printer

    test () ==
      println pile([3.14 :: PF,
                    (-2 :: Integer) :: PF,
                    indent(2, vconcat(["indented two lines" :: PF,
                                       symbol ("a symbol" :: Symbol :: PF)])),
                    spaces ["brown" :: PF, "fox" :: PF, "lazy" :: PF, "dog" :: PF]])
      println spaces [hconcat ["sqrt" :: PF, paren(2 :: PF)], "=" :: PF, sqrt(2.0) :: PF]
      println vconcat([hconcat ["|" :: PF, right(40, "right" :: PF), "|" :: PF],
                       hconcat ["|" :: PF, left(40, "left" :: PF), "|" :: PF],
                       hconcat ["|" :: PF, center(40, "center" :: PF), "|" :: PF]])
      println string ("a string of characters in double quotes" :: PF)
      println spaces [inverse ("inverse" :: PF), underline ("underline" :: PF), bold ("bold" :: PF)] 
      println paren ["baz" :: PF, yellow(2 :: PF), 'foobar :: PF]
      println red spaces ["red" :: PF, green("green" :: PF), bold("and red again but bold" :: PF)]

)abbrev package SNTOOLS SpadNodeTools
SpadNodeTools() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> with
    occurs? : (TV, N) -> Boolean
    unbound? : N -> Boolean
    containsWildcard? : N -> Boolean

    freeVars : N -> List(TV)
    refList : N -> List(NR)

    substitute : (N, TV, N) -> N
    substitute : (N, SUBS) -> N

  Implementation ==> add
    import Printer
    import Logger('Term)
    import SpadNode
    import SpadNodeFactory

    occurs? (tvar, n) ==
      import List(N)

      emptyNode? n => false
      integer? n => false
      string? n => false
      symbol? n => false
      marker? n => false

      occurs'? (m : N) : Boolean ==
        occurs?(tvar, m)

      apply? n =>
        app := n :: APP
        any?(occurs'?, [app.function, :app.args])
      assign? n =>
        a := n :: ASS
        any?(occurs'?, [a.lval, a.rval])
      mappingType? n =>
        mt := n :: MT
        any?(occurs'?, [mt.result, :mt.args])
      recordType? n =>
        rt := n :: RT
        any?(occurs'?, [[f] for f in fields(rt)])
      unionType? n =>
        ut := n :: UT
        any?(occurs'?, variants ut)
      sequence? n =>
        seq := n :: SEQ
        any?(occurs'?, seq.list)
      typeDecl? n =>
        td := n :: TD
        occurs'? td.expr or occurs'? td.type
      typeOrigin? n =>
        to := n :: TO
        occurs'? to.expr or occurs'? to.type
      typeGuard? n =>
        tg := n :: TG
        occurs'? tg.expr or occurs'? tg.type
      typeHas? n =>
        te := n :: TEH
        occurs'? te.expr or occurs'? te.type
      typeIs? n =>
        te := n :: TEI
        occurs'? te.expr or occurs'? te.type
      typeValue? n =>
        tv := n :: TVL
        occurs'? tv.type or occurs'? tv.value
      typeVar? n =>
        (n :: TV) = tvar

      fail ["occurs?: case not handled for" :: PF, n :: PF]
      error ""

    unbound? n ==
      import List(N)

      emptyNode? n => true
      integer? n => false
      string? n => false
      symbol? n => false
      typeVar? n => true
      marker? n => false

      apply? n =>
        app := n :: APP
        unbound? app.function or any?(unbound?, app.args)
      assign? n =>
        a := n :: ASS
        any?(unbound?, [a.lval, a.rval])
      recordType? n =>
        rt := n :: RT
        any?(unbound?, [[f] for f in fields rt])
      unionType? n =>
        ut := n :: UT
        any?(unbound?, variants ut)
      mappingType? n =>
        mt := n :: MT
        any?(unbound?, [mt.result, :mt.args])
      sequence? n =>
        seq := n :: SEQ
        any?(unbound?, seq.list)
      typeDecl? n =>
        td := n :: TD
        unbound? td.expr or unbound? td.type
      typeOrigin? n =>
        to := n :: TO
        unbound? to.expr or unbound? to.type
      typeGuard? n =>
        tg := n :: TG
        unbound? tg.expr or unbound? tg.type
      typeHas? n =>
        te := n :: TEH
        unbound? te.expr or unbound? te.type
      typeIs? n =>
        te := n :: TEI
        unbound? te.expr or unbound? te.type
      typeValue? n =>
        tv := n :: TVL
        unbound? tv.type or unbound? tv.value

      fail ["unbound?: case not handled for" :: PF, n :: PF]
      error ""

    containsWildcard? n ==
      import List(N)

      emptyNode? n => false
      integer? n => false
      string? n => false
      symbol? n => false
      marker? n => true
      typeVar? n => false

      apply? n =>
        app := n :: APP
        any?(containsWildcard?, [app.function, :app.args])
      recordType? n =>
        rt := n :: RT
        any?(containsWildcard?, [[f] for f in fields rt])
      unionType? n =>
        ut := n :: UT
        any?(containsWildcard?, variants ut)
      mappingType? n =>
        mt := n :: MT
        any?(containsWildcard?, [mt.result, :mt.args])
      sequence? n =>
        seq := n :: SEQ
        any?(containsWildcard?, seq.list)
      typeDecl? n =>
        td := n :: TD
        containsWildcard? td.expr or containsWildcard? td.type
      typeOrigin? n =>
        to := n :: TO
        containsWildcard? to.expr or containsWildcard? to.type
      typeValue? n =>
        tv := n :: TVL
        containsWildcard? tv.type or containsWildcard? tv.value

      fail ["containsWildcard?: case not handled for" :: PF, n :: PF]
      error ""

    freeVars n ==
      import List(N)

      emptyNode? n => []
      integer? n => []
      symbol? n => []
      string? n => []

      apply? n =>
        app := n :: APP
        removeDuplicates("concat"/[freeVars i for i in [app.function, :app.args]])
      mappingType? n =>
        mt := n :: MT
        removeDuplicates("concat"/[freeVars i for i in [mt.result, :mt.args]])
      recordType? n =>
        rt := n :: RT
        removeDuplicates("concat"/[freeVars [i] for i in fields rt])
      unionType? n =>
        ut := n :: UT
        removeDuplicates("concat"/[freeVars i for i in variants ut])
      typeVar? n => [n :: TV]
      typeDecl? n =>
        td := n :: TD
        removeDuplicates(concat(freeVars td.type, freeVars td.expr))
      typeOrigin? n =>
        to := n :: TO
        removeDuplicates(concat(freeVars to.type, freeVars to.expr))

      fail ["freeVars: case not handled for" :: PF, n :: PF]
      error ""

    refListRec(n : N) : List(NR) ==
      import List(N)

      emptyNode? n => []
      symbol? n => []
      nodeRef? n => [n :: NR]
      
      apply? n =>
        app := n :: APP
        "concat"/[refListRec n for n in [app.function, :app.args]]
      assign? n =>
        a := n :: ASS
        concat(refListRec a.lval, refListRec a.rval)
      condExpr? n =>
        c := n :: CE
        concat [refListRec c.cond, refListRec c.truebr, refListRec c.falsebr]
      sequence? n =>
        s := n :: SEQ
        "concat"/[refListRec n for n in s.list]
      typeDecl? n =>
        td := n :: TD
        concat(refListRec td.type, refListRec td.expr)
      typeOrigin? n =>
        to := n :: TO
        concat(refListRec to.type, refListRec to.expr)

      fail ["refListRec: case not handled for" :: PF, n :: PF]
      error ""

    refList n ==
      removeDuplicates(refListRec n)

    substitute(n : N, var : TV, term : N) : N ==
      emptyNode? n => n
      integer? n => n
      string? n => n
      symbol? n => n
      marker? n => n

      apply? n =>
        app := n :: APP
        lst := [stripType substitute(k, var, term) for k in [app.function, :app.args]]
        nodeApp(first lst, rest lst)
      assign? n =>
        ass := n :: ASS
        nodeAssign(substitute(ass.lval, var, term),
                   substitute(ass.rval, var, term))
      condExpr? n =>
        ce := n :: CE
        cond := substitute(ce.cond, var, term)
        truebr := substitute(ce.truebr, var, term)
        falsebr := substitute(ce.falsebr, var, term)
        nodeCondExpr(cond, truebr, falsebr)
      function? n =>
        fn := n :: FN
        args := [substitute(arg, var, term) for arg in fn.args]
        type := substitute(fn.type, var, term)
        body := substitute(fn.body, var, term)
        nodeFun(fn.name, args, type, body)
      import? n =>
        im := n :: IM
        nodeImport(substitute(im.type, var, term))
      mappingType? n =>
        mt := n :: MT
        lst := [substitute(k, var, term) for k in [mt.result, :mt.args]]
        nodeMappingType(rest lst, first lst)
      recordType? n =>
        rt := n :: RT
        lst := [[substitute(f.expr, var, term), 
                 substitute(f.type, var, term)]$TD for f in fields rt]
        nodeRecordType(lst)
      unionType? n =>
        ut := n :: UT
        nodeUnionType [substitute(v, var, term) for v in variants ut]
      sequence? n =>
        seq := n :: SEQ
        nodeSeq(seq.kind, [substitute(t, var, term) for t in seq.list])
      typeInfo? n =>
        ti := n :: TI
        nodeTypeInfo(ti.name,
                     [substitute([arg], var, term) :: TD for arg in ti.args],
                     [substitute(hasItem, var, term) for hasItem in ti.hasList],
                     [substitute(c, var, term) for c in ti.constraints],
                     substitute(ti.superType, var, term),
                     substitute([ti.body], var, term) :: SEQ)
      typeDecl? n =>
        td := n :: TD
        nodeTypeDecl(substitute(td.expr, var, term),
                     substitute(td.type, var, term))
      typeGuard? n =>
        tg := n :: TG
        nodeTypeGuard(substitute(tg.expr, var, term),
                      substitute(tg.type, var, term))
      typeHas? n =>
        te := n :: TEH
        nodeTypeHas(substitute(te.expr, var, term),
                    substitute(te.type, var, term))
      typeIs? n =>
        te := n :: TEI
        nodeTypeIs(substitute(te.expr, var, term),
                   substitute(te.type, var, term))
      typeOrigin? n =>
        to := n :: TO
        nodeTypeOrigin(substitute(to.expr, var, term),
                       substitute(to.type, var, term))
      typeValue? n =>
        tv := n :: TVL
        nodeTypeValue(substitute(tv.type, var, term),
                      substitute(tv.value, var, term))
      typeVar? n =>
        if (n :: TV) = var then term else n

      fail ["substitute: case not handled for" :: PF, n :: PF]
      error ""

    substitute(n : N, subs : SUBS) : N ==
      for s in entries subs repeat
        var := s.key
        for term in s.entry repeat
          n := substitute(n, var, term)
      n

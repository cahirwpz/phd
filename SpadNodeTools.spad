)abbrev package SNTVO SpadNodeTypeVarOccurs
SpadNodeTypeVarOccurs() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> SNP with
    occurs? : (N, TV) -> Boolean
    occurs? : (N, List(TV)) -> Boolean

  Implementation ==> add
    ctx : List(TV) := []

    walk (tv : TV) == member?(tv, ctx)

    occurs? (n : N, tv : TV) ==
      ctx := [tv]
      walk n

    occurs? (n : N, tvs : List(TV)) ==
      ctx := tvs
      walk n

)abbrev package SNUNB SpadNodeUnbound
SpadNodeUnbound() : SNP == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    walk (tv : TV) == true
    walk () == true

)abbrev package SNCWILD SpadNodeContainsWildcard
SpadNodeContainsWildcard() : SNP == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    walk (mr : MR) == true

)abbrev package SNSSUB SpadNodeSymbolSubstitute
SpadNodeSymbolSubstitute() : Exports == Implementation where
  SUBS ==> Table(Symbol, N)

)include SpadTypeDefs.inc

  Exports ==> SNR with
    substitute : (N, Symbol, N) -> N
    substitute : (N, SUBS) -> N

  Implementation ==> add
    ctx : SUBS := [[]]

    walk (s : Symbol) : N ==
      r := search(s, ctx)
      r case "failed" => [s]
      r

    substitute (n, sym, term) ==
      ctx := [[[sym, term]]]
      walk n

    substitute (n, subs) ==
      ctx := subs
      walk n

)abbrev package SNTVSUB SpadNodeTypeVarSubstitute
SpadNodeTypeVarSubstitute() : Exports == Implementation where
  SUBS ==> Table(TV, N)

)include SpadTypeDefs.inc

  Exports ==> SNR with
    substitute : (N, TV, N) -> N
    substitute : (N, SUBS) -> N

  Implementation ==> add
    ctx : SUBS := [[]]

    walk (tv : TV) : N ==
      r := search(tv, ctx)
      r case "failed" => [tv]
      r

    substitute (n, var, term) ==
      ctx := [[[var, term]]]
      walk n

    substitute (n, subs) ==
      ctx := subs
      walk n

)abbrev package SNTVSM SpadNodeTypeVarSetMajor
SpadNodeTypeVarSetMajor() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> SNR with
    setMajor : (N, NNI) -> N

  Implementation ==> add
    ctx : NNI := 0

    walk (tv : TV) : N == nodeTypeVar(ctx, tv.minor)

    setMajor (n : N, major : NNI) : N ==
      ctx := major
      walk n

)abbrev package SNCFV SpadNodeCollectFreeVars
SpadNodeCollectFreeVars() : SpadNodeCollect(TV) == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    walk (tv : TV) == [tv]

)abbrev package SNCNR SpadNodeCollectNodeRefs
SpadNodeCollectNodeRefs() : SpadNodeCollect(NR) == Implementation where
)include SpadTypeDefs.inc

  Implementation ==> add
    walk (nr : NR) == [nr]

)abbrev package SNTOOLS SpadNodeTools
SpadNodeTools() : Exports == Implementation where
)include SpadTypeDefs.inc

  Exports ==> with
    occurs? : (TV, N) -> Boolean
    unbound? : N -> Boolean
    containsWildcard? : N -> Boolean

    freeVars : N -> List(TV)
    refList : N -> List(NR)

    substitute : (N, Symbol, N) -> N
    substitute : (N, Table(Symbol, N)) -> N

    substitute : (N, TV, N) -> N
    substitute : (N, Table(TV, N)) -> N
    substitute : (N, SUBS) -> N

    setMajor : (N, NNI) -> N

    merge : List(SUBS) -> SUBS
    coerce : SUBS -> PF

  Implementation ==> add
    import Printer
    import Logger('Term)
    import SpadNode
    import SpadNodeFactory

    occurs? (tv, n) == occurs?(n, tv) $ SpadNodeTypeVarOccurs
    unbound? n == walk(n) $ SpadNodeUnbound
    containsWildcard? n == walk(n) $ SpadNodeContainsWildcard
    freeVars n == collect(n) $ SpadNodeCollectFreeVars
    refList n == collect(n) $ SpadNodeCollectNodeRefs

    substitute(n : N, sym : Symbol, term : N) : N ==
      substitute(n, sym, term) $ SpadNodeSymbolSubstitute

    substitute(n : N, subs : Table(Symbol, N)) : N ==
      substitute(n, subs) $ SpadNodeSymbolSubstitute

    substitute(n : N, var : TV, term : N) : N ==
      substitute(n, var, term) $ SpadNodeTypeVarSubstitute

    substitute(n : N, subs : Table(TV, N)) : N ==
      substitute(n, subs) $ SpadNodeTypeVarSubstitute

    substitute(n : N, subs : SUBS) : N ==
      for s in entries subs repeat
        empty? s.entry => "iterate"
        n := substitute(n, s.key, first s.entry)
      n

    setMajor (n : N, major : NNI) : N ==
      setMajor(n, major) $ SpadNodeTypeVarSetMajor

    merge subsList ==
      merged : SUBS := empty()
      -- merge list for each valid substitution
      for subs in subsList repeat
        for s in entries subs repeat
          merged(s.key) := 
            key?(s.key, merged) =>
              concat(s.entry, merged(s.key))
            s.entry
      -- remove duplicates from term lists
      for s in entries merged repeat
        merged(s.key) := removeDuplicates s.entry
      merged

    coerce (subs : SUBS) : PF ==
      bracket([spaces [s.key :: PF, "=>" :: PF, bracket [t :: PF for t in s.entry]]
               for s in entries subs])

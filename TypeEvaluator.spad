)abbrev package STSYMRPL SpadTreeSymbolReplace
SpadTreeSymbolReplace(ctx : CTX) : WALKER == Implementation where
  N ==> SpadNode
  CTX ==> AssociationList(Symbol, N)
  WALKER ==> SpadTreeWalkerCategory 

  Implementation ==> add
    rewrite (s : Symbol) : N ==
      r := assoc(s, ctx)
      r case "failed" => [s]
      r.entry

)abbrev package FLATDBT FlattenDatabaseType
FlattenDatabaseType() : SpadTreeWalkerCategory == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  CE ==> SpadCondExpr(N)
  TE ==> SpadTypeExpr(N)
  SEQ ==> SpadSequence(N)

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory

    rewrite (app : APP) : N ==
      app.function = ['ATTRIBUTE] => rewrite(first app.args)
      nodeApp(rewrite app.function, [rewrite arg for arg in app.args])

    addTypeGuard(n : N, cond : N) : N ==
      typeGuard? n =>
        tg : TE := coerce(n)
        nodeTypeExpr('_|, tg.expr, nodeApp(['and], [cond, tg.type]))
      nodeTypeExpr('_|, n, cond)

    listOf(n : N) : List(N) ==
      emptyNode? n => []
      sequence? n =>
        s : SEQ := coerce(n)
        s.list
      [n]

    rewrite (cn : CE) : N ==
      c := rewrite cn.cond
      nc := nodeApp(['not], [c])

      tl := [addTypeGuard(n, c) for n in listOf(rewrite cn.truebr)]
      fl := [addTypeGuard(n, nc) for n in listOf(rewrite cn.falsebr)]

      nodeSeq("Body", concat(tl, fl))

    rewrite (seq : SEQ) : N ==
      l : List(N) := []
      for n in seq.list repeat
        n := rewrite n
        emptyNode? n => "iterate"
        sequence? n =>
          s : SEQ := coerce(n)
          l := concat(reverse s.list, l)
        l := [n, :l]
      #l = 1 and seq.kind = "Body" => first l
      nodeSeq(seq.kind, l)

)abbrev domain TYPINF TypeInfo
TypeInfo() : Exports == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  MR ==> SpadMarker(N)
  TE ==> SpadTypeExpr(N)
  MT ==> SpadMappingType(N)
  SEQ ==> SpadSequence(N)
  CACHE ==> AssociationList(APP, %)
  DAASE ==> AssociationList(Symbol, %)

  Exports ==> CoercibleTo(PF) with
    typeInfo : (Symbol, List TE, List N, List N, SEQ) -> %

    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List TE
    elt : (%, "hasList") -> List N 
    elt : (%, "constraints") -> List N
    elt : (%, "body") -> SEQ
    elt : (%, "self") -> APP
    elt : (%, "type") -> N

    typeInfoCacheInit : () -> Void
    typeInfoCacheList : () -> List(APP)

    getTypeInfo : Symbol -> %
    getTypeInfo : APP -> %

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory
    import SpadDatabase
    import SpadCtorModeMap
    import Logger('TypeInfo)
    import TypeUnifier
    import Printer

    Rep := Record(ti_name : Symbol,
                  ti_args : List TE,
                  ti_hasList : List N,
                  ti_constraints : List N,
                  ti_body : SEQ)

    fromDatabase : Symbol -> Union(%, "failed")
    apply : (%, List(N)) -> %
    flatten : % -> %
    evalTypeGuards : % -> %
    eraseConstraints : (%, Boolean) -> %

    cache : CACHE := [[]]
    daase : DAASE := [[]]

    typeInfoCacheInit () ==
      cache := [[]]
      daase := [[]]

    typeInfoCacheList() == keys(cache)

    getTypeInfo(sym : Symbol) : % ==
      ti? := search(sym, daase)
      ti? case % => ti? :: %
      daase(sym) := fromDatabase(sym) :: %

    getTypeInfo(app : APP) : % ==
      ti? := search(app, cache)
      ti? case % => ti? :: %

      debug ["getTypeInfo :" :: PF, bold(app :: PF)]
      validate? := true
      ti! := 
        if app.args = [emptyNode()] then
          validate? := false
          ti := getTypeInfo(app.function :: Symbol)
          flatten(ti)
        else
          ti := getTypeInfo([app.function, [emptyNode()]])
          apply(ti, app.args)

      ti! := evalTypeGuards(ti!)
      cache(app) := ti!
      ti! := eraseConstraints(ti!, validate?)
      info ["addTypeInfo :" :: PF, bold(app :: PF)]
      cache(app) := ti!

    typeInfo(n, al, hl, ct, st) == [n, al, hl, ct, st]$Rep

    elt(x, "name") == x.ti_name
    elt(x, "args") == x.ti_args
    elt(x, "hasList") == x.ti_hasList
    elt(x, "constraints") == x.ti_constraints
    elt(x, "body") == x.ti_body
    elt(x, "self") == [[x.ti_name], [[arg] for arg in x.ti_args]]$APP
    elt(x, "type") == nodeApp([x.ti_name], [arg.expr for arg in x.ti_args])

    coerce x ==
      args := [(typeVar? arg.expr => arg :: PF; arg.expr :: PF) for arg in x.ti_args]
      app := hconcat [x.ti_name :: PF, paren args]
      k : String :=
        x.ti_body.kind case "Join" => "Category"
        x.ti_body.kind case "Domain" => "Domain"
        x.ti_body.kind case "Package" => "Package"
        error "???"
      pile([spaces [app, bold("is" :: PF), k :: PF, bold("defined as:" :: PF)],
            x.ti_body :: PF,
            spaces [bold("has relation:" :: PF), bracket [h :: PF for h in x.ti_hasList]],
            spaces [bold("constraints:" :: PF), bracket [c :: PF for c in x.ti_constraints]]])

    mkvar(s1 : String, s2 : String) : Symbol ==
      concat(s1, s2)$String :: Symbol

    true?(e : N) : Boolean ==
      e = ['true]

    false?(e : N) : Boolean ==
      e = ['false]

    fromDatabase (t : Symbol) : Union(%, "failed") ==
      debug ["fromDatabase :" :: PF, bold(t :: PF)]

      cmm! := safeGetCtorModeMap(t)
      cmm! case "failed" => "failed"
      cmm := cmm! :: SpadCtorModeMap

      ++ Some symbols will be rewritten to type variables.
      ctx := [[]]$AssociationList(Symbol, N)
      ++ "%" => "%0"
      ctx("%" :: Symbol) := typeVar(0)
      ++ "#1" => "%1", "#2" => "%2", ...
      for i in 1..#cmm.args repeat
        ctx(mkvar("#", string i)) := typeVar(i)

      ++ Symbols in SpadNamedType cannot be rewritten to type variable, so just
      ++ change name.
      types := [rewrite(arg.type)$SpadTreeSymbolReplace(ctx) for arg in cmm.args] 
      args := [[':, typeVar(i), typ]$TE for typ in types for i in 1..]

      if cmm.type = nodeApp(['Category], []) then
        ++ "t#1" => "%1", "t#2" => "%2", ...
        for arg in cmm.args for i in 1.. repeat
          ctx(mkvar("t", string arg.name)) := typeVar(i)
        body := getCtorCategory(t)
        cat? := true
      else
        body := cmm.type
        cat? := false

      body := nodeSeq((cat? => "Join"; "Domain"),
                      (sequence? body => (body :: SEQ).list; [body]))
      body := rewrite(body)$SpadTreeSymbolReplace(ctx)
      body := rewrite(body)$FlattenDatabaseType

      typeInfo(cmm.name, args, [], [], body :: SEQ)

    apply(ti : %, values : List(N)) : % ==
      before := bold hconcat [ti.name :: PF, paren [arg :: PF for arg in ti.args]]
      after := bold hconcat [ti.name :: PF, paren [val :: PF for val in values]]

      #values ~= #ti.args =>
        fail(["Wrong number of arguments" :: PF, before, "passed to" :: PF,
              after, "functor!" :: PF])
        error ""
      empty? values => ti

      debug [before, "=>" :: PF, after]

      args' : List(TE) := []
      body' := [ti.body]
      hasList' := ti.hasList
      constraints' :=
        [nodeApp([ti.name], [[arg] for arg in ti.args]), :ti.constraints]

      for arg in ti.args for val in values repeat
        not typeVar? arg.expr =>
          error "Argument has been already applied!"
        var := arg.expr :: MR
        ++ BUG: Fix improper functor application 
        ++ i.e. when List(Integer) is passed instead of List(Integer())
        if symbol? val then
          val := nodeApp(val, [])
        constraints' := [substitute(n, var, val) for n in constraints']
        args' := [[':, val, arg.type]$TE, :args']
        body' := substitute(body', var, val)
        hasList' := [substitute(n, var, val) for n in hasList']

      typeInfo(ti.name, args', hasList', constraints', body' :: SEQ)

    flatten(ti : %) : % ==
      info ["Flatten" :: PF, bold(ti.self :: PF)]

      lst := ti.body.list
      lst' : List(N) := []
      hasLst : AssociationList(APP, N) := [[]]
      constraints := ti.constraints

      while not empty? lst repeat
        (n, lst) := (first lst, rest lst)

        cond := ['true]
        if typeGuard? n then
          tg := n :: TE
          if apply? tg.expr then
            (n, cond) := (tg.expr, tg.type)

        apply? n =>
          n' := if true? cond then n else nodeTypeExpr('_|, n, cond)
          app := n :: APP

          key?(app, hasLst) => 
            true? cond =>
              hasLst(app) := cond
            true? hasLst(app) => "iterate"
            hasLst(app) := nodeApp(['or], [cond, hasLst(app)])

          hasLst(app) := cond
          sym := app.function :: Symbol
          info ["Merge" :: PF, bold(n' :: PF), "with" :: PF, ti.self :: PF]
          ti' := getTypeInfo(sym) :: %
          ti' := apply(ti', app.args)
          constraints := concat(ti'.constraints, constraints)

          -- extend original functor's body with included constructor type
          if true? cond then
            lst := concat(ti'.body.list, lst)
          else
            for e in ti'.body.list repeat
              e' :=
                if apply? e 
                  then nodeTypeExpr('_|, e, cond)
                  else nodeTypeExpr('_$, e, n)
              lst := [e', :lst]

        namedType? n or typeGuard? n or typeOrigin? n =>
          lst' := [n, :lst']

        info ["Flatten" :: PF, n :: PF]
        error "Not handled!"

      hasLst' : List(N) := []

      for hasInfo in entries hasLst repeat
        n' :=
          if true? hasInfo.entry
            then [hasInfo.key]
            else nodeTypeExpr('_|, [hasInfo.key], hasInfo.entry)
        hasLst' := [n', :hasLst']

      for n' in lst' repeat
        if typeOrigin? n' then
          te := n' :: TE
          guard := hasLst(te.type :: APP)
          n' :=
            true? guard => te.expr
            nodeTypeExpr('_|, te.expr, guard)
        lst := [n', :lst]

      typeInfo(ti.name, ti.args, hasLst',
               removeDuplicates constraints,
               [ti.body.kind, lst])

    has?(te : TE, ti : %) : Boolean ==
      te.type = nodeApp(['Type], []) => true
      te.expr = typeVar(0) or te.expr = ti.type =>
        member?(te.type, ti.hasList)
      apply? te.expr =>
        app := te.expr :: APP
        sequence? te.type =>
          seq := te.type :: SEQ
          "and"/[has?(['has, te.expr, typ]$TE, ti) for typ in seq.list]
        if app.function ~= [ti.name] then
          ti := getTypeInfo(app)
        member?(te.type, ti.hasList)
      false

    evalGuard(n : N, ti : %) : N ==
      debug ["evalGuard" :: PF, bold(n :: PF)]
      typeExpr? n =>
        te := n :: TE
        te.kind = 'has and has?(te, ti) => ['true]
        n
      apply? n =>
        app := n :: APP
        lst := [evalGuard(arg, ti) for arg in app.args]
        app.function = ['and] =>
          any?(false?, lst) => ['false]
          lst := remove(true?, lst)
          #lst = 0 => ['true]
          #lst = 1 => first lst
          nodeApp(['and], lst)
        app.function = ['or] =>
          any?(true?, lst) => ['true]
          lst := remove(false?, lst)
          #lst = 0 => ['false]
          #lst = 1 => first lst
          nodeApp(['or], lst)
        app.function = ['not] and #app.args = 1 =>
          n' := evalGuard(first app.args, ti)
          true? n' => ['false]
          n
        fail ["evalGuard" :: PF, bold(n :: PF)]
        error "Not handled!"
      n

    eraseConstraints(ti : %, validate : Boolean) : % ==
      info ["Check type constraints" :: PF, bold(ti.self :: PF)]

      appliesCleanly(n : N) : Boolean ==
        app := n :: APP
        "and"/[has?(m :: TE, ti) for m in app.args]

      constraints' := remove(appliesCleanly, ti.constraints)

      validate and not empty? constraints' =>
        fmtarg(n : N) : PF ==
          te := n :: TE
          has?(te, ti) => te.expr :: PF
          bold(red(te.expr :: PF))

        fmterr(n : N) : PF ==
          te := n :: TE
          spaces [bold(te.expr :: PF), "has no" :: PF, bold(te.type :: PF)]

        fail ["Could not construct type" :: PF, bold(ti.type :: PF), ":" :: PF]

        for c in constraints' for i in 1.. repeat
          app := c :: APP
          typ := hconcat [app.function :: PF, paren [fmtarg arg for arg in app.args]]
          err := [fmterr arg for arg in app.args | not has?(arg :: TE, ti)]
          fail [paren(i :: PF), typ, ":" :: PF, sepBy(", " :: PF, err)]
        error ""

      typeInfo(ti.name, ti.args, ti.hasList, constraints', ti.body)

    evalTypeGuards(ti : %) : % ==
      info ["Evaluate type guards" :: PF, bold(ti.self :: PF)]

      eval(n : N) : N ==
        not typeGuard? n => n
        tg := n :: TE
        type' := evalGuard(tg.type, ti)
        type' = ['true] => tg.expr
        nodeTypeExpr('_|, tg.expr, type')

      hasLst := removeDuplicates map(eval, ti.hasList)
      body := map(eval, ti.body.list)

      typeInfo(ti.name, ti.args, hasLst, ti.constraints, [ti.body.kind, body])

)abbrev package TYPEVALT TypeEvaluatorTest
TypeEvaluatorTest() : Exports == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  NT ==> SpadNamedType(N)
  MR ==> SpadMarker(N)
  FN ==> SpadFunction(N)
  TI ==> TypeInfo

  Exports ==> with
    test1 : () -> Void

  Implementation ==> add
    import Printer
    import SpadNode
    import SpadNodeFactory
    import MainLogger
    import TypeInfo

    test1 ==
      loggerDefaultLevel "debug"
      loggerLevel('Parser, "notice")
      resetTime()

      typeInfoCacheInit()

      --println (getTypeInfo('DictionaryOperations) :: PF)
      --println (getTypeInfo([['Integer], [emptyNode()]]) :: PF)
      --println (getTypeInfo([['Integer], []]) :: PF)
      --println (getTypeInfo('List) :: PF)
      --println (getTypeInfo([['List], [emptyNode()]]) :: PF)
      println (getTypeInfo([['List], [nodeApp(['Integer], [])]]) :: PF)

      ++ test below should fail!
      --println (getTypeInfo([['List], [nodeApp(['BasicType], [])]]) :: PF)

      println ([bold("Types in cache:" :: PF),
                bracket [app :: PF for app in typeInfoCacheList()]])

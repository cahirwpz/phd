)abbrev package STSYMRPL SpadTreeSymbolReplace
SpadTreeSymbolReplace(ctx : CTX) : WALKER == Implementation where
  N ==> SpadNode
  CTX ==> AssociationList(Symbol, N)
  WALKER ==> SpadTreeWalkerCategory 

  Implementation ==> add
    rewrite (s : Symbol) : N ==
      r := assoc(s, ctx)
      r case "failed" => [s]
      r.entry

)abbrev package STMSETV SpadTreeMarkerSetVersion
SpadTreeMarkerSetVersion(newver : NNI) : WALKER == Implementation where
  N ==> SpadNode
  MR ==> SpadMarker(N)
  NNI ==> NonNegativeInteger
  WALKER ==> SpadTreeWalkerCategory 

  Implementation ==> add
    rewrite (mr : MR) : N ==
      if mr.kind = 'typevar then
        mr := [mr.id, newver, 'typevar]
      [mr]

)abbrev package FLATDBT FlattenDatabaseType
FlattenDatabaseType() : SpadTreeWalkerCategory == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  CE ==> SpadCondExpr(N)
  TE ==> SpadTypeExpr(N)
  SEQ ==> SpadSequence(N)

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory

    rewrite (app : APP) : N ==
      app.function = ['ATTRIBUTE] => rewrite(first app.args)
      nodeApp(rewrite app.function, [rewrite arg for arg in app.args])

    addTypeGuard(n : N, cond : N) : N ==
      typeGuard? n =>
        tg : TE := coerce(n)
        nodeTypeExpr('_|, tg.expr, nodeApp(['and], [cond, tg.type]))
      nodeTypeExpr('_|, n, cond)

    listOf(n : N) : List(N) ==
      emptyNode? n => []
      sequence? n =>
        s : SEQ := coerce(n)
        s.list
      [n]

    rewrite (cn : CE) : N ==
      c := rewrite cn.cond
      nc := nodeApp(['not], [c])

      tl := [addTypeGuard(n, c) for n in listOf(rewrite cn.truebr)]
      fl := [addTypeGuard(n, nc) for n in listOf(rewrite cn.falsebr)]

      nodeSeq("Body", concat(tl, fl))

    rewrite (seq : SEQ) : N ==
      l : List(N) := []
      for n in seq.list repeat
        n := rewrite n
        emptyNode? n => "iterate"
        sequence? n =>
          s : SEQ := coerce(n)
          l := concat(reverse s.list, l)
        l := [n, :l]
      #l = 1 and seq.kind = "Body" => first l
      nodeSeq(seq.kind, l)

)abbrev domain TYPINF TypeInfo
TypeInfo() : Exports == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  MR ==> SpadMarker(N)
  TE ==> SpadTypeExpr(N)
  MT ==> SpadMappingType(N)
  NT ==> SpadNamedType(N)
  SEQ ==> SpadSequence(N)
  CACHE ==> AssociationList(APP, %)
  DAASE ==> AssociationList(Symbol, %)
  SUBST ==> AssociationList(MR, List(N))

  Exports ==> CoercibleTo(PF) with
    typeInfo : (Symbol, List TE, List N, List N, SEQ) -> %

    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List TE
    elt : (%, "hasList") -> List N 
    elt : (%, "constraints") -> List N
    elt : (%, "body") -> SEQ
    elt : (%, "self") -> APP
    elt : (%, "type") -> N

    typeInfoCacheInit : () -> Void
    typeInfoCacheList : () -> List(APP)

    getTypeInfo : Symbol -> %
    getTypeInfo : APP -> %

  Implementation ==> add
    import SpadNode
    import SpadNodeFactory
    import SpadDatabase
    import SpadCtorModeMap
    import Logger('TypeInfo)
    import TypeUnifier
    import Printer

    Rep := Record(ti_name : Symbol,
                  ti_args : List TE,
                  ti_hasList : List N,
                  ti_constraints : List N,
                  ti_body : SEQ)

    fromDatabase : Symbol -> Union(%, "failed")
    apply : (%, List(N)) -> %
    flatten : % -> %
    evalTypeGuards : % -> %
    eraseConstraints : (%, Boolean) -> %

    cache : CACHE := [[]]
    daase : DAASE := [[]]

    typeInfoCacheInit () ==
      cache := [[]]
      daase := [[]]

    typeInfoCacheList() == keys(cache)

    getTypeInfo(sym : Symbol) : % ==
      ti? := search(sym, daase)
      ti? case % => ti? :: %
      daase(sym) := fromDatabase(sym) :: %

    getTypeInfo(app : APP) : % ==
      ti? := search(app, cache)
      ti? case % => ti? :: %

      notice ["(1) getTypeInfo :" :: PF, bold(app :: PF)]

      validate? := true
      ti! := 
        if app.args = [emptyNode()] then
          validate? := false
          ti := getTypeInfo(app.function :: Symbol)
          flatten(ti)
        else
          ti := getTypeInfo([app.function, [emptyNode()]])
          apply(ti, app.args)

      notice ["(2) getTypeInfo :" :: PF, bold(app :: PF)]

      empty? freeVars [app] =>
        ti! := evalTypeGuards(ti!)
        cache(app) := ti!
        ti! := eraseConstraints(ti!, validate?)
        info ["addTypeInfo :" :: PF, bold(app :: PF)]
        cache(app) := ti!

      ti!

    typeInfo(n, al, hl, ct, st) == [n, al, hl, ct, st]$Rep

    elt(x, "name") == x.ti_name
    elt(x, "args") == x.ti_args
    elt(x, "hasList") == x.ti_hasList
    elt(x, "constraints") == x.ti_constraints
    elt(x, "body") == x.ti_body
    elt(x, "self") == [[x.ti_name], [[arg] for arg in x.ti_args]]$APP
    elt(x, "type") == nodeApp([x.ti_name], [arg.expr for arg in x.ti_args])

    coerce x ==
      args := [arg :: PF for arg in x.ti_args]
      app := hconcat [x.ti_name :: PF, paren args]
      k : String :=
        x.ti_body.kind case "Join" => "Category"
        x.ti_body.kind case "Domain" => "Domain"
        x.ti_body.kind case "Package" => "Package"
        error "???"
      pile([spaces [app, bold("is" :: PF), k :: PF],
            pile [bold("defined as:" :: PF), x.ti_body :: PF],
            pile [bold("has relation:" :: PF), :[h :: PF for h in x.ti_hasList]],
            pile [bold("constraints:" :: PF), :[c :: PF for c in x.ti_constraints]]])

    mkvar(s1 : String, s2 : String) : Symbol ==
      concat(s1, s2)$String :: Symbol

    true?(e : N) : Boolean ==
      e = ['true]

    false?(e : N) : Boolean ==
      e = ['false]

    fromDatabase (t : Symbol) : Union(%, "failed") ==
      debug ["fromDatabase :" :: PF, bold(t :: PF)]

      cmm! := safeGetCtorModeMap(t)
      cmm! case "failed" => "failed"
      cmm := cmm! :: SpadCtorModeMap

      ++ Some symbols will be rewritten to type variables.
      ctx := [[]]$AssociationList(Symbol, N)
      ++ "%" => "%0"
      ctx("%" :: Symbol) := typeVar(0)
      ++ "#1" => "%1", "#2" => "%2", ...
      for i in 1..#cmm.args repeat
        ctx(mkvar("#", string i)) := typeVar(i)

      ++ Symbols in SpadNamedType cannot be rewritten to type variable, so just
      ++ change name.
      types := [rewrite(arg.type)$SpadTreeSymbolReplace(ctx) for arg in cmm.args] 
      args := [[':, typeVar(i), typ]$TE for typ in types for i in 1..]

      if cmm.type = nodeApp(['Category], []) then
        ++ "t#1" => "%1", "t#2" => "%2", ...
        for arg in cmm.args for i in 1.. repeat
          ctx(mkvar("t", string arg.name)) := typeVar(i)
        body := getCtorCategory(t)
        cat? := true
      else
        body := cmm.type
        cat? := false

      body := nodeSeq((cat? => "Join"; "Domain"),
                      (sequence? body => (body :: SEQ).list; [body]))
      body := rewrite(body)$SpadTreeSymbolReplace(ctx)
      body := rewrite(body)$FlattenDatabaseType

      typeInfo(cmm.name, args, [], [], body :: SEQ)

    DelVer := SpadTreeMarkerSetVersion(0)
    AddVer := SpadTreeMarkerSetVersion(1)

    apply(ti : %, values : List(N)) : % ==
      before := bold hconcat [ti.name :: PF, paren [arg :: PF for arg in ti.args]]
      after := bold hconcat [ti.name :: PF, paren [val :: PF for val in values]]

      #values ~= #ti.args =>
        info(ti :: PF)
        fail(["Wrong number of arguments:" :: PF, bold paren [val :: PF for val in values],
              "passed to:" :: PF, before, "functor!" :: PF])
        error ""
      empty? values => ti

      info [before, "~" :: PF, after, "?" :: PF]

      n1 := nodeApp([ti.name], [arg.expr for arg in ti.args])
      n2 := nodeApp([ti.name], values)

      res := unifyType(n1, rewrite(n2)$AddVer)
      failed? res =>
        fail ("unification failed" :: PF)
        error ""

      -- solution for functor argument application problem
      subst := res :: SUBST

      args' := [substitute([arg], subst) :: TE for arg in ti.args]
      body' := substitute([ti.body], subst)
      hasList' := [substitute(hasItem, subst) for hasItem in ti.hasList]
      constraints' :=
        concat(nodeApp([ti.name], [[arg] for arg in args']),
               [substitute(c, subst) for c in ti.constraints])

      args' := [rewrite(arg)$DelVer :: TE for arg in args']
      body' := rewrite(body')$DelVer
      hasList' := [rewrite(hasItem)$DelVer for hasItem in hasList']
      constraints' := [rewrite(con)$DelVer for con in constraints']

      -- BUG: Fix improper functor application. 
      -- i.e. when List(Integer) is passed instead of List(Integer())
      -- however... we don't want to fix "'sym : Symbol" parameter
      --if symbol? val and typ ~= symbolType() then
      --  val := nodeApp(val, [])

      typeInfo(ti.name, args', hasList', constraints', body' :: SEQ)

    flatten(ti : %) : % ==
      info ["Flatten" :: PF, bold(ti.self :: PF)]

      lst := ti.body.list
      lst' : List(N) := []
      hasLst : AssociationList(APP, N) := [[]]
      constraints := ti.constraints

      while not empty? lst repeat
        (n, lst) := (first lst, rest lst)

        cond := ['true]
        if typeGuard? n then 
          tg := n :: TE
          if apply? tg.expr then
            (n, cond) := (tg.expr, tg.type)

        --info pile ["hasLst:" :: PF, :[spaces [e.key :: PF, "=>" :: PF, e.entry :: PF] for e in entries hasLst | not true? e.entry]]

        apply? n =>
          n' := if true? cond then n else nodeTypeExpr('_|, n, cond)
          app := n :: APP

          key?(app, hasLst) => 
            true? cond =>
              hasLst(app) := cond
            true? hasLst(app) => "iterate"
            hasLstVal := hasLst(app)
            condLst : List(N) :=
              apply? hasLstVal =>
                (hasLstVal :: APP).args
              [hasLstVal]
            member?(cond, condLst) => "iterate"
            hasLst(app) := nodeApp(['or], concat(cond, condLst))
            warn (hasLst(app) :: PF)

          hasLst(app) := cond
          sym := app.function :: Symbol
          info ["Merge" :: PF, bold(n' :: PF), "with" :: PF, ti.self :: PF]
          ti' := getTypeInfo(sym) :: %
          ti' := apply(ti', app.args)
          constraints := concat(ti'.constraints, constraints)

          -- extend original functor's body with included constructor type
          if true? cond then
            lst := concat(ti'.body.list, lst)
          else
            for e in ti'.body.list repeat
              e' :=
                apply? e =>
                  nodeTypeExpr('_|, e, cond)
                namedType? e =>
                  nodeTypeExpr('_$, e, n)
                typeGuard? e =>
                  te := e :: TE
                  nodeTypeExpr('_|, te.expr, nodeApp(['and], [cond, te.type]))
                error "Not handled!"
              --notice ["Add:" :: PF, e' :: PF]
              lst := [e', :lst]

        namedType? n or typeGuard? n or typeOrigin? n =>
          lst' := [n, :lst']

        info ["Flatten" :: PF, n :: PF]
        error "Not handled!"

      conv(h : Record(key : APP, entry : N)) : N ==
        true? h.entry => [h.key]
        nodeTypeExpr('_|, [h.key], h.entry)

      hasLst' := [conv(h) for h in entries hasLst]

      attachTypeGuard(m : N) : N ==
        typeOrigin? m =>
          te := m :: TE
          guard := hasLst(te.type :: APP)
          true? guard => te.expr
          nodeTypeExpr('_|, te.expr, guard)
        m

      lst' := map(attachTypeGuard, lst')

      duplicateWithoutGuard?(m : N) : Boolean ==
        typeGuard? m =>
          te := m :: TE
          member?(te.expr, lst')
        false

      lst' := remove(duplicateWithoutGuard?, lst')

      typeInfo(ti.name, ti.args, hasLst',
               removeDuplicates constraints,
               [ti.body.kind, removeDuplicates lst'])

    has?(te : TE, ti : %) : Boolean ==
      te.type = nodeApp(['Type], []) => true
      symbol? te.expr and te.type = symbolType() => true
      integer? te.expr and te.type = integerType() => true
      te.expr = typeVar(0) or te.expr = ti.type =>
        apply? te.type =>
          member?(te.type, ti.hasList)
        fail [te :: PF]
        error "Not handled!"
      apply? te.expr =>
        app := te.expr :: APP
        sequence? te.type =>
          seq := te.type :: SEQ
          "and"/[has?(['has, te.expr, typ]$TE, ti) for typ in seq.list]
        apply? te.type =>
          te.type = te.expr => true
          if app.function ~= [ti.name] then
            ti := getTypeInfo(app)
          member?(te.type, ti.hasList)
        namedType? te.type =>
          ti := getTypeInfo(app)
          seq := ti.body :: SEQ
          -- BUG! This will not work without proper(!) % substitution!
          for n in seq.list | namedType? n repeat
            n := substitute(n, typeVar(0) :: MR, te.expr)
            if n = te.type then
              return true
          false
        fail [te :: PF]
        error "Not handled!"
      false

    evalGuard(n : N, ti : %) : N ==
      debug ["evalGuard" :: PF, bold(n :: PF)]
      typeExpr? n =>
        te := n :: TE
        te.kind = 'has and has?(te, ti) => ['true]
        n
      apply? n =>
        app := n :: APP
        lst := [evalGuard(arg, ti) for arg in app.args]
        app.function = ['and] =>
          any?(false?, lst) => ['false]
          lst := remove(true?, lst)
          #lst = 0 => ['true]
          #lst = 1 => first lst
          nodeApp(['and], lst)
        app.function = ['or] =>
          any?(true?, lst) => ['true]
          lst := remove(false?, lst)
          #lst = 0 => ['false]
          #lst = 1 => first lst
          nodeApp(['or], lst)
        app.function = ['not] and #app.args = 1 =>
          n' := evalGuard(first app.args, ti)
          true? n' => ['false]
          n
        fail ["evalGuard" :: PF, bold(n :: PF)]
        error "Not handled!"
      n

    eraseConstraints(ti : %, validate : Boolean) : % ==
      info ["Check type constraints" :: PF, bold(ti.self :: PF)]

      appliesCleanly(n : N) : Boolean ==
        app := n :: APP
        "and"/[has?(m :: TE, ti) for m in app.args]

      constraints' := remove(appliesCleanly, ti.constraints)

      validate and not empty? constraints' =>
        fmtarg(n : N) : PF ==
          te := n :: TE
          has?(te, ti) => te.expr :: PF
          bold(red(te.expr :: PF))

        fmterr(n : N) : PF ==
          te := n :: TE
          spaces [bold(te.expr :: PF), "has no" :: PF, bold(te.type :: PF)]

        info (ti :: PF)

        fail ["Could not construct type" :: PF, bold(ti.type :: PF), ":" :: PF]

        for c in constraints' for i in 1.. repeat
          app := c :: APP
          typ := hconcat [app.function :: PF, paren [fmtarg arg for arg in app.args]]
          err := [fmterr arg for arg in app.args | not has?(arg :: TE, ti)]
          fail [paren(i :: PF), typ, ":" :: PF, sepBy(", " :: PF, err)]
        error ""

      typeInfo(ti.name, ti.args, ti.hasList, constraints', ti.body)

    evalTypeGuards(ti : %) : % ==
      info ["Evaluate type guards" :: PF, bold(ti.self :: PF)]

      eval(n : N) : N ==
        not typeGuard? n => n
        tg := n :: TE
        info (tg :: PF)
        type' := evalGuard(tg.type, ti)
        type' = ['true] => tg.expr
        nodeTypeExpr('_|, tg.expr, type')

      hasLst := removeDuplicates map(eval, ti.hasList)
      body := map(eval, ti.body.list)

      typeInfo(ti.name, ti.args, hasLst, ti.constraints, [ti.body.kind, body])

)abbrev package TYPEVALT TypeEvaluatorTest
TypeEvaluatorTest() : Exports == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  NT ==> SpadNamedType(N)
  MR ==> SpadMarker(N)
  FN ==> SpadFunction(N)
  TI ==> TypeInfo

  Exports ==> with
    test1 : () -> Void
    test2 : () -> Void
    test3 : () -> Void
    test4 : () -> Void

    fail1 : () -> Void
    fail2 : () -> Void

  Implementation ==> add
    import Printer
    import SpadNode
    import SpadNodeFactory
    import MainLogger
    import TypeInfo

    initTest : () -> Void
    initTest ==
      loggerDefaultLevel "info"
      loggerLevel('Parser, "notice")
      resetTime()
      typeInfoCacheInit()

    printTypeInfoCache : () -> Void
    printTypeInfoCache ==
      println([bold("Types in cache:" :: PF),
               bracket [app :: PF for app in typeInfoCacheList()]])

    test1 ==
      initTest()

      -- simple DAASE lookup
      println (getTypeInfo('unitsKnown) :: PF)
      println (getTypeInfo('SetCategory) :: PF)
      println (getTypeInfo('DictionaryOperations) :: PF)
      println (getTypeInfo('UnivariatePuiseuxSeries) :: PF)

      println (getTypeInfo('Integer) :: PF)
      println (getTypeInfo('List) :: PF)
      println (getTypeInfo('Fraction) :: PF)
      println (getTypeInfo('Expression) :: PF)

      printTypeInfoCache()

    test2 ==
      initTest()

      -- emptyNode() passed as a list of parameters to a functor prevents
      -- constrains evaluation

      -- type flattening, type constrains are left unevaluated
      println (getTypeInfo([['Integer], [emptyNode()]]) :: PF)
      println (getTypeInfo([['List], [emptyNode()]]) :: PF)
      println (getTypeInfo([['Fraction], [emptyNode()]]) :: PF)
      println (getTypeInfo([['Expression], [emptyNode()]]) :: PF)
      println (getTypeInfo([['UnivariateTaylorSeries], [emptyNode()]]) :: PF)
      println (getTypeInfo([['ExponentialExpansion], [emptyNode()]]) :: PF)

      printTypeInfoCache()

    test3 ==
      initTest()

      -- type flattening, type contrains evaluation
      println (getTypeInfo([['Integer], []]) :: PF)
      println (getTypeInfo([['Float], []]) :: PF)
      println (getTypeInfo([['Symbol], []]) :: PF)
      println (getTypeInfo([['List], [nodeApp(['Integer], [])]]) :: PF)
      println (getTypeInfo([['Fraction], [nodeApp(['Integer], [])]]) :: PF)
      println (getTypeInfo([['Expression], [nodeApp(['Integer], [])]]) :: PF)
      println (getTypeInfo([['NonNegativeInteger], []]) :: PF)

      printTypeInfoCache()

    test4 ==
      initTest()

      println (getTypeInfo([['UnivariateTaylorSeries], [integerType(), ['x]$N, [2]$N]]) :: PF)

      printTypeInfoCache()

    -- Should I consider following case:
    -- typeAny() "%any" passed as a parameter to a functor prevents contraint
    -- evaluation that involves the parameter

    fail1 ==
      initTest()

      -- wrong number of arguments => should fail!
      println (getTypeInfo([['List], []]) :: PF)

    fail2 ==
      initTest()

      -- wrong type parameter => should fail!
      println (getTypeInfo([['List], [nodeApp(['BasicType], [])]]) :: PF)

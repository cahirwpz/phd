)abbrev package TUNIFY TypeUnifier
TypeUnifier() : Exports == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  MT ==> SpadMappingType(N)
  NT ==> SpadNamedType(N)
  MR ==> SpadMarker(N)
  SEQ ==> SpadSequence(N)
  RT ==> SpadRecordType(N)
  TE ==> SpadTypeExpr(N)
  UT ==> SpadUnionType(N)
  SUBST ==> AssociationList(MR, List(N))
  P ==> Record(t1 : N, t2 : N)
  URES ==> Union(SUBST, "failed")

  Exports ==> with
    failed? : URES -> Boolean 

    occurs? : (MR, N) -> Boolean
    unbound? : N -> Boolean
    containsWildcard? : N -> Boolean

    freeVars : N -> List(MR)
    refList : N -> List(MR)

    substitute : (N, MR, N) -> N
    substitute : (N, SUBST) -> N

    unifyType : (N, N) -> URES
    unifyTypeList : List(P) -> URES

    matches? : (N, List(N)) -> Boolean
    findMatches : (List(N), List(N)) -> Record(terms : List(N), subst : SUBST)

  Implementation ==> add
    import SpadNode
    import Printer
    import SpadNodeFactory
    import Logger('Unify)

    convert : SUBST -> PF
    convert subst ==
      vconcat [spaces [s.key :: PF, "=>" :: PF, bracket [t :: PF for t in s.entry]] for s in entries subst]

    failed? t == t case "failed"

    occurs? (tvar, n) ==
      import List(N)

      emptyNode? n => false
      string? n => false
      symbol? n => false
      typeAny? n => false

      apply? n =>
        app := n :: APP
        any?(m +-> occurs?(tvar, m), [app.function, :app.args])
      mappingType? n =>
        mt := n :: MT
        any?(m +-> occurs?(tvar, m), [mt.type, :mt.args])
      namedType? n =>
        nt := n :: NT
        occurs?(tvar, nt.type)
      recordType? n =>
        rt := n :: RT
        any?(m +-> occurs?(tvar, m), [f.type for f in rt.fields])
      unionType? n =>
        ut := n :: UT
        any?(m +-> occurs?(tvar, m), ut.variants)
      typeOrigin? n =>
        te := n :: TE
        occurs?(tvar, te.expr) or occurs?(tvar, te.type)
      typeVar? n =>
        (n :: MR) = tvar

      fail ["occurs?: case not handled for" :: PF, n :: PF]
      error ""

    unbound? n ==
      import List(N)

      emptyNode? n => true
      string? n => false
      symbol? n => false
      typeAny? n => false
      typeVar? n => true

      apply? n =>
        app := n :: APP
        any?(unbound?, [app.function, :app.args])
      namedType? n =>
        nt := n :: NT
        unbound? nt.type
      recordType? n =>
        rt := n :: RT
        any?(unbound?, [f.type for f in rt.fields])
      unionType? n =>
        ut := n :: UT
        any?(unbound?, ut.variants)
      mappingType? n =>
        mt := n :: MT
        any?(unbound?, [mt.type, :mt.args])
      typeOrigin? n =>
        te := n :: TE
        unbound? te.expr or unbound? te.type

      fail ["unbound?: case not handled for" :: PF, n :: PF]
      error ""

    containsWildcard? n ==
      import List(N)

      emptyNode? n => false
      string? n => false
      symbol? n => false
      typeAny? n => true
      typeVar? n => false

      apply? n =>
        app := n :: APP
        any?(containsWildcard?, [app.function, :app.args])
      namedType? n =>
        nt := n :: NT
        containsWildcard? nt.type
      recordType? n =>
        rt := n :: RT
        any?(containsWildcard?, [f.type for f in rt.fields])
      unionType? n =>
        ut := n :: UT
        any?(containsWildcard?, ut.variants)
      mappingType? n =>
        mt := n :: MT
        any?(containsWildcard?, [mt.type, :mt.args])
      typeOrigin? n =>
        te := n :: TE
        containsWildcard? te.expr or containsWildcard? te.type

      fail ["containsWildcard?: case not handled for" :: PF, n :: PF]
      error ""

    freeVars n ==
      import List(N)

      integer? n => []
      symbol? n => []

      apply? n =>
        app := n :: APP
        "concat"/[freeVars i for i in [app.function, :app.args]]
      mappingType? n =>
        mt := n :: MT
        "concat"/[freeVars i for i in [mt.type, :mt.args]]
      typeVar? n => [n :: MR]
      typeExpr? n =>
        te := n :: TE
        concat(freeVars te.type, freeVars te.expr)

      fail ["freeVars: case not handled for" :: PF, n :: PF]
      error ""

    refListRec(n : N) : List(MR) ==
      import List(N)

      emptyNode? n => []
      symbol? n => []
      nodeRef? n => [n :: MR]
      
      apply? n =>
        app := n :: APP
        "concat"/[refListRec n for n in [app.function, :app.args]]
      assign? n =>
        a := n :: ASS
        concat(refListRec a.lval, refListRec a.rval)
      condExpr? n =>
        c := n :: CE
        concat [refListRec c.cond, refListRec c.truebr, refListRec c.falsebr]
      sequence? n =>
        s := n :: SEQ
        "concat"/[refListRec n for n in s.list]
      typeExpr? n =>
        te := n :: TE
        concat(refListRec te.type, refListRec te.expr)

      fail ["refListRec: case not handled for" :: PF, n :: PF]
      error ""

    refList n ==
      removeDuplicates(refListRec n)

    substitute(n : N, var : MR, term : N) : N ==
      emptyNode? n => n
      string? n => n
      symbol? n => n
      typeAny? n => n

      apply? n =>
        app := n :: APP
        lst := [substitute(k, var, term) for k in [app.function, :app.args]]
        nodeApp(first lst, rest lst)
      mappingType? n =>
        mt := n :: MT
        lst := [substitute(k, var, term) for k in [mt.type, :mt.args]]
        nodeMappingType(rest lst, first lst)
      namedType? n =>
        nt := n :: NT
        nodeNamedType(nt.name, substitute(nt.type, var, term))
      recordType? n =>
        rt := n :: RT
        lst := [[f.name, substitute(f.type, var, term)]$NT for f in rt.fields]
        nodeRecordType(lst)
      unionType? n =>
        ut := n :: UT
        nodeUnionType [substitute(v, var, term) for v in ut.variants]
      typeOrigin? n =>
        te := n :: TE
        expr := substitute(te.expr, var, term)
        type := substitute(te.type, var, term)
        nodeTypeExpr(te.kind, expr, type)
      typeVar? n =>
        if (n :: MR) = var then term else n

      fail ["substitute: case not handled for" :: PF, n :: PF]
      error ""

    substitute(n : N, subst : SUBST) : N ==
      for s in entries subst repeat
        var := s.key
        for term in s.entry repeat
          n := substitute(n, var, term)
      n

    mergeSubstitutions(substitutionsList : List(SUBST)) : SUBST ==
      merged : SUBST := [[]]
      -- merge list for each valid substitution
      for substitutions in substitutionsList repeat
        for s in entries substitutions repeat
          merged(s.key) := 
            key?(s.key, merged) =>
              concat(s.entry, merged(s.key))
            s.entry
      -- remove duplicates from term lists
      for s in entries merged repeat
        merged(s.key) := removeDuplicates s.entry
      merged

    unifyType(n1 : N, n2 : N) : URES ==
      debug [brace(n1 :: PF), "~" :: PF, brace(n2 :: PF)]

      -- left or right node is a type variable => just generate a substitution
      typeVar? n1 and typeVar? n2 =>
        mr1 := n1 :: MR
        mr2 := n2 :: MR
        mr1 = mr2 => [[]]
        -- always substitute newer variable with older one to avoid (?) cycles
        if mr1.id > mr2.id
          then [[[mr1, [n2]]]]
          else [[[mr2, [n1]]]]
      typeVar? n1 =>
        occurs? (n1 :: MR, n2) => "failed"
        [[[n1 :: MR, [n2]]]]
      typeVar? n2 =>
        occurs? (n2 :: MR, n1) => "failed"
        [[[n2 :: MR, [n1]]]]

      -- type wildcard found? => leave without generating a substitution
      typeAny? n1 or typeAny? n2 => [[]]

      -- both nodes can be represented as lists of terms and variables
      -- so convert them to a pair of lists and perform unification
      mappingType? n1 and mappingType? n2 =>
        mt1 := n1 :: MT
        mt2 := n2 :: MT
        #(mt1.args) ~= #(mt2.args) => "failed"
        pairs : List(P) :=
          [[t1, t2] for t1 in [mt1.type, :mt1.args] for t2 in [mt2.type, :mt2.args]]
        unifyTypeList pairs
      apply? n1 and apply? n2 =>
        app1 := n1 :: APP
        app2 := n2 :: APP
        #(app1.args) ~= #(app2.args) => "failed"
        pairs : List(P) :=
          [[t1, t2] for t1 in [app1.function, :app1.args] for t2 in [app2.function, :app2.args]]
        unifyTypeList pairs
      recordType? n1 and recordType? n2 =>
        r1 := n1 :: RT
        r2 := n2 :: RT
        #(r1.fields) ~= #(r2.fields) => "failed"
        not "and"/[f1.name = f2.name for f1 in r1.fields for f2 in r2.fields] => "failed"
        unifyTypeList [[f1.type, f2.type]$P for f1 in r1.fields for f2 in r2.fields]
      unionType? n1 and unionType? n2 =>
        u1 := n1 :: UT
        u2 := n2 :: UT
        #(u1.variants) ~= #(u2.variants) => "failed"
        unifyTypeList [[v1, v2]$P for v1 in u1.variants for v2 in u2.variants]
      namedType? n1 and namedType? n2 =>
        nt1 := n1 :: NT
        nt2 := n2 :: NT
        nt1.name ~= nt2.name => "failed"
        unifyType(nt1.type, nt2.type)
      typeOrigin? n1 and typeOrigin? n2 =>
        te1 := n1 :: TE
        te2 := n2 :: TE
        unifyTypeList [[te1.type, te2.type]$P, [te1.expr, te2.expr]$P]
      typeOrigin? n1 =>
        te1 := n1 :: TE
        unifyType(te1.expr, n2)
      typeOrigin? n2 =>
        te2 := n2 :: TE
        unifyType(n1, te2.expr)

      -- constants
      symbol? n1 and symbol? n2 and (n1 :: Symbol) = (n2 :: Symbol) => [[]]
      integer? n1 and integer? n2 and (n1 :: Integer) = (n2 :: Integer) => [[]]
      string? n1 and string? n2 and (n1 :: String) = (n2 :: String) => [[]]

      "failed"

    unifyTypeList(pairs : List(P)) : URES ==
      subst : SUBST := [[]]
      while not empty? pairs repeat
        pair := first pairs
        ures := unifyType(pair.t1, pair.t2)
        failed? ures => return "failed"
        subst := concat (subst, ures :: SUBST)
        pairs := [[substitute(pair.t1, subst), substitute(pair.t2, subst)]$P for pair in rest pairs]
      subst

    matches?(term : N, terms : List(N)) : Boolean ==
      any?(t +-> not failed? unifyType(t, term) or term = t, terms)

    findMatches(terms1, terms2) ==
      debug vconcat([pile ["Trying to match:" :: PF, vconcat [t1 :: PF for t1 in terms1]],
                     pile ["with:" :: PF, vconcat [t2 :: PF for t2 in terms2]]])
      terms : List(N) := []
      substList : List(SUBST) := []
      for t1 in terms1 repeat
        for t2 in terms2 repeat
          ures := unifyType(t1, t2)
          failed? ures => "iterate"
          ++ prefer concrete type instead of wildcard
          t := if containsWildcard? t1 then t2 else t1
          ++ Avoid wildcard propagation by removing all substitutions with
          ++ wildcards in them.
          subst : SUBST := [[]]
          for s in entries(ures :: SUBST) repeat
            es := remove(containsWildcard?, s.entry)
            empty? es => "iterate"
            subst(s.key) := es
          terms := [substitute(t, subst), :terms]
          substList := [subst, :substList]
      ++ Remove wildcard if we have more than one match.
      if #terms > 1 then
        terms := [t for t in removeDuplicates terms | not containsWildcard? t]
      subst := mergeSubstitutions substList
      --debug pile ["Substitutions:" :: PF, convert(subst')]
      --debug pile ["Terms:" :: PF, :[t :: PF for t in terms]]
      [terms, subst]

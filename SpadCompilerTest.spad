)abbrev package SCTEST SpadCompilerTest
++ Author: Krystian Baclawski
++ Date Created: December 2013
++ Date Last Updated: January 2014
++ Description:
++ Experimental type checker with bottom-up approach.
SpadCompilerTest() : Exports == Implementation where
  PF ==> PrintableForm
  SEX ==> SExpression

  Exports ==> with
    run : SEX -> SEX
    run2 : SEX -> SEX

  Implementation ==> add
    import Printer 
    import SpadNode
    import SpadTreeMacroExpander
    import SpadTypeNodeArray
    import MainLogger
    import Logger('Main)

    run e ==
      loggerDefaultLevel "debug"
      resetTime()

      -- print (e :: OutputForm)

      -- BUG: type annotation below is necessary otherwise compiler chooses
      -- "parse" function that fails to parse functor
      n : SpadNode := parse e

      n := rewrite(n) $ SpadTreeCleanUp
      println (n :: PF)
      
      init() $ SpadMacroExpander
      n := rewrite(n) $ SpadMacroExpander
      println (n :: PF)
      convert(n)

    run2 e ==
      loggerDefaultLevel "debug"
      loggerLevel('Unify, "info")
      loggerLevel('TypeInfo, "warn")
      loggerLevel('Type, "debug")
      loggerLevel('Parser, "notice")
      loggerLevel('Main, "notice")
      resetTime()

      root : SpadNode := parse e
      info pile ["Parser tree in internal format:" :: PF, root :: PF]

      info ["Running cleanup & macro expander." :: PF]
      root := rewrite(root) $ SpadTreeCleanUp
      init() $ SpadMacroExpander
      root := rewrite(root) $ SpadMacroExpander

      notice pile ["Tree ready for type checking:" :: PF, root :: PF]
      ctx : SpadTypeNodeArray := [[]]
      env : SpadEnvironment := new ()
      tree := walk(root, ctx, env) $ SpadTypeTreeCreator

      not walk(ctx)$SpadTypeTreeChecker =>
        error "Type error detected!"

      root := tree.node
      notice pile ["Final tree with type annotations:" :: PF, root :: PF]
      e := convert(root)
      notice spaces ["Converted the tree to original format." :: PF]
      e

)abbrev package SCTEST SpadCompilerTest
++ Author: Krystian Baclawski
++ Date Created: December 2013
++ Date Last Updated: January 2014
++ Description:
++ Experimental type checker with bottom-up approach.
SpadCompilerTest() : Exports == Implementation where
  PF ==> PrintableForm

  Exports ==> with
    run : SExpression -> Void 
    run2 : SExpression -> Void 

  Implementation ==> add
    import Printer 
    import SpadNode
    import SpadTreeMacroExpander
    import TCNodeArrayOps
    import MainLogger

    run e ==
      loggerDefaultLevel "debug"

      -- print (e :: OutputForm)

      -- BUG: type annotation below is necessary otherwise compiler chooses
      -- "parse" function that fails to parse functor
      n : SpadNode := parse e

      n := rewrite(n) $ SpadTreeCleanUp
      println (n :: PF)
      
      init() $ SpadMacroExpander
      n := rewrite(n) $ SpadMacroExpander
      println (n :: PF)

    run2 e ==
      loggerDefaultLevel "debug"
      loggerLevel('Type, "info")
      loggerLevel('Parser, "notice")

      println (convert(e) :: PF)
      println ""

      n : SpadNode := parse e
      n := rewrite(n) $ SpadTreeCleanUp
      
      init() $ SpadMacroExpander
      n := rewrite(n) $ SpadMacroExpander
      e2 := convert(n)
      println (n :: PF)
      println (convert(e2) :: PF)
      println ""

      narr : TCNodeArray := nodeArray ()
      env : SpadEnvironment := new ()

      walk(n, narr, env) $ SpadTypeChecker

      println (narr :: PF)

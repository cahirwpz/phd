)abbrev domain SPTMAP SpadMappingType
SpadMappingType(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "args") -> List(N)
    elt : (%, "type") -> N
    construct : (List(N), N) -> %
  == add
    Rep := Record(m_args : List(N), m_type : N)

    import ParserTools

    elt(x, "args") == x.m_args
    elt(x, "type") == x.m_type

    construct(al, t) == [al, t]$Rep

    parseFunType : SExpression -> N
    parseFunType s ==
      if firstSymbol? (s, ':) then parse s.3 else parse s
        
    parse ex ==
      sig : List(N) := reverse [ parseFunType e for e in destruct cdr ex ]
      [ reverse(rest sig), first sig ]

    coerce mpt ==
      ts := [t :: OutputForm for t in mpt.args]
      src := if #ts ~= 1 then paren ts else first ts
      hconcat [src, " -> ", mpt.type :: OutputForm]

)abbrev domain SPTSUM SpadSumType
SpadSumType(N : SpadNodeCategory) : Exports == Implementation where
  K ==> Union("Join", "Domain", "Package", "Body")

  Exports ==> ParsableCategory with
    elt : (%, "types") -> List(N)
    elt : (%, "kind") -> K
    construct : (K, List(N)) -> %

  Implementation ==> add
    Rep := Record(s_kind : K, s_types : List(N))

    import ParserTools

    elt(x, "kind") == x.s_kind
    elt(x, "types") == x.s_types

    construct(k, tl) == [k, tl]$Rep

    parse ex ==
      lst :=
        domain? ex or package? ex =>
          -- (CATEGORY domain ...)
          -- (CATEGORY package ...)
          destruct cdr(cdr(ex))
        join? ex or progn? ex =>
          -- (Join ...)
          -- (PROGN ...)
          destruct cdr(ex)

      args : List(N) := [ parse e for e in lst ]

      domain? ex => ["Domain", args]
      package? ex => ["Package", args]
      join? ex => ["Join", args]
      progn? ex => ["Body", args]

    coerce sum ==
      ts := [ t :: OutputForm for t in sum.types ]
      sum.kind case "Join" => hconcat ["Join(", pile ts, ")"]
      pile [hconcat["{", pile ts], "}"]

)abbrev domain SPTNAMED SpadNamedType
SpadNamedType(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "type") -> N
    construct : (Symbol, N) -> %
      ++ construct(name,type)
    construct : Symbol -> %
      ++ construct(name)
  == add
    Rep := Record(n_name : Symbol, n_type : N)

    import SExpression
    import ParserTools

    elt(x, "name") == x.n_name
    elt(x, "type") == x.n_type

    construct(n, t) == [n, t]$Rep
    construct(n) == [n, emptyNode()]$Rep

    parse ex ==
      -- (: field Type)
      var? ex =>
        [symbol ex.2, parseNonNull ex.3]
      symbol? ex =>
        [symbol ex]

      signature? ex =>
        -- (SIGNATURE name (RetType Arg1Type Arg2Type ...))
        -- (SIGNATURE name Type constant)
        res : N := parse car ex.3
        targs : List(N) := if #ex = 3
          then [parse e for e in destruct cdr ex.3]
          else [parse ex.4 ]
        [symbol ex.2, [[targs, res] $ SpadMappingType(N)]]

      error "Cannot parse named type!"

    coerce t ==
      typename : OutputForm := 
        if emptyNode? t.type then "?" else coerce t.type
      hconcat [t.name :: OutputForm, " : ", typename]

)abbrev domain SPTREC SpadRecordType
SpadRecordType(T : SpadNodeCategory) : Exports == Implementation where
  F ==> SpadNamedType(T)

  Exports ==> ParsableCategory with
    elt : (%, "fields") -> List F
    construct : List F -> %

  Implementation ==> add
    Rep := List F

    elt(x, "fields") == x pretend List F

    construct fl == fl pretend %

    parse ex ==
      -- (Record (: field1 Type1) (: field2 Type2) ...)
      construct [parse e for e in destruct cdr ex]

    coerce rect ==
      hconcat ["Record", paren [f :: OutputForm for f in rect]]

)abbrev domain SPTUNION SpadUnionType
SpadUnionType(T : SpadNodeCategory) : Exports == Implementation where
  V ==> Union(T, SpadNamedType(T))

  Exports ==> ParsableCategory with
    elt : (%, "variants") -> List V
    construct : List V -> %

  Implementation ==> add
    Rep := List V

    import ParserTools

    elt(x, "variants") == x pretend List V

    construct fl == fl pretend %

    parseUnionField : SExpression -> V
    parseUnionField s ==
      var? s => construct(symbol s.2, parse s.3) $ SpadNamedType(T)
      (parse s) $ T

    parse ex ==
      -- (Union (: field1 Type1) (: field2 Type2) ...)
      -- (Union Type1 Type2 ...)
      construct [parseUnionField e for e in destruct cdr ex]

    coerce_field : V -> OutputForm
    coerce_field f ==
      f case T => (f :: T) :: OutputForm
      (f :: SpadNamedType(T)) :: OutputForm

    coerce ut ==
      hconcat ["Union", paren [coerce_field v for v in ut.variants]]

)abbrev domain SPIMP SpadImport
++ SPAD domain / category / package import declaration
SpadImport(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "type") -> N
    construct : N -> %
  == add
    import OutputForm

    construct x == x pretend %

    elt (x, "type") == x pretend N

    parse ex ==
      [parse ex.2]

    coerce ex ==
      hconcat ["import ", ex.type :: OutputForm]

)abbrev domain SPASS SpadAssign
SpadAssign(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "lvalue") -> N
    elt : (%, "rvalue") -> N
    construct : (N, N) -> %
  == add
    Rep := Record(lv : N, rv : N)

    elt(x, "lvalue") == x.lv
    elt(x, "rvalue") == x.rv

    construct (lval, rval) == [lval, rval]$Rep

    parse ex ==
      -- (LET expr value)
      construct(parse ex.2, parse ex.3)

    coerce assign ==
      hconcat [assign.lv :: OutputForm, " := ", assign.rv :: OutputForm]

)abbrev domain SPAPP SpadApply
SpadApply(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "function") -> N
    elt : (%, "args") -> List(N)
    construct : (N, List(N)) -> %
  == add
    Rep := Record(a_fn : N, a_args : List(N))

    import String

    elt(x, "function") == x.a_fn
    elt(x, "args") == x.a_args

    construct (fn, lst) == [fn, lst]$Rep

    parse ex ==
      lst : List(N) := [parse e for e in destruct ex]
      [first lst, rest lst]

    binop : List(Symbol) :=
      ['_-, '_+, '_*, '_/, '_^, '_=, '_~_=, '_<, '_>, '_<_=, '_>_=, 'OR, 'AND, 'or, 'and]

    coerce apply ==
      fun := apply.function
      argl := [ a :: OutputForm for a in apply.args ]

      funsym := symbolOf fun
      funsym case "failed" =>
        funof := fun :: OutputForm
        #argl = 0 => funof
        hconcat [paren funof, paren argl]

      funsym = 'QUOTE =>
        hconcat ["'", :argl]
      member?(funsym, ['elt, 'Sel]) =>
        hconcat [first argl, ".", last argl]
      funsym = 'exit =>
        hconcat ["exit{", first argl, "}", "(", last argl, ")"]
      funsym = 'return =>
        hconcat ["return{", first argl, "}", "(", last argl, ")"]
      #argl = 0 and funsym = 'Zero => "0"
      #argl = 0 and funsym = 'One => "1"
      #argl = 2 and member?(funsym, binop) =>
        opstr := (lowerCase (string funsym)) :: Symbol
        paren infix(" ", [argl.1 :: OutputForm,
                          opstr :: OutputForm,
                          argl.2 :: OutputForm])

      -- finally, every other function call
      hconcat [funsym :: OutputForm, paren argl]

      -- handle attribute as functor
      --ftor.name = 'ATTRIBUTE => (first ftor.args) :: OutputForm
      --fname := ftor.name :: OutputForm
      --fargs := [ t :: OutputForm for t in ftor.args ]
      --empty? fargs => fname
      --hconcat [ fname, paren fargs ]

)abbrev domain SPSEG SpadSegment
SpadSegment(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "start") -> N
    elt : (%, "end") -> Union(N, "infinity")
    elt : (%, "step") -> N
    construct : (N, N) -> %
    construct : (N, N, N) -> %
  == add
    Rep := Record(r_start : N, r_end : Union(N, "infinity"), r_step : N)

    elt(x, "start") == x.r_start
    elt(x, "end") == x.r_end
    elt(x, "step") == x.r_step

    construct(f,l,s) == [f,l,s]$Rep
    construct(f,s) == [f,"infinity",s]$Rep

    parse ex ==
      -- (SEGMENT first last)
      construct(parse ex.2, parse ex.3)

    coerce range ==
      (rstart, rend, rstep) := (range.start :: OutputForm,
                                range.end :: OutputForm,
                                range.step :: OutputForm)
      ofs : List OutputForm := [ rstart, ".." ]
      if not(range.end case "infinity") then
        ofs := concat(ofs, [rend])
      i := integerOf range.step
      if (i case Integer) and i ~= 1 then
        ofs := concat(ofs, ["by", rstep])
      infix(" ", ofs)

)abbrev package SPITOR SpadIterator
SpadIterator(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "var") -> Symbol
    elt : (%, "seq") -> N
    construct : (Symbol, N) -> %
  == add
    Rep := Record(i_var : Symbol, i_seq : N)

    elt(x, "var") == x.i_var
    elt(x, "seq") == x.i_seq

    construct(v,s) == [v,s]$Rep

    coerce itor ==
      hconcat ["for ", itor.var :: OutputForm, " in ", itor.seq :: OutputForm]

)abbrev domain SPTEX SpadTypeExpr
SpadTypeExpr(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Symbol
    elt : (%, "expr") -> N
    elt : (%, "type") -> N
    construct : (Symbol, N, N) -> %
  == add
    Rep := Record(t_kind : Symbol, t_expr : N, t_type : N)

    import SExpression
    import ParserTools

    elt(x,"kind") == x.t_kind
    elt(x,"expr") == x.t_expr
    elt(x,"type") == x.t_type

    construct(k,e,t) ==
      operators : List Symbol :=
        ['case, 'has, 'is, 'pretend, ':, '::, '@, '_$]
      not member?(k, operators) =>
        error "Not a type expression operator!"
      [k,e,t]$Rep

    parse ex ==
      if domsel? ex
        then ['_$, parse ex.3, parse ex.2]
        else [symbol ex.1, parse ex.2, parse ex.3]

    coerce ex ==
      infix(" ", [ex.expr :: OutputForm,
                  ex.kind :: OutputForm,
                  ex.type :: OutputForm])

)abbrev domain SPLOOP SpadLoop
SpadLoop(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Union("loop", "collect")
    elt : (%, "itors") -> List SpadIterator(N)
    elt : (%, "guards") -> List N
    elt : (%, "body") -> N
    construct : (Union("loop", "collect"), List SpadIterator(N), List N, N) -> %
  == add
    Rep := 
      Record(lp_kind : Union("loop", "collect"),
             lp_itors : List SpadIterator(N),
             lp_guards : List N,
             lp_body : N)

    import ParserTools
    import OutputForm

    elt(x,"kind") == x.lp_kind
    elt(x,"itors") == x.lp_itors
    elt(x,"guards") == x.lp_guards
    elt(x,"body") == x.lp_body

    construct(k,il,gl,b) == [k,il,gl,b]$Rep

    parse ex ==
      lst := destruct cdr ex
      l_body := parse(last lst) $ N
      lst := reverse(rest(reverse(lst)))

      -- print hconcat [(car ex) :: OutputForm, paren [e :: OutputForm for e in lst]]

      range : SpadSegment(N)
      l_itors : List SpadIterator(N) := []
      l_guards : List N := []

      for e in lst repeat
        -- upewnić się ze strażnikami, w collect też może być while
        itor? e =>
          -- (IN item sequence)
          l_itors := cons([symbol e.2, parse e.3], l_itors)
        step? e =>
          -- (STEP i m k n) -> i := m..n by k
          -- (STEP i m k) -> i := m.. by k
          range : SpadSegment(N) := if #e = 4
            then [parse e.3, parse e.4]
            else [parse e.3, parse e.5, parse e.4]
          l_itors := cons([symbol e.2, construct range], l_itors)
        guard? e or while? e =>
          -- should they be mixed together ?
          -- ('| cond)
          -- (WHILE cond)
          l_guards := cons(parse e.2, l_guards)
        print "------"
        print (e :: OutputForm)
        error "unrecognized loop construct"

      reverse!(l_itors)
      reverse!(l_guards)

      #l_guards > 1 => error "loop: more than one guard!"

      if collect? ex
        then construct("collect", l_itors, l_guards, l_body)
        else construct("loop", l_itors, l_guards, l_body)

    coerce ex ==
      il := [ i :: OutputForm for i in ex.itors ]
      gl := [ infix(" ", ["if", g :: OutputForm]) for g in ex.guards]
      b := ex.body :: OutputForm
      ex.kind case "loop" =>
        if empty? il
          then
            loop_cond := infix(" and ", [g :: OutputForm for g in ex.guards])
            pile([hconcat ["while ", loop_cond],
                  hconcat [hspace 1, "repeat ", b]])
          else
            pile([infix(" ", concat(il, gl)),
                  hconcat [hspace 1, "repeat ", b]])
      ex.kind case "collect" =>
        infix(" ", ["[", b, :concat(il, gl), "]"])

)abbrev domain SPLAM SpadLambda
SpadLambda(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "args") -> List Symbol
    elt : (%, "type") -> N
    elt : (%, "body") -> N
    construct : (List Symbol, N, N) -> %
  == add
    Rep := Record(f_args : List Symbol, f_type : N, f_body : N)

    import ParserTools
    import OutputForm

    elt(x,"args") == x.f_args
    elt(x,"type") == x.f_type
    elt(x,"body") == x.f_body

    construct(al,t,b) == [al,t,b]$Rep

    nameOf : SExpression -> Symbol
    nameOf s == if list? s then symbol s.2 else symbol s

    typeOf : SExpression -> SExpression
    typeOf s == if list? s then s.3 else convert []

    parse ex ==
      -- (+-> arg body)
      not list? ex.2 =>
        sig := convert [convert '_:, convert [], convert []]
        [[symbol ex.2], parse sig, parse ex.3]

      -- (+-> (: (: arg Type) RetType) body) 
      -- (+-> (: (@Tuple (: arg1 Type1) (: arg2 Type2)) RetType) body)
      (ltype, rtype) := destruct(cdr ex.2)

      largs := if tuple? ltype then destruct cdr(ltype) else [ltype]
      lsym := [nameOf arg for arg in largs]
      ltypes := [typeOf arg for arg in largs]

      sig := convert cons(convert '_:, concat(ltypes, [rtype]))

      construct(lsym, parse sig, parse ex.3)

    coerce ex ==
      hconcat(["function ", paren [e :: OutputForm for e in ex.args],
               " : ", ex.type :: OutputForm, " == ", ex.body :: OutputForm])

)abbrev package SPSEQ SpadSequence
SpadSequence(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "kind") -> Union("prog", "list", "tuple")
    elt : (%, "list") -> List N
    construct : (Union("prog", "list", "tuple"), List N) -> %
  == add
    Rep := Record(s_kind : Union("prog", "list", "tuple"), s_list : List N)

    import OutputForm
    import ParserTools

    elt(x, "kind") == x.s_kind
    elt(x, "list") == x.s_list

    construct(k,l) == [k,l]$Rep

    parse ex ==
      content : List N := []

      for e in destruct ex repeat
        var? e =>
          if listof? e.2
            then
              -- (: (LISTOF x y z ...) Type)
              varlst := destruct(cdr e.2)
              for var in varlst repeat
                sexp : N := parse (convert [convert '_:, var, e.3])
                content := [sexp, :content]
            else
              content := [(parse e) $ N, :content]

        content := [(parse e) $ N, :content]

      ["prog", reverse content]

    coerce ex ==
      lst := [ e :: OutputForm for e in ex.list | not emptyNode? e ]
      ex.kind case "prog" => hconcat [hspace 2, pile lst]
      ex.kind case "list" => bracket lst
      ex.kind case "tuple" => paren lst

)abbrev package SPCOND SpadConditional
SpadConditional(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "cond") -> N
    elt : (%, "truebr") -> N
    elt : (%, "falsebr") -> Union(N, "empty")
    construct : (N, N, Union(N, "empty")) -> %
  == add
    Rep := Record(c_cond : N, c_true : N, c_false : Union(N, "empty"))

    import ParserTools
    import OutputForm

    elt(x, "cond") == x.c_cond
    elt(x, "truebr") == x.c_true
    elt(x, "falsebr") == x.c_false

    construct(c, tb, fb) == [c, tb, fb]$Rep

    parse ex ==
      -- (IF condition expr1 expr2)
      -- (IF condition expr 'noBranch)
      -- (IF condition 'noBranch expr)
      (c, l, r) := (ex.2, ex.3, ex.4)
      nobranch? l =>
        pc : N := parse (convert [convert '_not, c])
        [pc, parse r, "empty"]
      nobranch? r =>
        [parse c, parse l, "empty"]
      [parse c, parse l, parse r]

    coerce c ==
      c.falsebr case "empty" =>
        pile([hconcat ["if ", c.cond :: OutputForm],
              hconcat [hspace 1, "then ", c.truebr :: OutputForm]])
      pile([hconcat ["if ", c.cond :: OutputForm],
            hconcat [hspace 1, "then ", c.truebr :: OutputForm],
            hconcat [hspace 1, "else ", c.falsebr :: OutputForm]])

)abbrev package SPFN SpadFunction
++ SPAD function
SpadFunction(N : SpadNodeCategory) : Exports == Implementation where
  ARG ==> Union(String, SpadNamedType(N))

  Exports ==> ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List ARG
    elt : (%, "type") -> N
    elt : (%, "body") -> N
    construct : (Symbol, List(ARG), N, N) -> %
      ++ construct(name,varlist,type,exp)

  Implementation ==> add
    Rep := Record(fn_name : Symbol,
                  fn_args : List ARG,
                  fn_type : N,
                  fn_body : N)

    import OutputForm
    import ParserTools
    import SpadNamedType(N)

    elt(x, "name") == x.fn_name
    elt(x, "args") == x.fn_args
    elt(x, "type") == x.fn_type
    elt(x, "body") == x.fn_body

    construct(fname, fargs, ftype, fbody) == 
      [fname, fargs, ftype, fbody] $ Rep

    parse_arg : (SExpression, SExpression) -> ARG
    parse_arg(s, t) ==
      string? s =>
        string s
      [symbol s, parseNonNull t]

    parse ex ==
      fname := symbol car(ex.2)
      arg_names := destruct cdr(ex.2)
      arg_types := destruct cdr(ex.3)
      fargs := [ parse_arg(s, t) for s in arg_names for t in arg_types ]
      ftype := car ex.3
      fbody := convert [ex.5]
      [fname, fargs, parseNonNull ftype, parse fbody]

    coerce fn ==
      fargs := [ arg :: OutputForm for arg in fn.fn_args ]
      fbody := [ fn.fn_body :: OutputForm ]
      retType := if emptyNode? fn.fn_type
        then "" :: OutputForm
        else hconcat([" : ", fn.fn_type :: OutputForm])
      hconcat([fn.fn_name :: OutputForm,
               paren fargs, retType,
               " == ", pile fbody, ""])

)abbrev package SPMACRO SpadMacro
++ SPAD macro representation
SpadMacro(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List Symbol
    elt : (%, "body") -> N
    construct : (Symbol, List Symbol, N) -> %
      ++ construct(name,args,exp)
  == add
    Rep := Record(md_name : Symbol,
                  md_args : List Symbol,
                  md_body : N)

    import OutputForm
    import ParserTools

    elt(x, "name") == x.md_name
    elt(x, "args") == x.md_args
    elt(x, "body") == x.md_body

    construct(mname, margs, mbody) ==
      [mname, margs, mbody]$Rep

    parse ex ==
      mname := symbol car(ex.2)
      margs := [ symbol s for s in destruct(cdr(ex.2)) ]
      mbody : N := parse ex.5
      [mname, margs, mbody]

    coerce m ==
      margs := 
        if null m.md_args
          then "" :: OutputForm
          else paren [ arg :: OutputForm for arg in m.md_args ]
      hconcat([m.md_name :: OutputForm,
               margs, " ==> ", pile [m.md_body :: OutputForm]])

)abbrev package SPFTOR SpadFunctor
++ SPAD functor representation
SpadFunctor(N : SpadNodeCategory) : ParsableCategory with
    elt : (%, "name") -> Symbol
    elt : (%, "args") -> List SpadNamedType(N)
    elt : (%, "type") -> N
    elt : (%, "extends") -> N
    elt : (%, "capsule") -> N
    construct : (Symbol, List SpadNamedType(N), N, N, N) -> %
  == add
    Rep := Record(f_name : Symbol,
                  f_args : List SpadNamedType(N),
                  f_type : N,
                  f_extends : N,
                  f_capsule : N)

    import OutputForm
    import ParserTools
    import SpadNode

    construct(n,al,t,e,c) == [n,al,t,e,c]$Rep

    elt(x,"name") == x.f_name
    elt(x,"args") == x.f_args
    elt(x,"type") == x.f_type
    elt(x,"extends") == x.f_extends
    elt(x,"capsule") == x.f_capsule

    parse ex ==
      arg_names := destruct cdr(ex.2)
      arg_types := destruct cdr(ex.3)
      fname := symbol car(ex.2)
      ftype := car ex.3
      fbody := ex.5
      fargs : List SpadNamedType(N) :=
        [ [symbol s, parse t] for s in arg_names for t in arg_types ]
      fcapsule := if symbol(car fbody) = 'add then fbody.3 else fbody
      fextends := if symbol(car fbody) = 'add then fbody.2 else convert []
      fcapsule := convert cons(convert 'SEQ, destruct cdr fcapsule)
      [fname, fargs, parse ftype, parseNonNull fextends, parse fcapsule]

    coerce f ==
      blankSeparate(
        [f.f_name :: OutputForm,
         paren [arg :: OutputForm for arg in f.f_args], ":", 
         hconcat [hspace 2, f.f_type :: OutputForm],
         "==", f.f_extends :: OutputForm, "add",
         f.f_capsule :: OutputForm])

)abbrev domain SPNODE SpadNode
++ SPAD generic expression
SpadNode() : SpadNodeCategory == add
    Rep := Union(empty : "$EmptyNode",
                 apply : SpadApply(%),
                 assign : SpadAssign(%),
                 cond : SpadConditional(%),
                 lambda : SpadLambda(%),
                 loop : SpadLoop(%),
                 mapping : SpadMappingType(%),
                 named : SpadNamedType(%),
                 record : SpadRecordType(%),
                 segment : SpadSegment(%),
                 seq : SpadSequence(%),
                 functor : SpadFunctor(%),
                 sfunction : SpadFunction(%),
                 simport : SpadImport(%),
                 smacro : SpadMacro(%),
                 sum : SpadSumType(%),
                 typeexpr : SpadTypeExpr(%),
                 union : SpadUnionType(%),
                 dfloat : DoubleFloat,
                 integer : Integer,
                 string : String,
                 symbol : Symbol)

    import OutputForm
    import SExpression
    import ParserTools

    applyOf n == if n case apply then n.apply else "failed"
    assignOf n == if n case assign then n.assign else "failed"
    conditionalOf n == if n case cond then n.cond else "failed"
    functionOf n == if n case sfunction then n.sfunction else "failed"
    functorOf n == if n case functor then n.functor else "failed"
    importOf n == if n case simport then n.simport else "failed"
    lambdaOf n == if n case lambda then n.lambda else "failed"
    loopOf n == if n case loop then n.loop else "failed"
    macroOf n == if n case smacro then n.smacro else "failed"
    mappingTypeOf t == if t case mapping then t.mapping else "failed"
    namedTypeOf t == if t case named then t.named else "failed"
    recordTypeOf t == if t case record then t.record else "failed"
    segmentOf n == if n case segment then n.segment else "failed"
    sequenceOf n == if n case seq then n.seq else "failed"
    sumTypeOf t == if t case sum then t.sum else "failed"
    typeExprOf n == if n case typeexpr then n.typeexpr else "failed"
    unionTypeOf t == if t case union then t.union else "failed"

    floatOf n == if n case dfloat then n.dfloat else "failed"
    integerOf n == if n case integer then n.integer else "failed"
    symbolOf n == if n case symbol then n.symbol else "failed"
    stringOf n == if n case string then n.string else "failed"

    symbol? n == n case symbol
    sequence? n == n case seq

    emptyNode () == ["$EmptyNode"]$Rep
    emptyNode? n == n case empty

    construct (n : SpadApply(%)) : % == [n]$Rep
    construct (n : SpadAssign(%)) : % == [n]$Rep
    construct (n : SpadConditional(%)) : % == [n]$Rep
    construct (n : SpadFunction(%)) : % == [n]$Rep
    construct (n : SpadFunctor(%)) : % == [n]$Rep
    construct (n : SpadImport(%)) : % == [n]$Rep
    construct (n : SpadLambda(%)) : % == [n]$Rep
    construct (n : SpadLoop(%)) : % == [n]$Rep
    construct (n : SpadMacro(%)) : % == [n]$Rep
    construct (n : SpadSegment(%)) : % == [n]$Rep
    construct (n : SpadSequence(%)) : % == [n]$Rep
    construct (n : SpadTypeExpr(%)) : % == [n]$Rep
    construct (t : SpadMappingType(%)) : % == [t]$Rep
    construct (t : SpadNamedType(%)) : % == [t]$Rep
    construct (t : SpadRecordType(%)) : % == [t]$Rep
    construct (t : SpadSumType(%)) : % == [t]$Rep
    construct (t : SpadUnionType(%)) : % == [t]$Rep

    construct (n : DoubleFloat) : % == [n]$Rep
    construct (n : Integer) : % == [n]$Rep
    construct (n : String) : % == [n]$Rep
    construct (n : Symbol) : % == [n]$Rep

    parseNonNull ex ==
      null? ex => emptyNode()
      parse ex

    parse ex ==
      -- print (hconcat ["expression: ", ex :: OutputForm])

      import? ex =>
        [(parse ex) $ SpadImport(%)]

      seq? ex =>
        -- {sequence of expressions}
        -- (SEQ expr1 expr2 ...)
        [(parse cdr ex) $ SpadSequence(%)]

      tuple? ex =>
        -- {tuple constructor}
        -- (@Tuple expr1 expr2 ...)
        lst : List % := [parse e for e in destruct cdr ex]
        [["tuple", lst] $ SpadSequence(%)]

      construct? ex =>
        lst : List % := [parse e for e in destruct cdr ex]
        [["list", rest lst] $ SpadSequence(%)]

      lambda? ex =>
        [(parse ex) $ SpadLambda(%)]

      functor? ex =>
        [(parse ex) $ SpadFunctor(%)]

      function? ex =>
        [(parse ex) $ SpadFunction(%)]

      macro? ex =>
        [(parse ex) $ SpadMacro(%)]

      (var? ex or case? ex or has? ex or is? ex or pretend? ex or coerce? ex or
       domsel? ex or retsel? ex) => 
        -- {expression with type annotation}
        -- (: expr Type) 
        -- {expression with "case" operator}
        -- (case expr Type)
        -- {expression with "has" operator}
        -- (has expr Type)
        -- {expression with "is" operator}
        -- (is expr Type)
        -- {expression with "pretend" operator}
        -- (pretend expr Type)
        -- {expression with "::" coerce operator}
        -- (:: expr Type)
        -- {expression with "@" return type selection operator}
        -- (@ expr Type)
        -- {expression with "$" domain selection operator}
        -- (Sel expr Type)
        [(parse ex) $ SpadTypeExpr(%)]

      let? ex =>
        [(parse ex) $ SpadAssign(%)]

      ifelse? ex =>
        -- {if-then-else expression of if-then statement}
        [(parse ex) $ SpadConditional(%)]

      collect? ex or loop? ex =>
        [(parse ex) $ SpadLoop(%)]

      mapping? ex => 
        -- var? ex
        [(parse ex) $ SpadMappingType(%)]

      domain? ex or package? ex or join? ex or progn? ex =>
        [(parse ex) $ SpadSumType(%)]

      signature? ex =>
        [(parse ex) $ SpadNamedType(%)]

      record? ex =>
        [(parse ex) $ SpadRecordType(%)]

      union? ex => 
        [(parse ex) $ SpadUnionType(%)]

      list? ex and #ex > 0 =>
        [(parse ex) $ SpadApply(%)]

      string? ex =>
        [string ex]

      symbol? ex =>
        s := symbol ex
        -- BUG: this doesn't work and no warning is issued...
        -- if s = '$ then s := '%
        [if s = '$ then s := coerce "%" else s]

      integer? ex =>
        [integer ex]

      float? ex =>
        [float ex]

      null? ex =>
        [["list", []] $ SpadSequence(%)]

      print "parse $ SpadNode:"
      print (ex :: OutputForm)
      error "SExpression not handled!"

    coerce ex ==
      ex case apply => ex.apply :: OutputForm
      ex case assign => ex.assign :: OutputForm
      ex case cond => ex.cond :: OutputForm
      ex case functor => ex.functor :: OutputForm
      ex case lambda => ex.lambda :: OutputForm
      ex case loop => ex.loop :: OutputForm
      ex case mapping => ex.mapping :: OutputForm
      ex case named => ex.named :: OutputForm
      ex case record => ex.record :: OutputForm
      ex case segment => ex.segment :: OutputForm
      ex case seq => ex.seq :: OutputForm
      ex case sfunction => ex.sfunction :: OutputForm
      ex case simport => ex.simport :: OutputForm
      ex case smacro => ex.smacro :: OutputForm
      ex case sum => ex.sum :: OutputForm
      ex case typeexpr => ex.typeexpr :: OutputForm
      ex case union => ex.union :: OutputForm
      ex case string => ex.string :: OutputForm
      ex case symbol => ex.symbol :: OutputForm
      ex case dfloat => ex.dfloat :: OutputForm
      ex case integer => ex.integer :: OutputForm
      ex case empty => ""

      error "coerce $ SpadNode: variant not handled!"

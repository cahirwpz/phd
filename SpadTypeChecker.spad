)abbrev domain TCNODE TCNode
TCNode() : Exports == Implementation where
  PF ==> PrintableForm
  NNI ==> NonNegativeInteger
  ENV ==> SpadEnvironment
  N ==> SpadNode
  CE ==> SpadCondExpr(N)
  MR ==> SpadMarker(N)
  TE ==> SpadTypeExpr(N)
  SEQ ==> SpadSequence(N)
  SUBST ==> AssociationList(MR, List(N))

  Exports ==> CoercibleTo(PrintableForm) with
    elt : (%, "index") -> NNI
    elt : (%, "node") -> N
    elt : (%, "rule") -> List(N)
    elt : (%, "type") -> N
    elt : (%, "env") -> ENV
    elt : (%, "done") -> Boolean

    setelt! : (%, "rule", List(N)) -> List(N)
    setelt! : (%, "type", N) -> N
    setelt! : (%, "node", N) -> N
    setelt! : (%, "env", ENV) -> ENV
    setelt! : (%, "done", Boolean) -> Boolean

    construct : NNI -> %
    substitute! : (SUBST, %) -> Void
    done? : % -> Boolean

    children : % -> List(NNI)

    nodeRef : % -> N
    typeRef : % -> N

  Implementation ==> add
    Rep := Record(ni_index : NNI,
                  ni_node : N,
                  ni_rule : List(N),
                  ni_type : N,
                  ni_env : ENV,
                  ni_done : Boolean)

    import SpadNode
    import Printer
    import TypeUnifier
    import SpadNodeFactory

    elt (x, "index") == x.ni_index
    elt (x, "node") == x.ni_node
    elt (x, "rule") == x.ni_rule
    elt (x, "type") == x.ni_type
    elt (x, "env") == x.ni_env
    elt (x, "done") == x.ni_done

    setelt! (x, "node", n) ==
      x.ni_node := n
    setelt! (x, "rule", r) ==
      x.ni_rule := r
    setelt! (x, "type", ts) ==
      x.ni_type := ts
    setelt! (x, "env", env) ==
      x.ni_env := env
    setelt! (x, "done", d) ==
      x.ni_done := d

    construct i ==
      [i, emptyNode(), [], emptyNode(), new(), false] $ Rep

    children x ==
      [(r :: MR).id for r in x.rule | nodeRef? r]

    substitute! (subst, x) ==
      x.type := substitute(x.type, subst)

    done? x == x.ni_done

    nodeRef x ==
      nodeRef x.index

    typeRef x ==
      typeVar x.index

    coerceRule (n : N) : PF ==
      condExpr? n =>
        ce := n :: CE
        spaces(["if" :: PF, ce.cond :: PF,
                "then" :: PF, ce.truebr :: PF,
                "else" :: PF, ce.falsebr :: PF])
      n :: PF

    coerce x ==
      done := if done? x then green("(+)" :: PF) else red("(-)" :: PF)
      prefix := hconcat [done, right(4, number(x.index) :: PF)]
      empty? x.rule =>
        node :=
          value? x.node =>
            bold(x.node :: PF)
          typeExpr? x.node and value? (x.node :: TE).expr =>
            bold((x.node :: TE).expr :: PF)
          bold red("?" :: PF)
        spaces [prefix, node, "is" :: PF, bold (x.type :: PF)]
      spaces([prefix, brace [coerceRule r for r in x.rule],
              "is" :: PF, bold (x.type :: PF)])

)abbrev package STFITS SpadTreeFillInTypes
SpadTreeFillInTypes(ns : List(TCNode)) : SpadTreeWalkerCategory == Implementation where
  PF ==> PrintableForm
  N ==> SpadNode
  TE ==> SpadTypeExpr(N)
  NNI ==> NonNegativeInteger

  Implementation ==> add
    import Logger('Fill)

    rewrite (te : TE) : N ==
      te := [te.kind, rewrite te.expr, rewrite te.type]$TE
      not te.kind = '_$ => [te]
      symbol? te.type and (te.type :: Symbol) = ("%" :: Symbol) => te.expr
      typeAny? te.type => te.expr
      mappingType? te.type => te.expr
      [te]

    rewrite (mr : SpadMarker(N)) : N ==
      mr.kind = 'typevar =>
        t := ns(mr.id).type
        typeOrigin? t =>
          te := coerce(t)@TE
          typeOrigin? te.type =>
            te' := coerce(te.type)@TE
            te'.type
          te.type
        t
      mr.kind = 'noderef =>
        rewrite ns(mr.id).node
      error ""

)abbrev package TCNA TCNodeArray
TCNodeArray() : Exports == Implementation where
  NNI ==> NonNegativeInteger
  TCN ==> TCNode
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  ENV ==> SpadEnvironment
  MT ==> SpadMappingType(N)
  MR ==> SpadMarker(N)
  TE ==> SpadTypeExpr(N)
  SEQ ==> SpadSequence(N)
  SUBST ==> AssociationList(MR, List(N))
  URES ==> Union(SUBST, "failed")
  PF ==> PrintableForm

  Exports ==> CoercibleTo(PrintableForm) with
    nodeArray : () -> %
    nodeArray : % -> %

    addNode! : % -> TCN
    addNode! : (%, ENV) -> TCN
    addTypeVar! : % -> N
    addTypeVar! : (%, List(N)) -> N

    nodes : % -> List(TCN)

    checkAndMarkIfDone! : (TCN, %) -> Boolean

    coerce : AssociationList(MR, List(N)) -> PF
    check : % -> Boolean

  Implementation ==> add
    Rep := Record(nodes : FlexibleArray(TCN),
                  counter : NNI,
                  typevars : AssociationList(MR, List(N)))

    import String
    import TCNode
    import SpadNode
    import TypeUnifier
    import SpadNodeFactory
    import Printer
    import Logger('Type)

    nodeArray () ==
      [flexibleArray [], 0, [[]]]

    nodeArray x ==
      [flexibleArray [], x.counter, [[]]]

    coerceTypeVar (tvar : MR, types : List(N)) : PF ==
        ts :=
          #types = 1 => (first types) :: PF
          bracket [t :: PF for t in types]
        spaces [right(4, tvar :: PF), ":" :: PF, ts]

    coerce (typevars : AssociationList(MR, List(N))) : PF ==
      tvs := [coerceTypeVar(tv.key, tv.entry) for tv in reverse entries typevars]
      empty? tvs => "No type variables!" :: PF
      pile ["Type variables :" :: PF, :tvs]

    coerce (x : %) : PF ==
      pile ["Nodes :" :: PF, :[ni :: PF for ni in entries x.nodes]]

    addNode! (x, env) ==
      ni := addNode!(x)
      ni.env := env
      ni

    addNode! x ==
      ni := [#(x.nodes) + 1]
      concat!(x.nodes, ni)
      ni

    addTypeVar! (x, types) ==
      x.counter := x.counter + 1
      tvar := typeVar(x.counter)
      (x.typevars)(tvar :: MR) := types
      tvar

    addTypeVar! (x) ==
      x.counter := x.counter + 1
      tvar := typeVar(x.counter)
      (x.typevars)(tvar :: MR) := [emptyNode()]
      tvar

    node (i : NNI, x : %) : TCN ==
      (x.nodes)(i)

    nodes x ==
      entries x.nodes

    emptyType? (nl : List(N)) : Boolean ==
      #nl = 1 and emptyNode?(first nl)

    fetch (n : N, x : %) : List(N) ==
      not typeVar? n => [n] 
      nl := (x.typevars)(n :: MR)
      emptyType? nl => [n]
      nl

    unknownType? (n : TCN, x : %) : Boolean ==
      ++ checks if type attached to the node has form "%a[?]"
      typeVar? n.type and emptyType? fetch(n.type, x)

    typeInferred? (tvar : MR, x : %) : Boolean ==
      types := (x.typevars)(tvar)
      #types > 1 => false
      not unbound? types.1

    checkAndMarkIfDone! (n, x) ==
      import List(N)
      unbound? n.type => false
      empty? children(n) =>
        n.done := true
      n.done := every?(t +-> not unbound? t, 
                       [node(j, x).type for j in children(n)])

    applyOne! (var : MR, terms : List(N), x : %) : Boolean ==
      debug(["Modyfing" :: PF, var :: PF, "type variable with" :: PF,
             bracket [t :: PF for t in terms]])
      typevars := x.typevars
      -- if type variable has no value then set it to whatever we've inferred
      emptyType? typevars(var) =>
        typevars(var) := terms
        true
      -- unify proposed values with already stored in the variable
      -- store only matching ones (without performing substitutions)
      ms := findMatches(typevars(var), terms)
      not empty? ms.terms => 
        typevars(var) := ms.terms
        true
      false

    apply! (substitutions : SUBST, x : %) : Boolean ==
      empty? substitutions => true
      "and"/[applyOne!(s.key, s.entry, x) for s in entries substitutions]

    nodesMatch! (ln : TCN, rn : TCN, x : %) : Boolean ==
      ++ %a[?] ~ %b[?]
      unknownType?(ln, x) and unknownType?(rn, x) =>
        ures := unifyType(ln.type, rn.type)
        failed? ures => false
        apply!(ures :: SUBST, x)
      ++ %a[?] ~ (%b[t1, t2, ...] | T)
      unknownType?(ln, x) and not unknownType?(rn, x) =>
        applyOne!(ln.type :: MR, [rn.type], x)
      ++ (%a[t1, t2, ...] | T) ~ %b[?]
      not unknownType?(ln, x) and unknownType?(rn, x) =>
        applyOne!(rn.type :: MR, [ln.type], x)
      ++ (%a[t1, t2, ...] | T) ~ (%b[s1, s2, ...] | S)
      ms := findMatches(fetch(ln.type, x), fetch(rn.type, x))
      empty? ms.terms => false
      if typeVar? ln.type and ln.type ~= (first ms.terms) then
        (x.typevars)(ln.type :: MR) := ms.terms
      if typeVar? rn.type and rn.type ~= (first ms.terms) then
        (x.typevars)(rn.type :: MR) := ms.terms
      apply!(ms.subst, x)

    nodeType! (n : TCN, types : List(N), x : %) : Boolean ==
      ++ %a[?] ~ [s1, s2, ...]
      unknownType?(n, x) =>
        applyOne!(n.type :: MR, types, x)
      ++ (%a[t1, t2, ...] | T) ~ [s1, s2, ...]
      ms := findMatches(fetch(n.type, x), types)
      empty? ms.terms => false
      if typeVar? n.type and n.type ~= (first ms.terms) then
        (x.typevars)(n.type :: MR) := ms.terms
      apply!(ms.subst, x)

    -- rewrite all nodes with type that contains given variable
    rewriteNodes! (var : MR, term : N, x : %) : Void ==
      nodes := [n for n in nodes(x) | occurs?(var, n.type)] 
      for n in nodes repeat
        n.type := substitute(n.type, var, term)
        debug (["Rewrote" :: PF, number(n.index) :: PF, "with" :: PF,
                brace spaces [var :: PF, "=>" :: PF, term :: PF]])
      for n in nodes repeat
        checkAndMarkIfDone!(n, x)

    rewriteIfInferred! (n : TCN, x : %) : Boolean ==
      not typeVar? n.type => false
      var := n.type :: MR
      not typeInferred?(var, x) => false
      term := first (x.typevars)(var)
      debug(["Rewriting" :: PF, bold(var :: PF), "to" :: PF, bold(term :: PF),
             "in all type variables." :: PF])
      for tv in entries x.typevars repeat
        tv.entry := [substitute(t, var, term) for t in tv.entry]
      debug ["Removing" :: PF, bold(var :: PF), "type variable." :: PF]
      term := first(remove!(var, x.typevars) :: List(N))
      info (["Type inferred for node" :: PF, number(n.index) :: PF,
             ":" :: PF, bold(term :: PF)])
      rewriteNodes!(var, term, x)
      true

    product (ll : List(List(N))) : List(List(N)) ==
      empty? ll => [[]]
      el := first ll
      pl := product(rest ll)
      concat [[cons(e, p) for p in pl] for e in el]

    inferType2(rule : N, n : TCN, x : %) : Boolean ==
      emptyNode? rule => true
      nodeRef? rule => true

      debug (["Run type inference for" :: PF, number(n.index) :: PF,
              "of" :: PF, n.type :: PF, "type." :: PF])

      apply? rule =>
        r := rule :: APP
        nfun := node((r.function :: MR).id, x) -- function node
        nargs := [node((arg :: MR).id, x) for arg in r.args] -- argument nodes
        fnType := nodeMappingType([narg.type for narg in nargs], n.type)
        --sig := nodeTypeExpr('_$, fnType, typeAny)
        --argslst := product [fetch(narg.type, x) for narg in nargs]
        --sigs2 : List(N) := [[[args, n.type]$MT] for args in argslst]
        nodeType!(nfun, [fnType], x) => true
        
        ++ Don't panic yet! Let's check the environment for 'elt' function.
        eltFunList := [qualifiedType(mm) for mm in getModemap('elt, n.env)]
        fnType := nodeMappingType(cons(nfun.type, [narg.type for narg in nargs]), n.type)
        ms := findMatches(eltFunList, [fnType])
        empty? ms.terms => false
        apply!(ms.subst, x)

      condExpr? rule =>
        r := rule :: CE
        cn := node((r.cond :: MR).id, x) -- condition node
        tn := node((r.truebr :: MR).id, x) -- true branch node
        fn := node((r.falsebr :: MR).id, x) -- false branch node
        not nodeType!(cn, [booleanType], x) => false
        if nodesMatch!(tn, fn, x)
          then nodeType!(n, [tn.type, fn.type], x)
          else nodeType!(n, [voidType], x)

      subType? rule =>
        te := rule :: TE
        mr1 := te.expr :: MR
        mr2 := te.type :: MR
        nodesMatch!(node(mr2.id, x), node(mr1.id, x), x)

      typeOrigin? rule =>
        te := rule :: TE
        fun := node((te.expr :: MR).id, x)
        nodeType!(n, [fun.type], x)

      fail ["inferType: case not handled for" :: PF, rule :: PF]
      error ""

    inferType(ruleList : List(N), n : TCN, x : %) : Boolean ==
      "and"/[inferType2(rule, n, x) for rule in ruleList]

    countProgress (x : %) : Record(a : Integer, b : Integer) ==
      ++ a = number of type variables and nodes to be processed
      ++     (empty type variable counts twice)
      ++ b = sum of types assigned to each type variable
      p := [#(x.typevars), 0]
      for n in entries x.nodes | not done? n repeat
        types : List(N) :=
          not typeVar? n.type => []
          (x.typevars)(n.type :: MR)
        p.a := p.a + 1
        if emptyType? types
          then p.a := p.a + 1
          else p.b := p.b + #types
      p

    check x ==
      q : Queue(TCN) := empty()

      -- initial run => fill up the queue with nodes that aren't done yet
      for n in entries x.nodes repeat 
        --BUG: Each rule attached to a node has to be applied at least once!
        --checkAndMarkIfDone!(n, x)
        if not done? n then
          enqueue!(n, q)

      p := countProgress x
      s := 1 :: NNI

      while p.a > 0 or p.b > 0 repeat
        newQ : Queue(TCN) := empty()

        step := paren (s :: PF)

        ++ perform meta-step
        while not empty? q repeat
          n := dequeue! q
          done? n => "iterate"

          --debug([step, "Queue state" :: PF, "=>" :: PF, number(n.index) :: PF, ":" :: PF,
          --       bracket [number(m.index) :: PF for m in members q]])

          not inferType(n.rule, n, x) =>
            for n' in entries x.nodes repeat
              rewriteIfInferred!(n', x)
            fail pile([spaces ["Type error for node:" :: PF, number(n.index) :: PF],
                       red(n.node :: PF)])
            debug (x :: PF)
            debug (x.typevars :: PF)
            return false

          ++ check if we're done with processing type variable tied to this node
          rewriteIfInferred!(n, x)

          ++ if type is inferred for all dependencies the node itself won't change
          if checkAndMarkIfDone!(n, x) then
            debug ["Processing node" :: PF, number(n.index) :: PF, "completed!" :: PF]
          else
            enqueue!(n, newQ)

        ++ check if during meta-step the problem was reduced compared to
        ++ previous meta-step
        newP := countProgress x
        correct :=
          newP.a < p.a => true
          newP.a = p.a and newP.b < p.b => true
          false
        not correct =>
          fail ("Type checker does not advance by applying known typing rules!" :: PF)
          debug (x :: PF)
          debug (x.typevars :: PF)
          error ""

        ++ setup new meta-step
        p := newP
        q := newQ
        s := s + 1

      info (x :: PF)
      true

)abbrev package STYPCHK SpadTypeChecker
SpadTypeChecker() : Exports == Implementation where
  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  FN ==> SpadFunction(N)
  FT ==> SpadFunctor(N)
  IM ==> SpadImport(N)
  LAM ==> SpadLambda(N)
  IT ==> SpadIterator(N)
  LP ==> SpadLoop(N)
  M ==> SpadMacro(N)
  MT ==> SpadMappingType(N)
  NT ==> SpadNamedType(N)
  RT ==> SpadRecordType(N)
  SEG ==> SpadSegment(N)
  SEQ ==> SpadSequence(N)
  ST ==> SpadSumType(N)
  TE ==> SpadTypeExpr(N)
  UT ==> SpadUnionType(N)
  W ==> SpadWhere(N)
  MR ==> SpadMarker(N)

  NNI ==> NonNegativeInteger
  ENV ==> SpadEnvironment
  TCN ==> TCNode
  CTX ==> TCNodeArray
  SUBST ==> AssociationList(MR, List(N))
  PF ==> PrintableForm

  Exports ==> with
    walk : (N, CTX, ENV) -> TCN

  Implementation ==> add
    import SpadEnvironment
    import SExpression
    import String
    import Symbol
    import TCNode
    import SpadNode
    import SpadNodeFactory
    import Printer
    import PrintableForm
    import TypeUnifier
    import Logger('AST)

    envAddType (t : N, env : ENV) : ENV ==
      notice ["Adding type" :: PF, bold(t :: PF), "to the environment." :: PF]
      if apply? t then
        app := t :: APP
        env := addDomain(app, env)
        for k in app.args repeat
          env := envAddType(k, env)
      if mappingType? t then
        mt := t :: MT
        for k in [mt.type, :mt.args] repeat
          env := envAddType(k, env)
      if recordType? t then
        r := t :: RT
        for f in r.fields repeat
          env := envAddType(f.type, env)
        for f in makeRecordFunList t repeat
          mt := (f :: NT).type :: MT
          env := addModemap(f.name, t, [mt.type, :mt.args], env)
      env

    walkApp (a : APP, ctx : CTX, env : ENV) : TCN ==
      ++ rewrite QUOTE(symbol) to value 'symbol
      a.function = ['QUOTE] and #a.args = 1 =>
        this := addNode!(ctx, env)
        this.type := symbolType
        this.node := first a.args
        this

      debug ["Processing function application." :: PF]

      this := addNode!(ctx, env)
      this.type := addTypeVar!(ctx)

      funExpr := walk(a.function, ctx, env)
      argExprList := [walk(arg, ctx, env) for arg in a.args]

      ++ Add origin to function expression. But... is it really necessary?
      if not(funExpr.node = ['return] or funExpr.node = ['error]) then
        funExpr.node := nodeTypeExpr('_$, funExpr.node, typeRef(funExpr))

      funRef := nodeRef(funExpr)
      argRefList := [nodeRef(expr) for expr in argExprList]

      this.rule := [funRef, :argRefList, nodeApp(funRef, argRefList)]
      this.node :=
        nodeApp(funExpr.node, [argExpr.node for argExpr in argExprList])
      this

    walkAssign (a : ASS, ctx : CTX, env : ENV) : TCN ==
      this := addNode!(ctx)
      this.type := addTypeVar!(ctx)

      varIntro? : Boolean
      if symbol? a.lval then
        s := a.lval :: Symbol
        if emptyNode? getMode(s, env) then
          debug ["Processing fresh assignment" :: PF, string(s :: PF)]
          env := addMode(s, addTypeVar!(ctx), env)
          varIntro? := true
      else
        varIntro? := false
        
      left := walk(a.lval, ctx, env)
      right := walk(a.rval, ctx, env)

      if varIntro? then
        left.node := nodeTypeExpr('_:, left.node, typeRef(left))

      ++ Only left-value environment is propagated!
      this.env := left.env
      this.rule :=
        ([nodeRef(left), nodeRef(right),
          nodeSubType(nodeRef(right), nodeRef(left)),
          nodeSubType(nodeRef(left), nodeRef(this))])
      this.node := nodeAssign(left.node, right.node)
      this

    walkCondExpr (ce : CE, ctx : CTX, env : ENV) : TCN ==
      debug ["Processing conditional expression." :: PF]
      this := addNode!(ctx)
      this.type := addTypeVar!(ctx)

      cond := walk(ce.cond, ctx, env)
      truebr := walk(ce.truebr, ctx, cond.env)
      falsebr := walk(ce.falsebr, ctx, cond.env)

      ++ TODO: "truebr.env" and "falsebr.env" should be merged and passed
      ++ forward instead of just "env". Merging means that if the same variable
      ++ was introduced in both branches then it should be present in the final
      ++ environment.
      ++
      ++ Q: What if a variable "x : T" is defined only in one branch?
      ++ A: In merged envrionment introduce "x" with type Union(T, "undefined"),
      ++    and emit a warning when subtyping rule is applied.
      this.env := env
      this.rule :=
        ([nodeRef(cond), nodeRef(truebr), nodeRef(falsebr),
          nodeCondExpr(nodeRef(cond), nodeRef(truebr), nodeRef(falsebr))])
      this.node := nodeCondExpr(cond.node, truebr.node, falsebr.node)
      this

    walkFun (fn : FN, ctx : CTX, env : ENV) : TCN ==
      debug ["Processing function" :: PF, string(fn.name :: PF)]

      fnType : MT := signature fn

      ++ Take the type of function and replace those components, that were not
      ++ specified, with type variables.
      typeList : List(N) :=
        ([(emptyNode?(t) => typeVar(i); t)
          for i in 1.. for t in [fnType.result, :fnType.args]])

      fnType' := nodeMappingType(rest typeList, first typeList)

      debug(["Signature associated with function definition :" :: PF,
             fnType' :: PF])

      ++ Fetch signatures from the environment, including those defined by
      ++ the domain / package / function. Filter out those that don't match
      ++ the type calculated above.
      candidateList : List(MT) := []
      for mm in getModemap(fn.name, env) repeat
        te := qualifiedType(mm) :: TE
        if te.type = ["%" :: Symbol] then
          candidate := te.expr
          ures := unifyType(fnType', candidate)
          failed? ures => "iterate"
          candidate := substitute(fnType', ures :: SUBST)
          candidateList := [candidate :: MT, :candidateList]

      ++ TODO: Filter out function which have been already defined.

      if not empty? candidateList then
        info(["Environment contains" :: PF, string bold(fn.name :: PF),
              "with signatures:" :: PF,
              bold bracket [c :: PF for c in candidateList]])
      else
        info(["Considering" :: PF, string bold(fn.name :: PF),
              "of type" :: PF, bold(fnType :: PF),
              "to be a local function!" :: PF])
        candidateList := [fnType]

      debug(["Will perform type check for" :: PF, string bold(fn.name :: PF),
             "function with following candidate signatures:" :: PF,
             brace [c :: PF for c in candidateList]])

      this := addNode!(ctx, env)

      ++ Perform a type check for each candidate signature.
      for candidate in candidateList repeat
        info ["Assume" :: PF, fn.name :: PF, "has type :" :: PF, candidate :: PF]

        ctx' := nodeArray(ctx)
        env' := env

        this := addNode!(ctx', env)

        ++ For each undefined argument type, add a node with type variable.
        argList : List(N) := []
        argTypeList : List(N) := []

        for n in fn.args for t in candidate.args repeat
          ++ Augment the environment if argument type is known upfront.
          argName := (n :: NT).name
          argType :=
            not emptyNode?(t) => t
            t := addTypeVar!(ctx')
            arg := addNode!(ctx', env)
            arg.type := t
            arg.node := [argName]
            this.rule := [nodeRef(arg), :this.rule]
            typeRef(arg)
          argList := [nodeNamedType(argName, argType), :argList]
          argTypeList := [t, :argTypeList]
          ++ Make the argument visible inside function body.
          debug(["Function argument" :: PF, string bold(argName :: PF),
                 "has type" :: PF, bold(t :: PF)])
          if not typeVar?(t) then
            env' := envAddType(t, env')
          env' := addMode(argName, t, env')

        ++ Add a node that represents the type of function body, always.
        fnRes := addNode!(ctx', env)
        fnRes.type :=
          emptyNode? candidate.result => addTypeVar!(ctx')
          addTypeVar!(ctx', [candidate.result])
        fnRes.node := typeRef(fnRes)
        ++ Augment the environment if result type is known upfront.
        if not emptyNode? candidate.result then
          env' := envAddType(candidate.result, env')
        this.rule := [nodeRef(fnRes), :this.rule]

        fnBody := walk(fn.body, ctx', env')

        fnRes.rule := [nodeRef(fnBody), nodeSubType(nodeRef(fnBody), nodeRef(fnRes))]
        fnRes.node := nodeRef(fnBody)

        this.type := nodeMappingType(reverse argTypeList, fnRes.type)
        this.rule := reverse this.rule
        this.node := nodeFun(fn.name, reverse argList, typeRef(fnRes), fnBody.node)

        debug ["Tree ready for unification :" :: PF]
        debug [ctx' :: PF]

        if check ctx' then
          ns := nodes ctx'
          this.node := rewrite(this.node)$SpadTreeFillInTypes(ns)
          return this

      fail (["No matching type for function" :: PF, string bold(fn.name :: PF),
             "found!" :: PF, pile(["Candidates were:" :: PF,
                                   :[c :: PF for c in candidateList]])])
      error ""

    walkFtor (ft : FT, ctx : CTX, env : ENV) : TCN ==
      sig := signature ft

      debug ["Processing functor :" :: PF, sig :: PF]
      env := addMode(sig.name, sig.type, env)
      env := addMode("$" :: Symbol, ft.type, env)
      env := addModemapsFromCategory(["$" :: Symbol], ft.type, env)

      ++ process functor's arguments
      for arg in ft.args repeat
        env := addModemap(arg.name :: Symbol, arg.type, [categoryType], env)
        env := addMode(arg.name, arg.type, env)
        env := addModemapsFromCategory([arg.name], arg.type, env)

      this := addNode!(ctx, env)

      ftorBody := walk(ft.capsule, ctx, env)
      extendType := if emptyNode? ft.extends then ['Type] else ft.extends

      this.type := sig.type
      this.rule := [nodeRef(ftorBody)]
      this.node := nodeFtor(ft.name, ft.args, ft.type, extendType, ftorBody.node)
      this

    walkImport (im : IM, ctx : CTX, env : ENV) : TCN ==
      debug ["Importing" :: PF, im.type :: PF]
      env := envAddType(im.type, env)
      this := addNode!(ctx, env)
      this.type := voidType
      this.node := [im]
      this

    walkLambda (lam : LAM, ctx : CTX, env : ENV) : TCN ==
      this := addNode!(ctx, env)

      ++ Replace unknown types with type variables and add arguments to the
      ++ environment. Rewrite those lambda arguments that miss the type.
      argList : List(NT) := []
      argTypeList : List(N) := []

      for arg in lam.args repeat
        if emptyNode? arg.type then
          argType := addTypeVar! ctx

          lamArg := addNode!(ctx, env)
          lamArg.type := argType
          lamArg.node := [arg.name]
          this.rule := [nodeRef(lamArg), :this.rule]

          arg := [arg.name, typeRef(lamArg)]$NT
        else
          argType := arg.type
        argList := [arg, :argList]
        argTypeList := [argType, :argTypeList]
        env := addMode(arg.name, argType, env)

      argList := reverse argList
      argTypeList := reverse argTypeList

      retType := (emptyNode? lam.type => addTypeVar! ctx; lam.type)
      lamType := [argTypeList, retType]$MT

      debug ["Lambda expression of type" :: PF, bold(lamType :: PF)]

      ++ generate a node with result type
      lamBodyType := addNode!(ctx, env)
      lamBody := walk(lam.body, ctx, env)
      lamBodyType.type := retType
      lamBodyType.rule :=
        [nodeRef(lamBody), nodeSubType(nodeRef(lamBody), nodeRef(lamBodyType))]
      lamBodyType.node := nodeRef(lamBody)

      ++ add a node with type of the lambda expression just for dependants
      this.type := [lamType]
      this.rule := concat(reverse this.rule, [nodeRef(lamBodyType)])
      this.node := nodeLambda(argList, typeRef(lamBodyType), nodeRef(lamBody))
      this

    walkLoop (lp : LP, ctx : CTX, env : ENV) : TCN ==
      debug ["Loop statement." :: PF]
      this := addNode!(ctx, env)
      env' := env
      type : N

      if lp.kind case "collect" then
        type := addTypeVar!(ctx)
        this.type := nodeApp(['List], [type])
      else
        this.type := voidType

      debug ["Processing" :: PF, #(lp.itors) :: PF, "iterator(s)." :: PF]
      itorList : List(IT) := []
      for i in lp.itors repeat
        varType := addTypeVar!(ctx)

        ++ Iterator variable is added to loop's body environment,
        ++ but is also known to guards.
        env' := addMode(i.var, varType, env')
        varExpr := walk([i.var], ctx, env')

        seqType := addNode!(ctx, env)
        seqExpr := walk(i.seq, ctx, env)
        seqType.type :=
          addTypeVar!(ctx, [nodeApp(['List], [varType]),
                            nodeApp(['UniversalSegment], [varType])])
        seqType.rule :=
          ([nodeRef(varExpr), nodeRef(seqExpr), 
            nodeSubType(nodeRef(seqExpr), nodeRef(seqType))])
        seqType.node := nodeRef(seqExpr)

        itorList := [[i.var, seqExpr.node]$IT, :itorList]
        this.rule := [nodeRef(seqType), nodeRef(varExpr), :this.rule]

      debug ["Processing" :: PF, #(lp.guards) :: PF, "guard(s)." :: PF]
      guardList : List(N) := []
      for g in lp.guards repeat
        guardType := addNode!(ctx, env')
        guardExpr := walk(g, ctx, env')

        guardType.type := booleanType
        guardType.rule :=
          [nodeRef(guardExpr), nodeSubType(nodeRef(guardExpr), nodeRef(guardType))]
        guardType.node := nodeRef(guardExpr)

        guardList := [guardExpr.node, :guardList]
        this.rule := [nodeRef(guardType), :this.rule]

      debug ["Processing loop body." :: PF]
      if lp.kind case "collect" then
        bodyType := addNode!(ctx, env')
        bodyExpr := walk(lp.body, ctx, env')

        bodyType.type := type
        bodyType.rule :=
          [nodeRef(bodyExpr), nodeSubType(nodeRef(bodyExpr), nodeRef(bodyType))]

        this.rule := [nodeRef(bodyType), :this.rule]
      else
        bodyExpr := walk(lp.body, ctx, env')
        this.rule := [nodeRef(bodyExpr), :this.rule]

      this.rule := reverse this.rule
      this.node := nodeLoop(lp.kind, itorList, guardList, bodyExpr.node)
      this

    walkSeg (seg : SEG, ctx : CTX, env : ENV) : TCN ==
      debug ["Processing segment:" :: PF, string(seg :: PF)]
      segType := addTypeVar! ctx

      this := addNode!(ctx)

      startExpr := walk(seg.start, ctx, env)
      startType := addNode!(ctx)
      startType.env := env
      startType.type := segType
      startType.rule :=
        ([nodeRef(startExpr),
          nodeSubType(nodeRef(startExpr), nodeRef(startType))])
      startType.node := nodeRef(startExpr)
      this.rule := [nodeRef(startType), :this.rule]

      if not emptyNode? seg.end then
        endExpr := walk(seg.end, ctx, env)
        endType := addNode!(ctx)
        endType.env := env
        endType.type := segType
        endType.rule :=
          ([nodeRef(endExpr),
            nodeSubType(nodeRef(endExpr), nodeRef(endType))])
        endType.node := nodeRef(endExpr)
        this.rule := [nodeRef(endType), :this.rule]
        endNode := endType.node
      else
        endNode := emptyNode()

      if not emptyNode? seg.step then
        stepExpr := walk(seg.step, ctx, env)
        stepType := addNode!(ctx)
        stepType.env := env
        stepType.type := integerType
        stepType.rule :=
          ([nodeRef(stepExpr),
            nodeSubType(nodeRef(stepExpr), nodeRef(stepType))])
        stepType.node := nodeRef(stepExpr)
        this.rule := [nodeRef(stepType), :this.rule]
        stepNode := stepType.node
      else
        stepNode := emptyNode()

      this.env := env
      this.type := nodeApp(['UniversalSegment], [segType])
      this.rule := reverse this.rule
      this.node := nodeSeg(startExpr.node, endNode, stepNode)
      this

    walkSeq (s : SEQ, ctx : CTX, env : ENV) : TCN ==
      debug ["Found sequence of" :: PF, #(s.list) :: PF, "expressions." :: PF]
      this := addNode!(ctx)
      
      exprList : List(TCN) := []
      for e in s.list repeat
        expr := walk(e, ctx, env)
        env := expr.env
        exprList := [expr, :exprList]
      lastExpr := first exprList
      exprList := reverse exprList

      this.type := addTypeVar!(ctx)
      this.rule :=
        concat([nodeRef(expr) for expr in exprList],
               [nodeSubType(nodeRef(lastExpr), nodeRef(this))])
      this.node := nodeSeq(s.kind, [expr.node for expr in exprList])
      this.env := lastExpr.env
      this

    walkSym (s : Symbol, ctx : CTX, env : ENV) : TCN ==
      debug ["Symbol lookup for" :: PF, string(s :: PF)]
      types := [qualifiedType(mm) for mm in getModemap(s, env)]
      mode := getMode(s, env)
      if not emptyNode? mode then
        types := [mode, :types]
      ++ BUG: parseTran use true and false as "Boolean" and not as "() -> Boolean"
      ++ workaround for Boolean constants
      if s = 'true or s = 'false then
        types := [booleanType, :types]
      if s = '_$NoValue then
        types := [voidType, :types]
      if s = 'leave then
        leaveType := nodeMappingType([integerType, voidType], typeAny) 
        types := [leaveType, :types]
      if s = 'error then
        errorType := nodeMappingType([stringType], typeAny)
        types := [errorType, :types]
      if s = 'return then
        returnType := nodeMappingType([integerType, typeVar(1)], typeAny)
        types := [returnType, :types]
      empty? types =>
        fail ["Undefined symbol:" :: PF, bold red string (s :: PF), "!" :: PF]
        error ""
      info(["Found" :: PF, string bold(s :: PF), "with type :" :: PF,
            bold bracket [t :: PF for t in types]])
      this := addNode!(ctx)
      this.env := env
      this.type :=
        #types = 1 and typeVar? types.1 => types.1
        addTypeVar!(ctx, types)
      this.node := [s]
      this 

    walkTypeExpr (te : TE, ctx : CTX, env : ENV) : TCN ==
      te.kind = '_: => 
        debug(["Expression" :: PF, te.expr :: PF, "has type" :: PF, te.type :: PF])

        not symbol? te.expr =>
          fail ["Type annotation works only for symbols!" :: PF]
          error ""

        -- Type definition for a symbol:
        -- add it to the environment or crash if already defined
        s := te.expr :: Symbol
        t := getMode(s, env)

        (not emptyNode? t) and (t ~= te.type) =>
          fail([bold red ("Error!" :: PF), "Symbol" :: PF, string(s :: PF),
                "already defined as" :: PF, getMode(s, env) :: PF, "!" :: PF])
          error ""

        env := addMode(s, te.type, env)

        this := addNode!(ctx, env)
        this.type := te.type
        this.node := [te]
        this

      te.kind = '_@ =>
        debug(["Expression" :: PF, te.expr :: PF,
               "has to return type" :: PF, te.type :: PF])

        not apply? te.expr =>
          fail ["Type cut operator works only for function application!" :: PF]
          error ""

        env := envAddType(te.type, env)
        this := addNode!(ctx, env)
        expr := walk(te.expr, ctx, env)

        this.type := te.type
        this.rule := [nodeRef(expr), nodeSubType(nodeRef(expr), nodeRef(this))]
        this.node := nodeRef(expr)
        this

      te.kind = '_:_: =>
        debug ["Expression" :: PF, te.expr :: PF, "have to coerce to" :: PF, te.type :: PF]
        walk(nodeApp(['coerce], [te.expr]), ctx, env)
    
      te.kind = '_$ =>
        not symbol? te.expr =>
          fail ("Type origin selector works only for symbols!" :: PF)
          error ""

        debug(["Symbol" :: PF, string(te.expr :: PF),
               "must originate from" :: PF, bold(te.type :: PF),
               "type!" :: PF])

        env := envAddType(te.type, env)
        this := addNode!(ctx, env)
        expr := walk(te.expr, ctx, env)

        this.type := addTypeVar!(ctx)
        this.rule :=
          [nodeRef(expr), nodeTypeExpr('_$, nodeRef(expr), te.type)]
        this.node := nodeRef(expr)
        this

      fail ["Type expression" :: PF, bold red paren(te :: PF), "not handled yet!" :: PF]
      error ""

    walkInt (i : Integer, ctx : CTX, env : ENV) : TCN ==
      debug [i :: PF, "is" :: PF, integerType :: PF, ":)" :: PF]
      this := addNode!(ctx)
      this.env := env
      this.type := integerType
      this.node := [i]
      this

    walkFlt (f : DoubleFloat, ctx : CTX, env : ENV) : TCN ==
      debug [f :: PF, "is" :: PF, floatType :: PF, ":)" :: PF]
      this := addNode!(ctx)
      this.env := env
      this.type := floatType
      this.node := [f]
      this

    walkStr (s : String, ctx : CTX, env : ENV) : TCN ==
      debug [string(s :: PF), "is" :: PF, stringType :: PF, ":)" :: PF]
      this := addNode!(ctx)
      this.env := env
      this.type := addTypeVar!(ctx, [[string(s :: Symbol)], stringType])
      this.node := [s]
      this

    walkEmpty (e : N, ctx : CTX, env : ENV) : TCN ==
      this := addNode!(ctx)
      this.env := env
      this.type := voidType
      this.node := e
      this

    walk (n, ctx, env) ==
      apply? n => walkApp(n :: APP, ctx, env)
      assign? n => walkAssign(n :: ASS, ctx, env)
      condExpr? n => walkCondExpr(n :: CE, ctx, env)
      float? n => walkFlt(n :: DoubleFloat, ctx, env)
      functor? n => walkFtor(n :: FT, ctx, env)
      import? n => walkImport(n :: IM, ctx, env)
      integer? n => walkInt(n :: Integer, ctx, env)
      lambda? n => walkLambda(n :: LAM, ctx, env)
      loop? n => walkLoop(n :: LP, ctx, env)
      segment? n => walkSeg(n :: SEG, ctx, env)
      sequence? n => walkSeq(n :: SEQ, ctx, env)
      string? n => walkStr(n :: String, ctx, env)
      symbol? n => walkSym(n :: Symbol, ctx, env)
      typeExpr? n => walkTypeExpr(n :: TE, ctx, env)
      function? n => walkFun(n :: FN, ctx, env)
      emptyNode? n => walkEmpty(n, ctx, env)
      -- namedType, mappingType, recordType, sumType, unionType, macro, where
      fail ["Expression" :: PF, bold red paren(n :: PF), "not handled yet!" :: PF]
      error ""

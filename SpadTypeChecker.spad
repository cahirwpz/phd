)abbrev package STREMREF SpadTreeRemoveReferences
SpadTreeRemoveReferences(find : (PI, PI) -> TN) : SpadTreeWalkerCategory == Implementation where
  PF ==> PrintableForm
  PI ==> PositiveInteger
  N ==> SpadNode
  APP ==> SpadApply(N)
  NR ==> SpadNodeRef(N)
  TO ==> SpadTypeOrigin(N)
  TV ==> SpadTypeVar(N)
  TN ==> SpadTypeNode

  Implementation ==> add
    import Logger('Fill)

    rewrite (to : TO) : N ==
      (e, t) := (rewrite to.expr, rewrite to.type)
      t = ['_$] => e
      typeAny? t => e
      mappingType? t => e
      nodeTypeOrigin(e, t)

    rewrite (app : APP) : N ==
      -- WORKAROUND! Remove origin qualifier from first argument of implicit
      -- call to 'elt' added in walkApp $ SpadTypeChecker.
      to : TO
      fun := rewrite app.function
      args := [rewrite a for a in app.args]
      if typeOrigin? fun then 
        to := coerce(fun)
        if to.expr = ['elt] and #args > 0 and typeOrigin? first args then
          to := coerce(first args)
          args := cons(to.expr, rest app.args)
      nodeApp(fun, args)

    rewrite (tv : TV) : N ==
      to : TO
      tn := find(tv.major :: PI, tv.minor :: PI)
      t := tn.type
      while typeOrigin? t repeat
        to := coerce(t)
        t := to.type
      t

    rewrite (nr : NR) : N ==
      tn := find(nr.major :: PI, nr.minor :: PI)
      tn.node = [nr] =>
        fail pile ["Self reference detected:" :: PF, tn :: PF]
        error ""
      rewrite tn.node

)abbrev package STTCHECK SpadTypeTreeChecker
SpadTypeTreeChecker() : Exports == Implementation where
  NNI ==> NonNegativeInteger
  PF ==> PrintableForm
  PI ==> PositiveInteger

  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  ENV ==> SpadEnvironment
  FN ==> SpadFunction(N)
  MT ==> SpadMappingType(N)
  NR ==> SpadNodeRef(N)
  SEQ ==> SpadSequence(N)
  ST ==> SpadSubType(N)
  TEI ==> SpadTypeIs(N)
  TO ==> SpadTypeOrigin(N)
  TV ==> SpadTypeVar(N)
  UT ==> SpadUnionType(N)

  SUBST ==> AssociationList(TV, List(N))
  URES ==> Union(SUBST, "failed")

  TT ==> SpadTypeTree
  TNA ==> SpadTypeNodeArray(SpadTypeTree)
  TN ==> SpadTypeNode
  TR ==> SpadTypeRule

  Exports ==> with
    walk : TT -> Boolean

  Implementation ==> add
    import Logger('Check)
    import TypeUnifier
    import SpadNodeFactory
    import SpadTypeNode
    import SpadTypeTree
    import SpadTypeNodeArray(SpadTypeTree)

    walk' : (TT, PI) -> Boolean

    evalApply(ctx : TT, r : APP, n : TN) : Boolean ==
      nfun := node(ctx, r.function :: NR) -- function node
      nargs := [node(ctx, arg :: NR) for arg in r.args] -- argument nodes

      sigs : List(N) := []
      substList : List(SUBST) := []
      for t in typeOf(ctx, nfun) repeat
        -- 1) Consider signature types with correct number of arguments.
        t' := stripOriginIfCan t
        not mappingType? t' => "iterate"
        sig := t' :: MT
        if sig.args = [['constant]] then
          sig := [[], sig.result]$MT
        #sig.args ~= #nargs => "iterate"
        debug ["Checking signature:" :: PF, bold(t :: PF)]
        -- 2) Check if arguments can be applied to function of given
        --    signature.
        argsOk? := true
        for arg in sig.args for narg in nargs | argsOk? repeat
          argTypes := typeOf(ctx, narg)
          ures := unifyType(arg, argTypes)
          ures case SUBST =>
            substList := [ures :: SUBST, :substList]
          "or"/[isSubType(argType, arg) for argType in argTypes] => "iterate"
          argsOk? := false
        not argsOk? => "iterate"
        -- 3) Check if result type is correct for given signature.
        ures := unifyType(sig.result, typeOf(ctx, n))
        ures case "failed" => "iterate"
        -- 4) Collect variable substitutions and valid signature.
        substList := [ures :: SUBST, :substList]
        sigs := [t, :sigs]
      subst := mergeSubstitutions(substList)

      debug ["Valid signatures:" :: PF, bold bracket [t :: PF for t in sigs]]

      empty? sigs => false

      if typeVar? nfun.type then
        nodeSubTypeOf!(ctx, nfun, sigs)

      for s in entries subst repeat
        limitTypeVar!(ctx, s.key, s.entry)

      -- Fetch all inferred mappings.
      mappings : List(MT) := []
      for t in sigs repeat
        t := stripOriginIfCan t
        not mappingType? t => "iterate"
        mappings := [t :: MT, :mappings]
      -- Propagate function arguments and return type down the tree.
      for i in 1..#nargs for narg in nargs repeat
        nodeSubTypeOf!(ctx, narg, [(mt.args)(i) for mt in mappings])
      limitNodeType!(ctx, n, [mt.result for mt in mappings]) 
      true

    evalAssign(ctx : TT, r : ASS, n : TN) : Boolean ==
      ln := node(ctx, r.lval :: NR) -- left node
      rn := node(ctx, r.rval :: NR) -- right node
      -- a) {%s[?]} := {%t[t1, t2, ...] | T}
      -- given a type information flows from nodes above during TT
      -- construction and we don't know anything, let's accept types
      -- from below
      hasUnknownType?(ctx, ln) => limitNodeType!(ctx, ln, [rn.type])
      -- b) {%s[s1, s2, ...] | S} := {%t[?]}
      -- we simply don't know, wait for types to flow from below
      hasUnknownType?(ctx, rn) => true
      -- c) {%s[s1, s2, ...] | S} := {%t[t1, t2, ...] | T}
      -- now it's easy...
      not nodeSubType!(ctx, rn, ln) and not nodesTypeMatch!(ctx, ln, rn) => false
      limitNodeType!(ctx, n, [ln.type])

    evalCondExpr(ctx : TT, r : CE, n : TN) : Boolean ==
      cn := node(ctx, r.cond :: NR) -- condition node
      tn := node(ctx, r.truebr :: NR) -- true branch node
      fn := node(ctx, r.falsebr :: NR) -- false branch node
      not limitNodeType!(ctx, cn, [booleanType]) => false
      nodeSubType!(ctx, tn, n) and nodeSubType!(ctx, fn, n) => true
      nodesTypeMatch!(ctx, n, tn) and nodesTypeMatch!(ctx, n, fn) => true
      typeUndef? tn.type and limitNodeType!(ctx, fn, [typeAny]) =>
        killNode!(ctx, n)
        true
      typeUndef? fn.type and limitNodeType!(ctx, tn, [typeAny]) =>
        killNode!(ctx, n)
        true
      false

    evalSubType(ctx : TT, r : ST, n : TN) : Boolean ==
      n1 := node(ctx, r.expr :: NR)
      n2 := node(ctx, r.type :: NR)
      nodeSubType!(ctx, n1, n2)

    evalTypeIs(ctx : TT, r : TEI, n : TN) : Boolean ==
      s := node(ctx, r.expr :: NR)
      t := node(ctx, r.type :: NR)
      -- a) {%s[?]} : {%t[t1, t2, ...] | T}
      -- given a type information flows from nodes above during TT
      -- construction and we don't know anything, let's accept types
      -- from below
      hasUnknownType?(ctx, s) => limitNodeType!(ctx, s, [t.type])
      -- b) {%s[s1, s2, ...] | S} : {%t[?]}
      -- we simply don't know, wait for types to flow from below
      hasUnknownType?(ctx, t) => true
      -- c) {%s[s1, s2, ...] | S} : {%t[t1, t2, ...] | T}
      -- now it's easy...
      nodesTypeMatch!(ctx, s, t)

    evalTypeOrigin(ctx : TT, r : TO, n : TN) : Boolean ==
      fun := node(ctx, r.expr :: NR)
      limitNodeType!(ctx, n, [fun.type])

    evalCapsule(ctx : TT, r : SEQ, n : TN) : Boolean ==
      items := r.list
      types : List(N) := []
      for item in items repeat
        tn := node(ctx, item :: NR)
        not done? tn => return true
        if mappingType? tn.type and nodeRef? tn.node then
          fn := node(ctx, tn.node :: NR)
          types := [nodeTypeDecl((fn.node :: FN).name, tn.type), :types]
      limitNodeType!(ctx, n, [nodeSeq("Join", reverse types)])

    -- evaluates single rule; note that it can happen that nothing was changed
    -- even if no type error was detected (result "true" means yes or maybe)
    evalFormula(ctx : TT, f : N, n : TN) : Boolean ==
      emptyNode? f => true
      nodeRef? f =>
        nr := f :: NR
        n.index.major ~= nr.major =>
          walk'(ctx, nr.major)
        true

      debug (["Running type inference for" :: PF, n.index :: PF,
              "of" :: PF, n.type :: PF, "type." :: PF])

      apply? f => evalApply(ctx, f :: APP, n)
      assign? f => evalAssign(ctx, f :: ASS, n)
      condExpr? f => evalCondExpr(ctx, f :: CE, n)
      subType? f => evalSubType(ctx, f :: ST, n)
      typeIs? f => evalTypeIs(ctx, f :: TEI, n)
      typeOrigin? f => evalTypeOrigin(ctx, f :: TO, n)
      capsule? f => evalCapsule(ctx, f :: SEQ, n)

      fail ["evalFormula: case not handled for" :: PF, f :: PF]
      error "Internal error!"

    evalAnyRule(ctx : TT, n : TN) : Boolean ==
      rules := n.rules
      empty? rules => true
      while not empty? rules repeat
        fs := (first rules).formulas
        while not empty? fs repeat
          not evalFormula(ctx, first fs, n) => break
          fs := rest fs
        empty? fs => break
        rules := rest rules
      empty? rules => false
      -- Immediately remove rules that fail to apply.
      for victim in setDifference(references n.rules, references rules) repeat
        killNode!(ctx, node(ctx, victim))
      n.rules := rules
      true

    checkAndMarkIfDone! (ctx : TT, n : TN) : Boolean ==
      unbound? n.type => false
      if not empty? n.rules then
        -- We only care about first rule, because it produced actual solution.
        rule := first n.rules
        for ref in references rule repeat
          cn := node(ctx, ref :: NR)
          import? cn.node or typeDecl? cn.node => "iterate"
          if unbound? cn.type then
            return false
        -- Remove leftovers from other alternative rules.
        for victim in setDifference(references n.rules, references rule) repeat
          killNode!(ctx, node(ctx, victim))
        n.node := rule.solution
      done! n; true

    countProgress (ctx : TT, i : PI) : Record(a : NNI, b : NNI) ==
      -- a = number of type variables and nodes to be processed
      --     (empty type variable counts twice)
      -- b = sum of types assigned to each type variable
      x := members(ctx).i
      p := [#listTypeVars(x), 0]
      for n in members x | not done? n repeat
        p.a := p.a + 1
        if hasUnknownType?(ctx, n)
          then p.a := p.a + 1
          else p.b := p.b + #typeOf(ctx, n)
      p

    walk' (ctx : TT, i : PI) : Boolean ==
      q : Queue(TN) := empty()

      for n in listPostOrder(ctx, i) | not done? n repeat 
        enqueue!(n, q)

      p := countProgress(ctx, i)
      s := 1 :: NNI

      while p.a > 0 or p.b > 0 repeat
        newQ : Queue(TN) := empty()

        info ["Processing order:" :: PF, bracket [n.index :: PF for n in members q]]

        -- perform meta-step
        while not empty? q repeat
          n := dequeue! q
          done? n => "iterate"

          --debug([number(s) :: PF, "Queue state" :: PF, "=>" :: PF,
          --       n.index :: PF, ":" :: PF,
          --       bracket [m.index :: PF for m in members q]])

          not evalAnyRule(ctx, n) =>
            fail pile([spaces ["Type error for node:" :: PF, n.index :: PF],
                       red(n.node :: PF)])
            return false

          -- Check if we're done with processing type variable tied to this node.
          rewriteIfInferred!(ctx, n)

          -- If type is inferred for all formulas the node itself won't change
          checkAndMarkIfDone!(ctx, n) =>
            debug ["Processing node" :: PF, n.index :: PF, "completed!" :: PF]

          enqueue!(n, newQ)

        -- check if during meta-step the problem was reduced compared to
        -- previous meta-step
        newP := countProgress(ctx, i)
        correct :=
          newP.a < p.a => true
          newP.a = p.a and newP.b < p.b => true
          false
        not correct =>
          fail ("Type checker does not advance by applying known typing rules!" :: PF)
          return false

        -- setup new meta-step
        p := newP
        q := newQ
        s := s + 1

      true

    walk ctx ==
      for na in members ctx repeat
        for n in members na repeat 
          rewriteIfInferred!(ctx, n)
          checkAndMarkIfDone!(ctx, n)

      info vconcat ["Tree ready for type checking..." :: PF, ctx :: PF]

      success := walk'(ctx, 1)

      if success then -- Rewrite the tree if succeeded !
        -- capture x in closure, so that we don't need to expose SpadTypeTree 
        -- type to SpadTreeFillInTypes
        for na in members ctx repeat
          findTypeNode := ((i : PI, j : PI) : TN +-> node(ctx, [i, j]$NR))
          root(na).node := rewrite(root(na).node)$SpadTreeRemoveReferences(findTypeNode)
      else
        for na in members ctx repeat
          for n in members na repeat 
            rewriteIfInferred!(ctx, n)
            checkAndMarkIfDone!(ctx, n)

      info (ctx :: PF)

      success

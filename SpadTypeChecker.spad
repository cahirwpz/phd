)abbrev package STREMREF SpadTreeRemoveReferences
SpadTreeRemoveReferences(find : (PI, PI) -> TN) : SpadTreeWalkerCategory == Implementation where
  PF ==> PrintableForm
  PI ==> PositiveInteger
  N ==> SpadNode
  APP ==> SpadApply(N)
  FT ==> SpadFunctor(N)
  NR ==> SpadNodeRef(N)
  TO ==> SpadTypeOrigin(N)
  TV ==> SpadTypeVar(N)
  TN ==> SpadTypeNode

  Implementation ==> add
    import Logger('Fill)
    import FT

    rewrite (to : TO) : N ==
      (e, t) := (rewrite to.expr, rewrite to.type)
      t = ['_$] => e
      t = appform(find(1, 1).node :: FT) => e
      typeAny? t => e
      mappingType? t => e
      nodeTypeOrigin(e, t)

    rewrite (app : APP) : N ==
      -- WORKAROUND! Remove origin qualifier from first argument of implicit
      -- call to 'elt' added in walkApp $ SpadTypeChecker.
      to : TO
      fun := rewrite app.function
      args := [rewrite a for a in app.args]
      if typeOrigin? fun then 
        to := coerce(fun)
        if to.expr = ['elt] and #args > 0 and typeOrigin? first args then
          to := coerce(first args)
          args := cons(to.expr, rest args)
      nodeApp(fun, args)

    rewrite (tv : TV) : N ==
      to : TO
      tn := find(tv.major :: PI, tv.minor :: PI)
      t := tn.type
      while typeOrigin? t repeat
        to := coerce(t)
        t := to.type
      t

    rewrite (nr : NR) : N ==
      tn := find(nr.major :: PI, nr.minor :: PI)
      tn.node = [nr] =>
        fail pile ["Self reference detected:" :: PF, tn :: PF]
        error ""
      rewrite tn.node

)abbrev package STTCHECK SpadTypeTreeChecker
SpadTypeTreeChecker() : Exports == Implementation where
  NNI ==> NonNegativeInteger
  PF ==> PrintableForm
  PI ==> PositiveInteger

  N ==> SpadNode
  APP ==> SpadApply(N)
  ASS ==> SpadAssign(N)
  CE ==> SpadCondExpr(N)
  ENV ==> SpadEnvironment
  FN ==> SpadFunction(N)
  MT ==> SpadMappingType(N)
  NR ==> SpadNodeRef(N)
  SEQ ==> SpadSequence(N)
  ST ==> SpadSubType(N)
  TEI ==> SpadTypeIs(N)
  TO ==> SpadTypeOrigin(N)
  TV ==> SpadTypeVar(N)
  UT ==> SpadUnionType(N)

  SUBS ==> AssociationList(TV, List(N))
  URES ==> Union(SUBS, "failed")
  SIG ==> Record(sig : N, subs : SUBS)

  TT ==> SpadTypeTree
  TNA ==> SpadTypeNodeArray(SpadTypeTree)
  TN ==> SpadTypeNode
  TR ==> SpadTypeRule

  Exports ==> with
    walk : TT -> Boolean

  Implementation ==> add
    import Logger('Check)
    import TypeUnifier
    import SpadNodeFactory
    import SpadTypeNode
    import SpadTypeTree
    import SpadTypeNodeArray(SpadTypeTree)

    walk' : (TT, PI) -> Boolean

    coerce (s : SIG) : PF ==
      empty? s.subs =>
        bold(s.sig :: PF)
      spaces [bold(s.sig :: PF), bold cyan("with" :: PF), bold(s.subs :: PF)]

    dropSubTypeSignatures(sl : List(SIG)) : List(SIG) ==
      tl : List(SIG) := []
      for s in sl repeat
        superTypeExists? := false
        for t in sl | s.sig ~= t.sig and not superTypeExists? repeat
          if isSubType(s.sig, t.sig) case "true" then
            superTypeExists? := true
        if not superTypeExists? then
          tl := [s, :tl]
      tl

    evalApply(ctx : TT, r : APP, n : TN) : Boolean ==
      funNode := node(ctx, r.function :: NR)
      argNodeList := [node(ctx, arg :: NR) for arg in r.args]

      candidates : List(SIG) := []

      for t in typeOf(ctx, funNode) repeat
        -- 1) Consider signature types with correct number of arguments.
        t' := stripOrigin t
        not mappingType? t' => "iterate"
        sig := t' :: MT
        -- replace {constant -> Type} with {() -> Type}
        if sig.args = [['constant]] then
          sig := [[], sig.result]$MT
        #sig.args ~= #argNodeList => "iterate"
        -- 2) Check if arguments can be applied to function of given
        --    signature.
        debug ["Checking signature:" :: PF, bold(t :: PF)]
        subs : List(SUBS) := []
        argsOk? := true
        for arg in sig.args for narg in argNodeList | argsOk? repeat
          argTypes := typeOf(ctx, narg)
          ures := unifyType(arg, argTypes)
          ures case SUBS =>
            subs := [ures :: SUBS, :subs]
          "and"/[isSubType(argType, arg) case "false" for argType in argTypes] => 
            argsOk? := false
        not argsOk? => "iterate"
        -- 3) Check if result type is correct for given signature.
        resOk? := true
        if sig.result ~= typeUndef and sig.result ~= typeAny then
          res := sig.result
          resTypes := typeOf(ctx, n)
          ures := unifyType(res, resTypes)
          ures case SUBS =>
            subs := [ures :: SUBS, :subs]
          resOk? := false
        not resOk? => "iterate"
        -- 4) Collect valid signature.
        candidates := [[t, merge subs], :candidates]

      candidates := dropSubTypeSignatures candidates

      info pile ["Valid signatures:" :: PF, :[coerce c for c in candidates]]

      empty? candidates => false

      if typeVar? funNode.type then
        limitNodeType!(ctx, funNode, [c.sig for c in candidates])

      for s in entries merge [c.subs for c in candidates] repeat
        limitTypeVar!(ctx, s.key, s.entry)

      -- Fetch all inferred mappings.
      mappings : List(MT) := []
      for t in [c.sig for c in candidates] repeat
        t := stripOrigin t
        not mappingType? t => "iterate"
        mappings := [t :: MT, :mappings]
      -- Propagate function arguments and return type down the tree.
      for i in 1..#argNodeList for narg in argNodeList repeat
        limitNodeType!(ctx, narg, [(mt.args)(i) for mt in mappings])
      limitNodeType!(ctx, n, [mt.result for mt in mappings]) 
      true

    evalAssign(ctx : TT, r : ASS, n : TN) : Boolean ==
      ln := node(ctx, r.lval :: NR) -- left node
      rn := node(ctx, r.rval :: NR) -- right node
      -- a) {%s[?]} := {%t[t1, t2, ...] | T}
      -- given a type information flows from nodes above during TT
      -- construction and we don't know anything, let's accept types
      -- from below
      hasUnknownType?(ctx, ln) => limitNodeType!(ctx, ln, [rn.type])
      -- b) {%s[s1, s2, ...] | S} := {%t[?]}
      -- we simply don't know, wait for types to flow from below
      hasUnknownType?(ctx, rn) => true
      -- c) {%s[s1, s2, ...] | S} := {%t[t1, t2, ...] | T}
      -- now it's easy...
      not nodeSubType!(ctx, rn, ln) and not nodesTypeMatch!(ctx, ln, rn) => false
      limitNodeType!(ctx, n, [ln.type])

    evalCondExpr(ctx : TT, r : CE, n : TN) : Boolean ==
      cn := node(ctx, r.cond :: NR) -- condition node
      not limitNodeType!(ctx, cn, [booleanType]) => false

      tn := node(ctx, r.truebr :: NR) -- true branch node
      emptyNode? r.falsebr =>
        hasAnyType?(ctx, tn) =>
          bindNode!(ctx, n, typeUndef)
          bindNode!(ctx, tn, typeUndef)
          done! n
          done! tn
          true
        limitNodeType!(ctx, n, [tn.type, nodeUnionType [tn.type, typeUndef]])

      fn := node(ctx, r.falsebr :: NR) -- false branch node

      hasUndefinedType?(ctx, fn) and hasUndefinedType?(ctx, tn) =>
        bindNode!(ctx, n, typeUndef)
        done! n
        true

      hasAnyType?(ctx, tn) and hasAnyType?(ctx, fn) =>
        hasAnyType?(ctx, n) =>
          bindNode!(ctx, n, typeAny)
          done! n
          true
        hasUnknownType?(ctx, n) =>
          setTypeOf!(ctx, n, [typeAny])
        limitNodeType!(ctx, tn, [n.type]) and limitNodeType!(ctx, fn, [n.type])

      hasUndefinedType?(ctx, tn) =>
        limitNodeType!(ctx, n, [fn.type, nodeUnionType [fn.type, typeUndef]])

      hasAnyType?(ctx, tn) =>
        limitNodeType!(ctx, n, [fn.type]) and limitNodeType!(ctx, tn, [fn.type])

      hasUndefinedType?(ctx, fn) =>
        limitNodeType!(ctx, n, [tn.type, nodeUnionType [tn.type, typeUndef]])

      hasAnyType?(ctx, fn) =>
        limitNodeType!(ctx, n, [tn.type]) and limitNodeType!(ctx, fn, [tn.type])

      t1 := tn.type
      t2 := fn.type
      ts : List(N) :=
        t1 = t2 => [t1]
        isSubType(t1, t2) case "true" => [t2]
        isSubType(t2, t1) case "true" => [t1]
        dropSubTypes [t1, t2, nodeUnionType [t1, t2], nodeUnionType [t2, t1]]

      not limitNodeType!(ctx, n, ts) => false

      ts := typeOf(ctx, n)

      nodeSubTypeOf!(ctx, tn, ts) and nodeSubTypeOf!(ctx, fn, ts)

    evalSubType(ctx : TT, r : ST, n : TN) : Boolean ==
      s := node(ctx, r.expr :: NR)
      t := node(ctx, r.type :: NR)
      hasAnyType?(ctx, s) => limitNodeType!(ctx, s, [t.type])
      hasUndefinedType?(ctx, s) => true
      nodeSubType!(ctx, s, t)

    evalTypeIs(ctx : TT, r : TEI, n : TN) : Boolean ==
      s := node(ctx, r.expr :: NR)
      t := node(ctx, r.type :: NR)
      -- %s[? | %any] is (%t[?] | %t[t1, t2, ...] | T)
      hasUnknownType?(ctx, s) =>
        setTypeOf!(ctx, s, [t.type])
      -- (%s[t1, t2, ...] | S) is %t[%any]
      hasAnyType?(ctx, t)  =>
        setTypeOf!(ctx, t, [s.type])
      -- %s[%any] is (%t[?] | %t[t1, t2, ...] | T)
      hasAnyType?(ctx, s) =>
        -- %s[%any] is %t[?]
        hasUnknownType?(ctx, t) =>
          setTypeOf!(ctx, t, [typeAny])
        -- %s[%any] is %t[%undef]
        hasUndefinedType?(ctx, t) =>
          bindNode!(ctx, s, typeUndef)
          done! s
          true
        -- %s[%any] is (%t[t1, t2, ...] | T)
        any := first typeOf(ctx, t)
        setTypeOf!(ctx, s, [any])
        setTypeOf!(ctx, t, [any])
      nodesTypeMatch!(ctx, s, t)

    evalTypeOrigin(ctx : TT, r : TO, n : TN) : Boolean ==
      fun := node(ctx, r.expr :: NR)
      limitNodeType!(ctx, n, [fun.type])

    -- evaluates single rule; note that it can happen that nothing was changed
    -- even if no type error was detected (result "true" means yes or maybe)
    evalFormula(ctx : TT, f : N, n : TN) : Boolean ==
      emptyNode? f => true
      nodeRef? f =>
        nr := f :: NR
        n.index.major ~= nr.major =>
          walk'(ctx, nr.major)
        true

      debug (["Running type inference for" :: PF, bold(n.index :: PF),
              "of" :: PF, n.type :: PF, "type." :: PF])

      apply? f => evalApply(ctx, f :: APP, n)
      assign? f => evalAssign(ctx, f :: ASS, n)
      condExpr? f => evalCondExpr(ctx, f :: CE, n)
      subType? f => evalSubType(ctx, f :: ST, n)
      typeIs? f => evalTypeIs(ctx, f :: TEI, n)
      typeOrigin? f => evalTypeOrigin(ctx, f :: TO, n)

      fail ["evalFormula: case not handled for" :: PF, f :: PF]
      error "Internal error!"

    evalAnyRule(ctx : TT, n : TN) : Boolean ==
      rules := n.rules
      empty? rules => true
      while not empty? rules repeat
        fs := (first rules).formulas
        while not empty? fs repeat
          not evalFormula(ctx, first fs, n) => break
          fs := rest fs
        empty? fs => break
        rules := rest rules
      empty? rules => false
      -- Immediately remove rules that fail to apply.
      for victim in setDifference(references n.rules, references rules) repeat
        killNode!(ctx, node(ctx, victim))
      n.rules := rules
      true

    checkAndMarkIfDone! (ctx : TT, n : TN) : Boolean ==
      unbound? n.type => false
      if not empty? n.rules then
        -- We only care about first rule, because it produced actual solution.
        rule := first n.rules
        for ref in references rule repeat
          cn := node(ctx, ref :: NR)
          import? cn.node or typeDecl? cn.node => "iterate"
          if unbound? cn.type then
            return false
        -- Remove leftovers from other alternative rules.
        for victim in setDifference(references n.rules, references rule) repeat
          killNode!(ctx, node(ctx, victim))
        n.rules := [rule]
        n.node := rule.solution
      done! n; true

    countProgress (ctx : TT, i : PI) : Record(a : NNI, b : NNI) ==
      -- a = number of type variables and nodes to be processed
      --     (empty type variable counts twice)
      -- b = sum of types assigned to each type variable
      x := members(ctx).i
      p := [#listTypeVars(x), 0]
      for n in members x | not done? n repeat
        p.a := p.a + 1
        if hasUnknownType?(ctx, n) or hasAnyType?(ctx, n)
          then p.a := p.a + 1
          else p.b := p.b + #typeOf(ctx, n)
      p

    walk' (ctx : TT, i : PI) : Boolean ==
      q : Queue(TN) := empty()

      for n in listPostOrder(ctx, i) | not done? n repeat 
        enqueue!(n, q)

      p := countProgress(ctx, i)
      s := 1 :: NNI

      while p.a > 0 or p.b > 0 repeat
        newQ : Queue(TN) := empty()

        info ["Processing order:" :: PF, bracket [n.index :: PF for n in members q]]

        -- perform meta-step
        while not empty? q repeat
          n := dequeue! q
          done? n => "iterate"

          --debug([number(s) :: PF, "Queue state" :: PF, "=>" :: PF,
          --       n.index :: PF, ":" :: PF,
          --       bracket [m.index :: PF for m in members q]])

          not evalAnyRule(ctx, n) =>
            fail vconcat([
              pile([spaces ["Type error for node:" :: PF, n.index :: PF],
                    red (n.node :: PF)]),
              pile(["of type:" :: PF,
                    red bracket [x :: PF for x in typeOf(ctx, n)]])])
            poisonNode!(ctx, n)
            return false

          -- Check if we're done with processing type variable tied to this node.
          rewriteIfInferred!(ctx, n)

          -- If type is inferred for all formulas the node itself won't change
          checkAndMarkIfDone!(ctx, n) =>
            debug(["Processing node" :: PF, bold(n.index :: PF),
                   "completed!" :: PF])

          enqueue!(n, newQ)

        -- check if during meta-step the problem was reduced compared to
        -- previous meta-step
        newP := countProgress(ctx, i)
        progress? :=
          newP.a < p.a => true
          newP.a = p.a and newP.b < p.b => true
          false
        not progress? =>
          warn(["Type checker does not progress in" :: PF,
                number(i :: Integer) :: PF, "tree !" :: PF])
          return true

        -- setup new meta-step
        p := newP
        q := newQ
        s := s + 1

      true

    walk ctx ==
      info vconcat ["Tree ready for type checking..." :: PF, ctx :: PF]

      for na in members ctx repeat
        for n in members na repeat 
          rewriteIfInferred!(ctx, n)

      success := walk'(ctx, 1)

      if success then -- Rewrite the tree if succeeded !
        -- capture x in closure, so that we don't need to expose SpadTypeTree 
        -- type to SpadTreeFillInTypes
        for na in members ctx repeat
          findTypeNode := ((i : PI, j : PI) : TN +-> node(ctx, [i, j]$NR))
          root(na).node := rewrite(root(na).node)$SpadTreeRemoveReferences(findTypeNode)
      else
        for na in members ctx repeat
          for n in members na repeat 
            rewriteIfInferred!(ctx, n)
            checkAndMarkIfDone!(ctx, n)

      info (ctx :: PF)

      success
